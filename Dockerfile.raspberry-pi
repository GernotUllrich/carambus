# Carambus Docker Image für Raspberry Pi
# Optimiert für ARM-Architektur und minimale Größe

# Basis-Image für ARM mit Ruby 3.2.1
FROM arm32v7/ruby:3.2.1-slim

# Umgebungsvariablen
ENV RAILS_ENV=production \
    BUNDLE_DEPLOYMENT=1 \
    BUNDLE_PATH=/usr/local/bundle \
    BUNDLE_WITHOUT=development:test \
    RAILS_SERVE_STATIC_FILES=true \
    RAILS_LOG_TO_STDOUT=true

# System-Pakete installieren (optimiert für ARM)
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    build-essential \
    libpq-dev \
    nodejs \
    npm \
    curl \
    wget \
    git \
    libjemalloc2 \
    libvips \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives

# Node.js und Yarn installieren (ARM-kompatibel)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn@1.22.22

# Arbeitsverzeichnis setzen
WORKDIR /rails

# Gemfile und Lock-Datei kopieren
COPY Gemfile Gemfile.lock .ruby-version ./

# Gems installieren (optimiert für ARM)
RUN bundle install --jobs 4 --retry 3 && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Package.json und Yarn-Lock kopieren
COPY package.json yarn.lock ./

# Node-Module installieren
RUN yarn install --frozen-lockfile

# Anwendungscode kopieren und Verzeichnisse erstellen
COPY . .
RUN mkdir -p log storage tmp

# Bootsnap-Code vorcompilieren für schnellere Boot-Zeiten
RUN bundle exec bootsnap precompile app/ lib/

# Assets-Kompilierung überspringen - wird später beim Start durchgeführt
# RUN SECRET_KEY_BASE_DUMMY=1 bundle exec rails assets:precompile

# Nicht-Root-Benutzer erstellen
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp

# Berechtigungen setzen
USER rails

# Port freigeben
EXPOSE 3000

# Health-Check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Entrypoint für Datenbank-Vorbereitung
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start-Kommando
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"] 