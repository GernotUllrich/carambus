# Carambus Docker Image für Raspberry Pi
# Optimiert für ARM-Architektur und minimale Größe

# Basis-Image für ARM
FROM arm32v7/ruby:3.2-slim

# Umgebungsvariablen
ENV RAILS_ENV=production \
    BUNDLE_DEPLOYMENT=1 \
    BUNDLE_PATH=/usr/local/bundle \
    BUNDLE_WITHOUT=development:test \
    RAILS_SERVE_STATIC_FILES=true \
    RAILS_LOG_TO_STDOUT=true

# System-Pakete installieren
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    build-essential \
    libpq-dev \
    nodejs \
    npm \
    curl \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/*

# Node.js und Yarn installieren
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn

# Arbeitsverzeichnis setzen
WORKDIR /rails

# Gemfile und Lock-Datei kopieren
COPY Gemfile Gemfile.lock ./

# Gems installieren
RUN bundle install --jobs 4 --retry 3

# Package.json und Yarn-Lock kopieren
COPY package.json yarn.lock ./

# Node-Module installieren
RUN yarn install --frozen-lockfile

# Anwendungscode kopieren
COPY . .

# Assets kompilieren
RUN SECRET_KEY_BASE=dummy bundle exec rails assets:precompile

# Bootsnap-Code vorcompilieren
RUN bundle exec bootsnap precompile app/ lib/

# Nicht-Root-Benutzer erstellen
RUN groupadd -r rails && useradd -r -g rails rails

# Berechtigungen setzen
RUN chown -R rails:rails /rails
USER rails

# Port freigeben
EXPOSE 3000

# Health-Check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start-Kommando
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"] 