<!-----
---
title: Datenbank-Partitionierung und Synchronisierung
summary: 'Das System implementiert eine regionsbasierte Datenbank-Partitionierungsstrategie
  zur Optimierung der Datensynchronisierung zwischen lokalen Servern und dem zentralen
  API-Server. Dieser Ansatz stellt sicher, dass jeder lokale Server nur die für seine
  Region relevanten Daten verwaltet und gleichzeitig Zugriff auf notwendige globale
  Ereignisse hat. Zusätzlich werden regionsunabhängige Daten an alle lokalen Server
  synchronisiert.

  '
version:
published_at: !ruby/object:ActiveSupport::TimeWithZone
  utc: 2025-04-29 21:19:03.426133000 Z
  zone: !ruby/object:ActiveSupport::TimeZone
    name: Europe/Berlin
  time: 2025-04-29 23:19:03.426133000 Z
tags: []
metadata: {}
position: 0
id: 10
---

-->
<div class="container mx-auto my-8 px-4">
  <div class="mx-auto">
    <h2>Database Partitioning and Synchronization</h2>
    <ul class="@apply list-none">

      <li><h3>Overview</h3>
        <p>The system implements a region-based database partitioning strategy to optimize data synchronization between local servers and the central API server. This approach ensures that each local server only manages data relevant to its region while maintaining access to necessary global events. Additionally, region-independent data is synchronized to all local servers.</p>
      </li>

      <li><h3>Main Components</h3>
        <h4>1. Region Tagging (RegionTaggable)</h4>
        <ul>
          <li>Records are tagged with a <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_id</code> to track their regional assignment</li>
          <li>A <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">global_context</code> boolean flag marks records that participate in global events</li>
          <li>Records without regional dependencies (region_id is NULL) are synchronized to all servers</li>
          <li>Implemented as a concern in <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">app/models/concerns/region_taggable.rb</code></li>
        </ul>

        <h4>2. Version Management</h4>
        <ul>
          <li>Uses PaperTrail for version tracking</li>
          <li>Versions are tagged with <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_id</code> to track regional relevance</li>
          <li>Versions with NULL region_id are considered global and sent to all servers</li>
        </ul>

        <h4>3. Synchronization Logic</h4>
        <ul>
          <li>Local servers receive only data with <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_id</code> of their region or <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">global_context = true</code></li>
          <li>Global events (DBU tournaments, etc.) are synchronized to all servers</li>
          <li>Region-independent data (configurations, etc.) is sent to all servers</li>
        </ul>
      </li>

      <li><h3>Implementation</h3>
        <h4>RegionTaggable Concern</h4>
        <pre><code class="language-ruby">module RegionTaggable
  extend ActiveSupport::Concern

  included do
    after_save :update_region_tagging
    after_destroy :update_region_tagging
  end

  def find_associated_region_id
    # Calculates region_id based on model type
  end

  def global_context?
    # Determines if the record has global context
  end
end</code></pre>

        <h4>Version Scope</h4>
        <pre><code class="language-ruby">scope :for_region, ->(region_id) {
  where("region_id IS NULL OR region_id = ?", region_id)
}</code></pre>
      </li>

      <li><h3>Usage</h3>
        <h4>Rake Tasks</h4>
        <pre><code class="language-bash"># Update region IDs for all models
rails region_taggings:update_all_region_ids

# Update region tagging for all models
rails region_taggings:update_all

# Set global context for records
rails region_taggings:set_global_context

# Verify region tagging
rails region_taggings:verify</code></pre>

        <h4>Models with RegionTaggable</h4>
        <ul>
          <li>Region, Club, Tournament, League, Party</li>
          <li>Location, LeagueTeam, Game, PartyGame, GameParticipation</li>
          <li>Player, SeasonParticipation, Seeding</li>
        </ul>
      </li>

      <li><h3>Migration from Old System</h3>
        <p>The system has been migrated from a complex polymorphic <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_taggings</code> system to a simple <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_id</code> + <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">global_context</code> system:</p>
        
        <ol>
          <li><strong>Old System</strong>: <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_ids</code> array with polymorphic <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_taggings</code> table</li>
          <li><strong>New System</strong>: Single <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">region_id</code> with <code class="bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded">global_context</code> boolean</li>
        </ol>

        <h4>Benefits of the New System</h4>
        <ul>
          <li>Easier to understand and maintain</li>
          <li>Better performance through direct indexes</li>
          <li>Clearer separation between regional and global data</li>
          <li>Less complexity in synchronization logic</li>
        </ul>
      </li>
    </ul>
  </div>
</div>
