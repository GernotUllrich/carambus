<!--suppress RubyScope, RubyScope, RubyScope -->
<!--suppress RubyScope, RubyScope, RubyScope -->
<!--<script src="https://unpkg.com/hotkeys-js/dist/hotkeys.js"></script>-->
<style>
    .responsive-svg {
        width: 100%;
        height: auto;
    }
</style>
<!--<script src="/hotkeys.js"></script>-->
<script src="/onscreen-keyboard.js"></script>
<script type="text/javascript">

  function new_reservation_mode() {
    set_new_reservation_modal();
  }

  function set_new_reservation_modal() {
    document.getElementById("modal-new-reservation").classList.toggle("hidden");
    document.getElementById("modal-new-reservation" + "-bg").classList.toggle("hidden");
    document.getElementById("modal-new-reservation").classList.toggle("flex");
    document.getElementById("modal-new-reservation" + "-bg").classList.toggle("flex");
  }

  function open_kiosk_keyboard() {
    Keyboard._setupKeyboard("kiosk");
    Keyboard.open("", null, null);
  }

  document.addEventListener('turbo:load', function () {
    console.log('Window.hotkeys in view:', window.hotkeys); // Check availability
    if (!window.hotkeys) {
      console.error('Hotkeys not available!');
      return;
    }
    let tabbed_elements = document.querySelectorAll('a[tabindex="1"]')
    let tabbed_keys = []
    for (let i = 0; i < tabbed_elements.length; i++) {
      tabbed_keys[i] = tabbed_elements[i].getAttribute("id")
    }
    if (tabbed_keys.length > 0) {
      let current_element = tabbed_keys[0]
      document.getElementById(current_element).focus();
    }
    // backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete and f1 through f19
    window.hotkeys('*', function (event) {
    // Prevent the default refresh event under WINDOWS system

      //console.log(hotkeys.getPressedKeyCodes());
      //alert('you pressed ' + hotkeys.getPressedKeyCodes());
      const keyMap = {
        33: "key_a", //pointer left
        37: "key_a", //arrow left
        34: "key_b", //pointer right
        39: "key_b", //arrow right
        66: "key_c", //pointer up
        38: "key_c", //arrow up
        116: "key_d", //pointer down
        27: "key_d", //pointer down
        40: "key_d", //arrow down
        13: "key_d", //return
      }
      let tabbed_elements = document.querySelectorAll('a[tabindex="1"]')

      let tabbed_keys = []
      for (let i = 0; i < tabbed_elements.length; i++) {
        tabbed_keys[i] = tabbed_elements[i].getAttribute("id")
      }

      let current_element = document.activeElement.getAttribute("id")
      console.log("active: " + current_element);
      if (current_element == null) {
        current_element = tabbed_keys[0];
        console.log("active now: " + current_element);
        document.getElementById(current_element).focus();
      }

      if (event.key in keyMap) {
        let key = keyMap[event.key];
        if (key === "key_c") {
          window.history.back();
        }
        if (key === "key_b") {
          current_element = document.activeElement.getAttribute("id")
          for (let i = 0; i < tabbed_keys.length; i++) {
            if (tabbed_keys[i] === current_element) {
              let ff = i + 1;
              if (ff >= tabbed_keys.length) ff = 0;
              console.log("active becomes (a): " + tabbed_keys[ff]);
              document.getElementById(tabbed_keys[ff]).focus();
              break;
            }
          }
        }
        if (key === "key_a") {
          let current_element = document.activeElement.getAttribute("id");
          for (let i = 0; i < tabbed_keys.length; i++) {
            if (tabbed_keys[i] === current_element) {
              let ff = i - 1;
              if (ff < 0) ff = tabbed_keys.length - 1;
              console.log("active becomes (a): " + tabbed_keys[ff]);
              document.getElementById(tabbed_keys[ff]).focus();
              break;
            }
          }
        }
        if (key === "key_d") {
          console.log("activate: " + document.activeElement.getAttribute("id"));
          document.activeElement.click();
        }
      }
      event.preventDefault();
      return true
    });
  });
</script>
<div style="z-index:900" class="hidden opacity-70 fixed inset-0 bg-black" id="modal-new-reservation-bg"></div>
<div style="z-index:910" class="hidden overflow-x-hidden overflow-y-auto fixed inset-0 outline-none focus:outline-none justify-center" id="modal-new-reservation">
  <div id="new_reservation_modal_setup__2" class="border-2 border-gray-500 rounded-lg shadow-lg relative flex flex-col p-10 w-5/6 dark:text-gray-200 bg-white dark:bg-black  outline-none focus:outline-none">
    <div class="flex flex-col">
      <h2 class="flex mb-5">Neue Tischreservierung <%= @location.name %></h2>
      <div class="flex justify-around w-full text-2vw">
        <%= form_with(model: @location, method: :post, url: { action: "create_event" }) do |form| %>
          <%= hidden_field_tag :location_id, @location.id %>
          <%= render "error_messages", resource: form.object %>
          <div class="form-group flex">
            <%= form.text_field :summary, autocomplete: "off", class: "form-control text-2vw", style: "width: 400px", placeholder: "Event Titel, z.B. \"T4 Peter+Mike\"" %>
          </div>
          <div class="form-group flex items-center">
            <input type="date" name="location[date]" id="location_date">
            &nbsp;&nbsp;&nbsp;&nbsp;
            <input type="time" name="location[start_time]" id="location-start-time" class="bg-gray-50 border leading-none border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block ml-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" min="00:00" value="19:00" required/>
            &nbsp;-&nbsp;
            <input type="time" name="location[end_time]" id="location-end-time" class="bg-gray-50 border leading-none border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" min="00:00" value="23:00" required/>
          </div>
          <div class="form-group">
            <%= custom_link_to t('back'), "javascript:set_new_reservation_modal()", data: { turbolinks: false }, class: "dark:text-white focus:outline-none focus:ring-8 focus:ring-green-500 focus:ring-opacity-90 border-0 btn btn-primary text-2vw", id: "cancel", tabindex: "1" %>

            <%= form.submit t('save'), class: "btn btn-primary text-2vw" %>
          </div>
          <p class="text-1-5vw leading-6">
            Die Belegung der Tische, das Turnier, die Teilnehmer,
            sowie eine Angabe zur automatischen Heizungssteuerung,
            wird durch eine Namenskonvention im Titel festgelegt.
          </p>
          <p class="text-1-5vw leading-6">
            Der Titel setzt sich zusammen aus einer mit Kommas getrennten
            Liste von Tischbereichen (z.B. T5 oder T6-T8), gefolgt von einem
            Lehrzeichen und dem Eventtitel oder den Spielernamen, Also z.B.
            "Clubabend" oder "NDM Cadre 35/2" oder "Lothar + Gernot".
            Am Ende kann ein Ausrufungszeichen (!) gesetzt werden um zu
            verhindern, dass Heizungen bei Nichtbenutzung während der
            Reservierung abgeschaltet werden.
            Termineinträge, die sich nicht an diese Namenskonvention
            halten und auch nicht mit einem Label wie "info:" oder "BGH:" beginnen,
            werden automatisch gelöscht.
          </p>
        <% end %>
      </div>
    </div>
  </div>
</div>
<div class="w-1/12 grid grid-cols-2 gap-4 mr-4 fixed text-gray-300 hover:text-black text-2vw font-bold" style="right: 10px; top: -10px;">
  <%= custom_link_to scoreboard_location_path(@location.md5, sb_state: "table_scores", :"data-turbo" => false) do %>
    <%= render_svg "icons/information-outline", styles: "responsive-svg fill-current icon-lg m-4 text-white inline-block", title: "home" %>
  <% end %>
  <%= custom_link_to scoreboard_location_path(@location.md5, sb_state: "welcome", :"data-turbo" => false) do %>
    <%= render_svg "icons/home", styles: "responsive-svg fill-current icon-lg m-4 text-white inline-block", title: "home" %>
  <% end %>
</div>
<div class="p-7 lg:p-14 text-gray-200 w-full m-auto flex items-center flex-col bg-cover h-screen bg-center bg-no-repeat" style="background-image: url('/bg_pool2-.jpg')">
  <h1 style="text-shadow: 2px 2px #000000" class="flex text-gray-200 text-3vw"><%= t('home.index.reservation') %>
    - <%= @location.name %></h1>
  <%- if @location.present? %>
    <%- table_status = JSON.parse(File.read(File.join(Rails.root, 'log', 'events'))) rescue [] %>
    <div class="w-3/5 h-2/5 overflow-y-auto mt-5">
      <pre><%= table_status.join("\n") %></pre>
    </div>
    <p>
      <%= custom_link_to "Neue Reservierung", "javascript:new_reservation_mode()", data: { turbolinks: false }, class: "dark:text-white flex w-full h-full border-4 focus:outline-none focus:ring-8 focus:ring-green-500 focus:ring-opacity-90 border-0 rounded-lg btn btn-primary text-2vw", id: "cancel", tabindex: "1" %>
    </p>
    <p>
      <%= custom_link_to "Exit Kiosk Mode", "javascript:open_kiosk_keyboard()", data: { turbolinks: false }, class: "dark:text-white flex w-full h-full border-4 focus:outline-none focus:ring-8 focus:ring-red-500 focus:ring-opacity-90 border-0 rounded-lg btn btn-danger text-2vw", id: "exit_kiosk", tabindex: "1" %>
    </p>
    <p class="w-3/4 mt-5">
      Reservierungen können direkt hier oder im Google Kalender "BC Wedel" gemacht werden.
      Für den Zugang zum Google Kalender bitte email an gernot.ullrich@gmail.com oder wcauel@gmail.com.
      Es ist dafür eine @gmail.com eMail notwendig. Korrekturen sind derzeit nur im Google Kalender möglich.<br/>
      Die Heizungen werden entsprechend dieser Reservierungen geschaltet (zwei bzw. drei (gr. Tische) Stunden vor Terminbeginn).
    </p>
  <%- end %>
</div>
