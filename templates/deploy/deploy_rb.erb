# config valid only for current version of Capistrano
lock "3.19.2"

set :application, "<%= @scenario['application_name'] %>"
set :basename, "<%= @scenario['basename'] %>"
set :repo_url, "git@github.com:GernotUllrich/#{fetch(:application)}.git"
set :deploy_to, "/var/www/#{fetch(:basename)}"

# Default branch is :master
# ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp
set :branch, "<%= @scenario['branch'] %>"

# Default value for :linked_files is []
append :linked_files, "config/database.yml", "config/carambus.yml", "config/nginx.conf", "config/puma.rb", "config/environments/production.rb", "config/env.production"

# Default value for linked_dirs is []
append :linked_dirs, "log", "tmp/pids", "tmp/cache", "tmp/sockets", "public/system", "storage", "config/credentials", "bundle"

# Default value for keep_releases is 5
set :keep_releases, 5

# Bundler optimizations
set :bundle_path, -> { shared_path.join('bundle') }
set :bundle_without, %w{development test}.join(' ')
set :bundle_jobs, 4
set :bundle_flags, '--quiet'

# Uncomment the following to require manually verifying the host key before first deploy.
# set :ssh_options, verify_host_key: :secure

# Verify Node.js is available
namespace :deploy do
  desc "Verify Node.js and yarn are available"
  task :verify_node do
    on roles(:app) do
      execute :node, "--version"
      execute :yarn, "--version"
    end
  end
end

# Hook into the default asset compilation process
namespace :deploy do
  namespace :assets do
    desc "Install yarn dependencies before asset compilation"
    task :install_dependencies do
      on roles(:app) do
        within release_path do
          # Install JavaScript dependencies
          execute :yarn, :install
        end
      end
    end

    desc "Build JavaScript and CSS assets before Rails precompilation"
    task :build_frontend_assets do
      on roles(:app) do
        within release_path do
          with rails_env: fetch(:rails_env) do
            # Build JavaScript assets
            execute :yarn, :build
            
            # Build CSS assets
            execute :yarn, "build:css"

            # Ensure the builds directory exists for Rails asset pipeline
            execute :mkdir, "-p app/assets/builds"
          end
        end
      end
    end

    desc "Verify manifest was created properly"
    task :verify_manifest do
      on roles(:app) do
        within release_path do
          execute :ls, "-la public/assets/"
          execute :find, "public/assets", "-name '*.json'", "-o", "-name 'manifest*'"
        end
      end
    end
  end
end

# Custom asset precompilation task (since capistrano/rails/assets is disabled)
namespace :deploy do
  namespace :assets do
    desc "Precompile Rails assets"
    task :precompile do
      on roles(:app) do
        within release_path do
          with rails_env: fetch(:rails_env) do
            # Precompile Rails assets
            execute :bundle, :exec, :rails, "assets:precompile"
          end
        end
      end
    end
  end
end

# Hook into the custom asset compilation process
before "deploy:assets:precompile", "deploy:verify_node"
before "deploy:assets:precompile", "deploy:assets:install_dependencies"
before "deploy:assets:precompile", "deploy:assets:build_frontend_assets"

# Ensure manifest is properly handled after precompilation
after "deploy:assets:precompile", "deploy:assets:verify_manifest"

# Hook asset precompilation into the deployment process
before "deploy:symlink:release", "deploy:assets:precompile"

# Ensure current symlink exists after database reset
namespace :deploy do
  desc "Ensure current symlink exists"
  task :ensure_current_symlink do
    on roles(:app) do
      # Check if current symlink exists and is valid
      if test("[ ! -L #{deploy_to}/current ]") || test("[ ! -e #{deploy_to}/current ]")
        # Find the latest release
        latest_release = capture(:ls, "-t", "#{deploy_to}/releases").split.first
        if latest_release
          execute :ln, "-sf", "#{deploy_to}/releases/#{latest_release}", "#{deploy_to}/current"
          puts "   ✅ Recreated current symlink to #{latest_release}"
        else
          puts "   ⚠️  No releases found to symlink"
        end
      else
        puts "   ✅ Current symlink already exists"
      end
    end
  end
end

# Run symlink check before asset precompilation
before "deploy:assets:precompile", "deploy:ensure_current_symlink"

# Puma restart configuration
after 'deploy:publishing', 'puma:restart'

namespace :puma do
  desc "Restart application"
  task :restart do
    on roles(:app) do
      execute "sudo #{current_path}/bin/manage-puma.sh"
    end
  end
end
