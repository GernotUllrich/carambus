{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"","title":"Carambus Dokumentation","text":"<p>Willkommen bei der Carambus-Dokumentation! Dieses Verzeichnis enth\u00e4lt umfassende Dokumentation f\u00fcr das Carambus Billard-Turnierverwaltungssystem.</p>"},{"location":"#dokumentationsindex","title":"\ud83d\udcda Dokumentationsindex","text":""},{"location":"#erste-schritte","title":"Erste Schritte","text":"<ul> <li>README.md: Projekt\u00fcbersicht und Schnellstart-Anleitung</li> <li>DEVELOPER_GUIDE.md: Umfassender Leitfaden f\u00fcr Entwickler</li> <li>API.md: Vollst\u00e4ndige API-Dokumentation mit Beispielen</li> </ul>"},{"location":"#kern-dokumentation","title":"Kern-Dokumentation","text":"<ul> <li>database_design.md: Datenbankschema und Beziehungen</li> <li>tournament.md: Turnierverwaltungs-Workflows</li> <li>einzelturnierverwaltung.md: Einzelturnierverwaltung</li> <li>verwaltung-von-ligaspieltagen.md: Ligaspieltage</li> </ul>"},{"location":"#technische-dokumentation","title":"Technische Dokumentation","text":"<ul> <li>datenbank-partitionierung-und-synchronisierung.md: Datenbank-Partitionierung</li> <li>docker_installation.md: Docker-Installation</li> <li>installation_overview.md: Installations\u00fcbersicht</li> </ul>"},{"location":"#deployment-betrieb","title":"Deployment &amp; Betrieb","text":"<ul> <li>docker_installation.md: Produktions-Deployment-Anleitung</li> <li>installation_overview.md: Installations\u00fcbersicht</li> </ul>"},{"location":"#rechtliches-datenschutz","title":"Rechtliches &amp; Datenschutz","text":"<ul> <li>terms.md: Nutzungsbedingungen</li> </ul>"},{"location":"#projektinformationen","title":"Projektinformationen","text":"<ul> <li>about.md: Projekt-Hintergrund und Entwicklerinformationen</li> </ul>"},{"location":"#schnelle-navigation","title":"\ud83c\udfaf Schnelle Navigation","text":""},{"location":"#fur-neue-entwickler","title":"F\u00fcr neue Entwickler","text":"<ol> <li>Beginnen Sie mit README.md f\u00fcr Projekt\u00fcbersicht</li> <li>Lesen Sie DEVELOPER_GUIDE.md f\u00fcr Setup-Anweisungen</li> <li>\u00dcberpr\u00fcfen Sie database_design.md f\u00fcr Datenmodell-Verst\u00e4ndnis</li> <li>Pr\u00fcfen Sie API.md f\u00fcr Integrationsm\u00f6glichkeiten</li> </ol>"},{"location":"#fur-systemadministratoren","title":"F\u00fcr Systemadministratoren","text":"<ol> <li>\u00dcberpr\u00fcfen Sie docker_installation.md f\u00fcr Deployment</li> <li>Lesen Sie installation_overview.md f\u00fcr Installations\u00fcbersicht</li> <li>Pr\u00fcfen Sie table_reservation_heating_control.md f\u00fcr Tischreservierung und Heizungssteuerung</li> </ol>"},{"location":"#fur-turnierorganisatoren","title":"F\u00fcr Turnierorganisatoren","text":"<ol> <li>Lesen Sie tournament.md f\u00fcr Turnier-Workflows</li> <li>\u00dcberpr\u00fcfen Sie einzelturnierverwaltung.md f\u00fcr detaillierte Anleitung</li> <li>Pr\u00fcfen Sie verwaltung-von-ligaspieltagen.md f\u00fcr Ligaverwaltung</li> </ol>"},{"location":"#fur-api-benutzer","title":"F\u00fcr API-Benutzer","text":"<ol> <li>Beginnen Sie mit API.md f\u00fcr vollst\u00e4ndige API-Dokumentation</li> <li>\u00dcberpr\u00fcfen Sie database_design.md f\u00fcr Datenstruktur</li> </ol>"},{"location":"#dokumentationsstruktur","title":"\ud83d\udcd6 Dokumentationsstruktur","text":"<pre><code>pages/\n\u251c\u2500\u2500 README.md                           # Diese Datei - Dokumentationsindex\n\u251c\u2500\u2500 DEVELOPER_GUIDE.md                  # Haupt-Entwicklerdokumentation\n\u251c\u2500\u2500 API.md                              # API-Dokumentation\n\u251c\u2500\u2500 database_design.md                  # Datenbankschema\n\u251c\u2500\u2500 tournament.md                       # Turnier-Workflows\n\u251c\u2500\u2500 einzelturnierverwaltung.md          # Einzelturnierverwaltung\n\u251c\u2500\u2500 verwaltung-von-ligaspieltagen.md    # Ligaspieltage\n\u251c\u2500\u2500 docker_installation.md              # Docker-Installation\n\u251c\u2500\u2500 installation_overview.md            # Installations\u00fcbersicht\n\u251c\u2500\u2500 table_reservation_heating_control.md # Tischreservierung\n\u251c\u2500\u2500 terms.md                            # Nutzungsbedingungen\n\u2514\u2500\u2500 about.md                            # Projektinformationen\n</code></pre>"},{"location":"#dokumentationswartung","title":"\ud83d\udd04 Dokumentationswartung","text":""},{"location":"#beitrag-zur-dokumentation","title":"Beitrag zur Dokumentation","text":"<ul> <li>Folgen Sie dem Beitragsleitfaden</li> <li>Aktualisieren Sie relevante Dokumentation beim Hinzuf\u00fcgen von Features</li> <li>F\u00fcgen Sie Code-Beispiele f\u00fcr neue APIs ein</li> <li>Behalten Sie Konsistenz \u00fcber alle Dokumente hinweg</li> </ul>"},{"location":"#dokumentationsstandards","title":"Dokumentationsstandards","text":"<ul> <li>Verwenden Sie klare, pr\u00e4gnante Sprache</li> <li>F\u00fcgen Sie praktische Beispiele ein</li> <li>Stellen Sie deutsche und englische Versionen bereit, wo angemessen</li> <li>Halten Sie Dokumentation mit Code-\u00c4nderungen aktuell</li> </ul>"},{"location":"#versionskontrolle","title":"Versionskontrolle","text":"<ul> <li>Dokumentation ist mit der Codebasis versioniert</li> <li>Gro\u00dfe \u00c4nderungen erfordern Dokumentations-Updates</li> <li>API-\u00c4nderungen m\u00fcssen vor dem Release dokumentiert werden</li> </ul>"},{"location":"#hilfe-erhalten","title":"\ud83d\udcde Hilfe erhalten","text":""},{"location":"#dokumentationsprobleme","title":"Dokumentationsprobleme","text":"<ul> <li>Melden Sie Dokumentationsfehler \u00fcber GitHub Issues</li> <li>Schlagen Sie Verbesserungen \u00fcber GitHub Discussions vor</li> </ul>"},{"location":"#technischer-support","title":"Technischer Support","text":"<ul> <li>Pr\u00fcfen Sie den Entwicklerleitfaden f\u00fcr h\u00e4ufige Probleme</li> <li>\u00dcberpr\u00fcfen Sie die API-Dokumentation f\u00fcr Integrationshilfe</li> <li>Konsultieren Sie die Docker-Installation f\u00fcr Deployment-Probleme</li> </ul>"},{"location":"#community-ressourcen","title":"Community-Ressourcen","text":"<ul> <li>GitHub Issues: Bug-Reports und Feature-Requests</li> <li>GitHub Discussions: Fragen und Community-Support</li> <li>Projekt Wiki: Zus\u00e4tzliche community-gewartete Dokumentation</li> </ul>"},{"location":"#sprachunterstutzung","title":"\ud83c\udf10 Sprachunterst\u00fctzung","text":"<p>Die Carambus-Dokumentation ist in mehreren Sprachen verf\u00fcgbar:</p> <ul> <li>Englisch: Prim\u00e4re Dokumentationssprache</li> <li>Deutsch: Wichtige Dokumente f\u00fcr deutsche Benutzer \u00fcbersetzt</li> <li>Zukunft: Zus\u00e4tzliche Sprachunterst\u00fctzung geplant</li> </ul>"},{"location":"#sprachspezifische-dateien","title":"Sprachspezifische Dateien","text":"<ul> <li><code>*.en.md</code>: Englische Dokumentation</li> <li><code>*.de.md</code>: Deutsche Dokumentation</li> <li><code>*.md</code>: Standardsprache (normalerweise Englisch)</li> </ul> <p>Diese Dokumentation wird vom Carambus-Entwicklungsteam gepflegt. F\u00fcr Fragen oder Beitr\u00e4ge siehe den Beitragsleitfaden. </p>"},{"location":"API/","title":"Carambus API-Dokumentation","text":""},{"location":"API/#ubersicht","title":"\u00dcbersicht","text":"<p>Die Carambus API bietet RESTful-Endpunkte f\u00fcr die Verwaltung von Billard-Turnieren, Ligen, Spielern und Echtzeit-Scoreboard-Funktionalit\u00e4t. Die API ist auf Ruby on Rails aufgebaut und folgt REST-Konventionen.</p>"},{"location":"API/#authentifizierung","title":"Authentifizierung","text":""},{"location":"API/#session-basierte-authentifizierung","title":"Session-basierte Authentifizierung","text":"<p>Die meisten Endpunkte erfordern Authentifizierung \u00fcber Devise. F\u00fcgen Sie Session-Cookies in Ihre Anfragen ein:</p> <pre><code># Anmelden, um Session zu erhalten\ncurl -X POST http://localhost:3000/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"user\": {\"email\": \"user@example.com\", \"password\": \"password\"}}' \\\n  -c cookies.txt\n\n# Session f\u00fcr authentifizierte Anfragen verwenden\ncurl -X GET http://localhost:3000/api/tournaments \\\n  -b cookies.txt\n</code></pre>"},{"location":"API/#api-token-authentifizierung-zukunft","title":"API-Token-Authentifizierung (Zukunft)","text":"<p>Token-basierte Authentifizierung ist f\u00fcr zuk\u00fcnftige Versionen geplant.</p>"},{"location":"API/#basis-url","title":"Basis-URL","text":"<pre><code>Entwicklung: http://localhost:3000\nProduktion: https://carambus.de\n</code></pre>"},{"location":"API/#antwortformat","title":"Antwortformat","text":"<p>Alle API-Antworten sind im JSON-Format:</p> <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"tournament\",\n    \"attributes\": {\n      \"name\": \"Regionalmeisterschaft 2024\",\n      \"start_date\": \"2024-01-15\",\n      \"status\": \"active\"\n    },\n    \"relationships\": {\n      \"discipline\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"discipline\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"API/#fehlerantworten","title":"Fehlerantworten","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"validation_error\",\n    \"message\": \"Validierung fehlgeschlagen\",\n    \"details\": {\n      \"name\": [\"darf nicht leer sein\"]\n    }\n  }\n}\n</code></pre>"},{"location":"API/#kern-endpunkte","title":"Kern-Endpunkte","text":""},{"location":"API/#turniere","title":"Turniere","text":""},{"location":"API/#turniere-auflisten","title":"Turniere auflisten","text":"<pre><code>GET /tournaments\n</code></pre> <p>Abfrageparameter: - <code>page</code>: Seitennummer (Standard: 1) - <code>per_page</code>: Elemente pro Seite (Standard: 25) - <code>status</code>: Nach Status filtern (<code>active</code>, <code>completed</code>, <code>draft</code>) - <code>discipline_id</code>: Nach Disziplin filtern - <code>location_id</code>: Nach Standort filtern</p> <p>Antwort: <pre><code>{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"type\": \"tournament\",\n      \"attributes\": {\n        \"name\": \"Regionalmeisterschaft 2024\",\n        \"start_date\": \"2024-01-15\",\n        \"end_date\": \"2024-01-17\",\n        \"status\": \"active\",\n        \"discipline_name\": \"3-Banden\",\n        \"location_name\": \"Billard Club Wedel\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"total_count\": 50,\n    \"total_pages\": 2,\n    \"current_page\": 1\n  }\n}\n</code></pre></p>"},{"location":"API/#turnier-abrufen","title":"Turnier abrufen","text":"<pre><code>GET /tournaments/{id}\n</code></pre> <p>Antwort: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"tournament\",\n    \"attributes\": {\n      \"name\": \"Regionalmeisterschaft 2024\",\n      \"start_date\": \"2024-01-15\",\n      \"end_date\": \"2024-01-17\",\n      \"status\": \"active\",\n      \"discipline_name\": \"3-Banden\",\n      \"location_name\": \"Billard Club Wedel\",\n      \"participant_count\": 16,\n      \"game_count\": 24\n    },\n    \"relationships\": {\n      \"discipline\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"discipline\"\n        }\n      },\n      \"location\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"location\"\n        }\n      },\n      \"seedings\": {\n        \"data\": [\n          {\n            \"id\": 1,\n            \"type\": \"seeding\"\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"API/#turnier-erstellen","title":"Turnier erstellen","text":"<pre><code>POST /tournaments\n</code></pre> <p>Anfrage-Body: <pre><code>{\n  \"tournament\": {\n    \"name\": \"Neues Turnier\",\n    \"discipline_id\": 1,\n    \"location_id\": 1,\n    \"start_date\": \"2024-02-01\",\n    \"end_date\": \"2024-02-03\",\n    \"max_participants\": 16\n  }\n}\n</code></pre></p>"},{"location":"API/#turnier-aktualisieren","title":"Turnier aktualisieren","text":"<pre><code>PATCH /tournaments/{id}\n</code></pre>"},{"location":"API/#turnier-loschen","title":"Turnier l\u00f6schen","text":"<pre><code>DELETE /tournaments/{id}\n</code></pre>"},{"location":"API/#turnier-aktionen","title":"Turnier-Aktionen","text":""},{"location":"API/#turnier-starten","title":"Turnier starten","text":"<pre><code>POST /tournaments/{id}/start\n</code></pre>"},{"location":"API/#turnier-zurucksetzen","title":"Turnier zur\u00fccksetzen","text":"<pre><code>POST /tournaments/{id}/reset\n</code></pre>"},{"location":"API/#spielplan-generieren","title":"Spielplan generieren","text":"<pre><code>POST /tournaments/{id}/generate_game_plan\n</code></pre>"},{"location":"API/#spieler","title":"Spieler","text":""},{"location":"API/#spieler-auflisten","title":"Spieler auflisten","text":"<pre><code>GET /players\n</code></pre> <p>Abfrageparameter: - <code>page</code>: Seitennummer - <code>per_page</code>: Elemente pro Seite - <code>region_id</code>: Nach Region filtern - <code>club_id</code>: Nach Club filtern - <code>search</code>: Nach Namen suchen</p>"},{"location":"API/#spieler-abrufen","title":"Spieler abrufen","text":"<pre><code>GET /players/{id}\n</code></pre> <p>Antwort: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"player\",\n    \"attributes\": {\n      \"first_name\": \"Max\",\n      \"last_name\": \"Mustermann\",\n      \"ba_id\": \"12345\",\n      \"club_name\": \"Billard Club Wedel\",\n      \"region_name\": \"Schleswig-Holstein\",\n      \"ranking\": 1250\n    }\n  }\n}\n</code></pre></p>"},{"location":"API/#ligen","title":"Ligen","text":""},{"location":"API/#ligen-auflisten","title":"Ligen auflisten","text":"<pre><code>GET /leagues\n</code></pre>"},{"location":"API/#liga-abrufen","title":"Liga abrufen","text":"<pre><code>GET /leagues/{id}\n</code></pre>"},{"location":"API/#liga-teams","title":"Liga-Teams","text":"<pre><code>GET /leagues/{id}/league_teams\n</code></pre>"},{"location":"API/#parties-spiele","title":"Parties (Spiele)","text":""},{"location":"API/#parties-auflisten","title":"Parties auflisten","text":"<pre><code>GET /parties\n</code></pre> <p>Abfrageparameter: - <code>tournament_id</code>: Nach Turnier filtern - <code>league_id</code>: Nach Liga filtern - <code>status</code>: Nach Status filtern - <code>date</code>: Nach Datum filtern</p>"},{"location":"API/#party-abrufen","title":"Party abrufen","text":"<pre><code>GET /parties/{id}\n</code></pre> <p>Antwort: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"party\",\n    \"attributes\": {\n      \"date\": \"2024-01-15T14:00:00Z\",\n      \"status\": \"in_progress\",\n      \"team_a_name\": \"Team Alpha\",\n      \"team_b_name\": \"Team Beta\",\n      \"score_a\": 3,\n      \"score_b\": 2\n    },\n    \"relationships\": {\n      \"league_team_a\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"league_team\"\n        }\n      },\n      \"league_team_b\": {\n        \"data\": {\n          \"id\": 2,\n          \"type\": \"league_team\"\n        }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"API/#tisch-monitore","title":"Tisch-Monitore","text":""},{"location":"API/#tisch-monitor-abrufen","title":"Tisch-Monitor abrufen","text":"<pre><code>GET /table_monitors/{id}\n</code></pre> <p>Antwort: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"table_monitor\",\n    \"attributes\": {\n      \"table_number\": 1,\n      \"status\": \"active\",\n      \"current_game\": {\n        \"id\": 123,\n        \"player_a\": \"Max Mustermann\",\n        \"player_b\": \"Erika Musterfrau\",\n        \"score_a\": 15,\n        \"score_b\": 12,\n        \"balls_goal\": 30\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"API/#tisch-monitor-aktualisieren","title":"Tisch-Monitor aktualisieren","text":"<pre><code>PATCH /table_monitors/{id}\n</code></pre> <p>Anfrage-Body: <pre><code>{\n  \"table_monitor\": {\n    \"balls_a\": 16,\n    \"balls_b\": 12\n  }\n}\n</code></pre></p>"},{"location":"API/#tisch-monitor-aktionen","title":"Tisch-Monitor-Aktionen","text":""},{"location":"API/#punkte-hinzufugen","title":"Punkte hinzuf\u00fcgen","text":"<pre><code>POST /table_monitors/{id}/add_one\nPOST /table_monitors/{id}/add_ten\n</code></pre>"},{"location":"API/#punkte-abziehen","title":"Punkte abziehen","text":"<pre><code>POST /table_monitors/{id}/minus_one\nPOST /table_monitors/{id}/minus_ten\n</code></pre>"},{"location":"API/#nachster-schritt","title":"N\u00e4chster Schritt","text":"<pre><code>POST /table_monitors/{id}/next_step\n</code></pre>"},{"location":"API/#spiel-starten","title":"Spiel starten","text":"<pre><code>POST /table_monitors/{id}/start_game\n</code></pre>"},{"location":"API/#ergebnis-auswerten","title":"Ergebnis auswerten","text":"<pre><code>POST /table_monitors/{id}/evaluate_result\n</code></pre>"},{"location":"API/#echtzeit-api","title":"Echtzeit-API","text":""},{"location":"API/#action-cable-channels","title":"Action Cable Channels","text":""},{"location":"API/#tisch-monitor-channel","title":"Tisch-Monitor Channel","text":"<p>Abonnieren Sie Echtzeit-Tisch-Monitor-Updates:</p> <pre><code>import { createConsumer } from \"@rails/actioncable\"\n\nconst consumer = createConsumer()\nconst subscription = consumer.subscriptions.create(\n  { channel: \"TableMonitorChannel\", table_id: 1 },\n  {\n    connected() {\n      console.log(\"Mit Tisch-Monitor verbunden\")\n    },\n\n    disconnected() {\n      console.log(\"Von Tisch-Monitor getrennt\")\n    },\n\n    received(data) {\n      console.log(\"Update erhalten:\", data)\n      // UI mit neuen Daten aktualisieren\n      updateTableDisplay(data)\n    }\n  }\n)\n</code></pre> <p>Channel-Ereignisse: - <code>score_update</code>: Punkte\u00e4nderungen - <code>game_start</code>: Neues Spiel gestartet - <code>game_end</code>: Spiel beendet - <code>status_change</code>: Tisch-Status ge\u00e4ndert</p>"},{"location":"API/#scoreboard-channel","title":"Scoreboard Channel","text":"<p>Abonnieren Sie Scoreboard-Updates:</p> <pre><code>const scoreboardSubscription = consumer.subscriptions.create(\n  { channel: \"ScoreboardChannel\", location_id: 1 },\n  {\n    received(data) {\n      updateScoreboard(data)\n    }\n  }\n)\n</code></pre>"},{"location":"API/#websocket-nachrichtenformat","title":"WebSocket-Nachrichtenformat","text":"<pre><code>{\n  \"type\": \"score_update\",\n  \"table_id\": 1,\n  \"data\": {\n    \"player_a\": \"Max Mustermann\",\n    \"player_b\": \"Erika Musterfrau\",\n    \"score_a\": 16,\n    \"score_b\": 12,\n    \"balls_goal\": 30,\n    \"status\": \"in_progress\"\n  },\n  \"timestamp\": \"2024-01-15T14:30:00Z\"\n}\n</code></pre>"},{"location":"API/#datensynchronisations-api","title":"Datensynchronisations-API","text":""},{"location":"API/#externe-datenquellen","title":"Externe Datenquellen","text":""},{"location":"API/#ba-billard-verband-sync","title":"BA (Billard-Verband) Sync","text":"<pre><code>POST /api/sync/ba/players\nPOST /api/sync/ba/tournaments\n</code></pre>"},{"location":"API/#cc-competition-center-sync","title":"CC (Competition Center) Sync","text":"<pre><code>POST /api/sync/cc/competitions\nPOST /api/sync/cc/results\n</code></pre>"},{"location":"API/#regionsverwaltung","title":"Regionsverwaltung","text":""},{"location":"API/#regionsdaten-prufen","title":"Regionsdaten pr\u00fcfen","text":"<pre><code>GET /region_ccs/{id}/check\n</code></pre>"},{"location":"API/#regionsdaten-reparieren","title":"Regionsdaten reparieren","text":"<pre><code>POST /region_ccs/{id}/fix\n</code></pre>"},{"location":"API/#admin-api","title":"Admin-API","text":""},{"location":"API/#benutzerverwaltung","title":"Benutzerverwaltung","text":"<pre><code>GET /admin/users\nPOST /admin/users\nPATCH /admin/users/{id}\nDELETE /admin/users/{id}\n</code></pre>"},{"location":"API/#systemeinstellungen","title":"Systemeinstellungen","text":"<pre><code>GET /settings/club_settings\nPOST /settings/update_club_settings\nGET /settings/tournament_settings\nPOST /settings/update_tournament_settings\n</code></pre>"},{"location":"API/#rate-limiting","title":"Rate Limiting","text":"<p>API-Anfragen sind rate-limitiert, um Missbrauch zu verhindern:</p> <ul> <li>Authentifizierte Benutzer: 1000 Anfragen pro Stunde</li> <li>Nicht-authentifizierte Benutzer: 100 Anfragen pro Stunde</li> </ul> <p>Rate-Limit-Header sind in Antworten enthalten:</p> <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1642248000\n</code></pre>"},{"location":"API/#paginierung","title":"Paginierung","text":"<p>Listen-Endpunkte unterst\u00fctzen Paginierung mit folgenden Parametern:</p> <ul> <li><code>page</code>: Seitennummer (Standard: 1)</li> <li><code>per_page</code>: Elemente pro Seite (Standard: 25, max: 100)</li> </ul> <p>Paginierungs-Metadaten sind in Antworten enthalten:</p> <pre><code>{\n  \"data\": [...],\n  \"meta\": {\n    \"total_count\": 150,\n    \"total_pages\": 6,\n    \"current_page\": 1,\n    \"per_page\": 25\n  }\n}\n</code></pre>"},{"location":"API/#filterung-und-sortierung","title":"Filterung und Sortierung","text":""},{"location":"API/#filterung","title":"Filterung","text":"<p>Die meisten Listen-Endpunkte unterst\u00fctzen Filterung:</p> <pre><code>GET /tournaments?status=active&amp;discipline_id=1&amp;location_id=2\n</code></pre>"},{"location":"API/#sortierung","title":"Sortierung","text":"<p>Sortierung wird auf den meisten Endpunkten unterst\u00fctzt:</p> <pre><code>GET /tournaments?sort=start_date&amp;direction=desc\nGET /players?sort=last_name&amp;direction=asc\n</code></pre>"},{"location":"API/#fehlercodes","title":"Fehlercodes","text":"Code Beschreibung 400 Bad Request - Ung\u00fcltige Parameter 401 Unauthorized - Authentifizierung erforderlich 403 Forbidden - Unzureichende Berechtigungen 404 Not Found - Ressource nicht gefunden 422 Unprocessable Entity - Validierungsfehler 429 Too Many Requests - Rate Limit \u00fcberschritten 500 Internal Server Error"},{"location":"API/#sdks-und-bibliotheken","title":"SDKs und Bibliotheken","text":""},{"location":"API/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>npm install carambus-api-client\n</code></pre> <pre><code>import { CarambusAPI } from 'carambus-api-client'\n\nconst api = new CarambusAPI({\n  baseURL: 'https://carambus.de',\n  credentials: 'include'\n})\n\n// Turniere abrufen\nconst tournaments = await api.tournaments.list()\n\n// Turnier erstellen\nconst tournament = await api.tournaments.create({\n  name: 'Neues Turnier',\n  discipline_id: 1,\n  location_id: 1\n})\n</code></pre>"},{"location":"API/#ruby","title":"Ruby","text":"<pre><code>require 'carambus_api'\n\nclient = CarambusAPI::Client.new(\n  base_url: 'https://carambus.de',\n  session_cookies: session_cookies\n)\n\n# Turniere abrufen\ntournaments = client.tournaments.list\n\n# Turnier erstellen\ntournament = client.tournaments.create(\n  name: 'Neues Turnier',\n  discipline_id: 1,\n  location_id: 1\n)\n</code></pre>"},{"location":"API/#beispiele","title":"Beispiele","text":""},{"location":"API/#vollstandiger-turnier-workflow","title":"Vollst\u00e4ndiger Turnier-Workflow","text":"<pre><code>// 1. Turnier erstellen\nconst tournament = await api.tournaments.create({\n  name: 'Meisterschaft 2024',\n  discipline_id: 1,\n  location_id: 1,\n  start_date: '2024-02-01',\n  max_participants: 16\n})\n\n// 2. Teilnehmer hinzuf\u00fcgen\nfor (const player of players) {\n  await api.tournaments.addParticipant(tournament.id, player.id)\n}\n\n// 3. Spielplan generieren\nawait api.tournaments.generateGamePlan(tournament.id)\n\n// 4. Turnier starten\nawait api.tournaments.start(tournament.id)\n\n// 5. Echtzeit-Updates abonnieren\nconst subscription = consumer.subscriptions.create(\n  { channel: \"TournamentChannel\", tournament_id: tournament.id },\n  {\n    received(data) {\n      updateTournamentDisplay(data)\n    }\n  }\n)\n</code></pre>"},{"location":"API/#echtzeit-scoreboard-integration","title":"Echtzeit-Scoreboard-Integration","text":"<pre><code>// Mit Scoreboard verbinden\nconst scoreboard = consumer.subscriptions.create(\n  { channel: \"ScoreboardChannel\", location_id: 1 },\n  {\n    received(data) {\n      // Scoreboard-Anzeige aktualisieren\n      document.getElementById('scoreboard').innerHTML = \n        generateScoreboardHTML(data)\n    }\n  }\n)\n\n// Tisch-Punkte aktualisieren\nasync function updateScore(tableId, player, points) {\n  await api.tableMonitors.update(tableId, {\n    [`balls_${player}`]: points\n  })\n}\n</code></pre>"},{"location":"API/#support","title":"Support","text":"<p>F\u00fcr API-Support und Fragen:</p> <ul> <li>Dokumentation: API.md</li> <li>Issues: GitHub Issues</li> <li>Diskussionen: GitHub Discussions</li> </ul> <p>Diese API-Dokumentation wird vom Carambus-Entwicklungsteam gepflegt. F\u00fcr Fragen oder Beitr\u00e4ge siehe den Beitragsleitfaden. </p>"},{"location":"DEVELOPER_GUIDE/","title":"Carambus Entwicklerleitfaden","text":""},{"location":"DEVELOPER_GUIDE/#inhaltsverzeichnis","title":"Inhaltsverzeichnis","text":"<ol> <li>\u00dcbersicht</li> <li>Architektur</li> <li>Erste Schritte</li> <li>Datenbankdesign</li> <li>Kern-Models</li> <li>Hauptfunktionen</li> <li>Entwicklungsworkflow</li> <li>Deployment</li> <li>Mitwirken</li> </ol>"},{"location":"DEVELOPER_GUIDE/#uebersicht","title":"\u00dcbersicht","text":"<p>Carambus ist ein umfassendes Billard-Turnierverwaltungssystem, das mit Ruby on Rails entwickelt wurde. Es bietet eine vollst\u00e4ndige Automatisierung der Billard-Betriebsabl\u00e4ufe von der Turnierplanung bis zur Datenerfassung und Ergebnis\u00fcbertragung.</p>"},{"location":"DEVELOPER_GUIDE/#hauptfunktionen","title":"Hauptfunktionen","text":"<ul> <li>Turnierverwaltung: Vollst\u00e4ndige Turnierlebenszyklus-Verwaltung</li> <li>Echtzeit-Scoreboards: Live-Scoreboard-Anzeigen mit WebSocket-Unterst\u00fctzung</li> <li>Ligaverwaltung: Team-basierte Ligaorganisation</li> <li>Datensynchronisation: Integration mit externen Billard-Datenbanken (BA/CC)</li> <li>Mehrsprachige Unterst\u00fctzung: Deutsche und englische Benutzeroberfl\u00e4chen</li> <li>Responsive Design: Funktioniert auf Desktop- und Mobilger\u00e4ten</li> </ul>"},{"location":"DEVELOPER_GUIDE/#technologie-stack","title":"Technologie-Stack","text":"<ul> <li>Backend: Ruby on Rails 7.2</li> <li>Datenbank: PostgreSQL</li> <li>Frontend: Hotwire (Turbo + Stimulus) + Stimulus Reflex</li> <li>Echtzeit: Action Cable mit Redis</li> <li>Authentifizierung: Devise</li> <li>Autorisierung: Pundit + CanCanCan</li> <li>Admin-Interface: Administrate</li> <li>Deployment: Capistrano + Puma</li> </ul>"},{"location":"DEVELOPER_GUIDE/#architektur","title":"Architektur","text":""},{"location":"DEVELOPER_GUIDE/#rails-struktur","title":"Rails-Struktur","text":"<p>Carambus folgt den Standard-Rails-Konventionen mit einigen Anpassungen:</p> <pre><code>app/\n\u251c\u2500\u2500 controllers/          # RESTful Controller\n\u251c\u2500\u2500 models/              # ActiveRecord Models mit Concerns\n\u251c\u2500\u2500 views/               # ERB Templates\n\u251c\u2500\u2500 javascript/          # Stimulus Controller und Utilities\n\u251c\u2500\u2500 channels/            # Action Cable Channels\n\u251c\u2500\u2500 jobs/                # Hintergrund-Jobs\n\u251c\u2500\u2500 services/            # Gesch\u00e4ftslogik-Services\n\u2514\u2500\u2500 helpers/             # View Helper\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#wichtige-architekturmuster","title":"Wichtige Architekturmuster","text":""},{"location":"DEVELOPER_GUIDE/#concerns","title":"Concerns","text":"<p>Die Anwendung verwendet Rails Concerns, um Funktionalit\u00e4t zu teilen:</p> <ul> <li><code>LocalProtector</code>: Sch\u00fctzt lokale Daten vor externen \u00c4nderungen</li> <li><code>SourceHandler</code>: Verwaltet externe Datensynchronisation</li> <li><code>RegionTaggable</code>: Behandelt regionsbasierte Datenorganisation</li> </ul>"},{"location":"DEVELOPER_GUIDE/#echtzeit-funktionen","title":"Echtzeit-Funktionen","text":"<ul> <li>Action Cable: WebSocket-Verbindungen f\u00fcr Live-Updates</li> <li>Stimulus Reflex: Server-seitige Reflexe f\u00fcr reaktive UI</li> <li>Cable Ready: Client-seitige DOM-Manipulation</li> </ul>"},{"location":"DEVELOPER_GUIDE/#erste-schritte","title":"Erste Schritte","text":""},{"location":"DEVELOPER_GUIDE/#voraussetzungen","title":"Voraussetzungen","text":"<ul> <li>Ruby 3.2+ (siehe <code>.ruby-version</code>)</li> <li>PostgreSQL 11+</li> <li>Redis 5+</li> <li>Node.js 14+ (f\u00fcr Asset-Kompilierung)</li> </ul>"},{"location":"DEVELOPER_GUIDE/#installation","title":"Installation","text":"<ol> <li> <p>Repository klonen <pre><code>git clone &lt;repository-url&gt;\ncd carambus\n</code></pre></p> </li> <li> <p>Abh\u00e4ngigkeiten installieren <pre><code>bundle install\nyarn install\n</code></pre></p> </li> <li> <p>Datenbank einrichten <pre><code>cp config/database.yml.example config/database.yml\n# database.yml mit Ihren PostgreSQL-Zugangsdaten bearbeiten\n\nrails db:create\nrails db:migrate\nrails db:seed\n</code></pre></p> </li> <li> <p>Umgebungskonfiguration <pre><code>cp config/application.yml.example config/application.yml\n# application.yml mit Ihrer Konfiguration bearbeiten\n</code></pre></p> </li> <li> <p>Anwendung starten <pre><code>rails server\n</code></pre></p> </li> </ol>"},{"location":"DEVELOPER_GUIDE/#entwicklungstools","title":"Entwicklungstools","text":""},{"location":"DEVELOPER_GUIDE/#code-qualitat","title":"Code-Qualit\u00e4t","text":"<ul> <li>RuboCop: Code-Stil-Erzwingung</li> <li>Standard: Ruby-Code-Formatierung</li> <li>Brakeman: Sicherheitsl\u00fccken-Scanning</li> <li>Overcommit: Git-Hooks f\u00fcr Code-Qualit\u00e4t</li> </ul>"},{"location":"DEVELOPER_GUIDE/#testing","title":"Testing","text":"<ul> <li>RSpec: Unit- und Integrationstests</li> <li>Capybara: Systemtests</li> <li>Factory Bot: Test-Daten-Factories</li> </ul>"},{"location":"DEVELOPER_GUIDE/#datenbankdesign","title":"Datenbankdesign","text":""},{"location":"DEVELOPER_GUIDE/#kern-models","title":"Kern-Models","text":""},{"location":"DEVELOPER_GUIDE/#seeding-model-doppelzweck","title":"Seeding Model (Doppelzweck)","text":"<p>Das <code>Seeding</code> Model dient zwei verschiedenen Zwecken:</p> <ol> <li>Team-Kader-Verwaltung</li> <li>Verbunden mit <code>LeagueTeam</code> \u00fcber <code>league_team_id</code></li> <li>Verwaltet den vollst\u00e4ndigen Spielerkader f\u00fcr ein Ligateam</li> <li> <p>Wird w\u00e4hrend der initialen Liga/Team-Einrichtung erstellt</p> </li> <li> <p>Spiel-Teilnahme-Verfolgung</p> </li> <li>Verbunden mit <code>Party</code> \u00fcber polymorphic <code>tournament_id</code></li> <li>Verfolgt, welche Spieler an bestimmten Spielen teilnehmen</li> <li>Wird beim Einrichten einzelner Spiele erstellt</li> </ol> <pre><code>class Seeding &lt; ApplicationRecord\n  belongs_to :player, optional: true\n  belongs_to :tournament, polymorphic: true, optional: true\n  belongs_to :league_team, optional: true\n  include LocalProtector\n  include SourceHandler\n  include RegionTaggable\nend\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#party-und-leagueteam-beziehung","title":"Party und LeagueTeam Beziehung","text":"<pre><code>class Party &lt; ApplicationRecord\n  belongs_to :league_team_a, class_name: \"LeagueTeam\"\n  belongs_to :league_team_b, class_name: \"LeagueTeam\"\n  belongs_to :host_league_team, class_name: \"LeagueTeam\"\n  has_many :seedings, as: :tournament\n  include LocalProtector\n  include SourceHandler\nend\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#datenspeicherungsmuster","title":"Datenspeicherungsmuster","text":""},{"location":"DEVELOPER_GUIDE/#flexible-datenspeicherung","title":"Flexible Datenspeicherung","text":"<p>Mehrere Models verwenden serialisierte Spalten f\u00fcr flexible Datenspeicherung:</p> <pre><code># JSON Serialisierung\nserialize :data, coder: JSON, type: Hash\n# Verwendet in: Party, Seeding, LeagueTeam\n\n# YAML Serialisierung  \nserialize :remarks, coder: YAML, type: Hash\n# Verwendet in: Party\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#regions-tagging-system","title":"Regions-Tagging-System","text":"<p>Das <code>RegionTaggable</code> Concern bietet intelligente Regions-Behandlung:</p> <pre><code># Automatisches Regions-Tagging basierend auf Kontext\nwhen Seeding\n  if tournament_id.present?\n    # Turnier-basiertes Regions-Tagging\n    tournament ? [\n      tournament.region_id,\n      (tournament.organizer_type == \"Region\" ? tournament.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  elsif league_team_id.present?\n    # Liga-Team-basiertes Regions-Tagging\n    league_team&amp;.league ? [\n      (league_team.league.organizer_type == \"Region\" ? league_team.league.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  end\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#kern-models_1","title":"Kern-Models","text":""},{"location":"DEVELOPER_GUIDE/#turnierverwaltung","title":"Turnierverwaltung","text":"<ul> <li>Tournament: Haupt-Turnier-Entit\u00e4t</li> <li>Discipline: Spieltypen (z.B. 3-Banden, 1-Bande)</li> <li>Player: Einzelne Spieler</li> <li>Seeding: Turnier-Teilnahme und Ranglisten</li> </ul>"},{"location":"DEVELOPER_GUIDE/#ligaverwaltung","title":"Ligaverwaltung","text":"<ul> <li>League: Liga-Organisation</li> <li>LeagueTeam: Teams innerhalb von Ligen</li> <li>Party: Einzelne Spiele zwischen Teams</li> <li>Season: Liga-Saisons</li> </ul>"},{"location":"DEVELOPER_GUIDE/#standortverwaltung","title":"Standortverwaltung","text":"<ul> <li>Location: Billard-Clubs/Standorte</li> <li>Table: Einzelne Billard-Tische</li> <li>TableMonitor: Echtzeit-Tisch\u00fcberwachung</li> <li>TableLocal: Lokale Tisch-Konfigurationen</li> </ul>"},{"location":"DEVELOPER_GUIDE/#benutzerverwaltung","title":"Benutzerverwaltung","text":"<ul> <li>User: Systembenutzer mit Devise-Authentifizierung</li> <li>Role: Benutzerrollen und Berechtigungen</li> <li>Admin: Administratives Interface \u00fcber Administrate</li> </ul>"},{"location":"DEVELOPER_GUIDE/#hauptfunktionen_1","title":"Hauptfunktionen","text":""},{"location":"DEVELOPER_GUIDE/#echtzeit-scoreboards","title":"Echtzeit-Scoreboards","text":"<p>Das Scoreboard-System bietet Live-Updates f\u00fcr Turnier-Anzeigen:</p>"},{"location":"DEVELOPER_GUIDE/#komponenten","title":"Komponenten","text":"<ul> <li>Tisch-Monitor: Echtzeit-Spielverfolgung</li> <li>Scoreboard-Anzeige: \u00d6ffentliche Scoreboard-Ansichten</li> <li>WebSocket-Integration: Live-Updates \u00fcber Action Cable</li> </ul>"},{"location":"DEVELOPER_GUIDE/#einrichtung","title":"Einrichtung","text":"<p>Siehe Docker-Installation f\u00fcr detaillierte Konfiguration.</p>"},{"location":"DEVELOPER_GUIDE/#datensynchronisation","title":"Datensynchronisation","text":"<p>Integration mit externen Billard-Datenbanken:</p>"},{"location":"DEVELOPER_GUIDE/#externe-quellen","title":"Externe Quellen","text":"<ul> <li>BA (Billard-Verband): Offizielle Spieler- und Turnierdaten</li> <li>CC (Competition Center): Wettkampf-Management-System</li> </ul>"},{"location":"DEVELOPER_GUIDE/#synchronisationsprozess","title":"Synchronisationsprozess","text":"<ol> <li>Externe Daten werden \u00fcber API abgerufen</li> <li>Lokale Daten sind vor externen \u00c4nderungen gesch\u00fctzt</li> <li>Regions-Tagging wird automatisch angewendet</li> <li>Konflikte werden basierend auf Quellen-Priorit\u00e4t gel\u00f6st</li> </ol>"},{"location":"DEVELOPER_GUIDE/#turnier-workflows","title":"Turnier-Workflows","text":""},{"location":"DEVELOPER_GUIDE/#turnier-erstellung","title":"Turnier-Erstellung","text":"<ol> <li>Turnier mit Disziplin und Einstellungen erstellen</li> <li>Teilnehmer definieren (Spieler/Teams)</li> <li>Spielpl\u00e4ne generieren</li> <li>Turnier mit Echtzeit-\u00dcberwachung starten</li> </ol>"},{"location":"DEVELOPER_GUIDE/#spiel-management","title":"Spiel-Management","text":"<ol> <li>Spiele planen (Parties)</li> <li>Live-Spielfortschritt verfolgen</li> <li>Ergebnisse und Ranglisten aufzeichnen</li> <li>Berichte und Statistiken generieren</li> </ol>"},{"location":"DEVELOPER_GUIDE/#entwicklungsworkflow","title":"Entwicklungsworkflow","text":""},{"location":"DEVELOPER_GUIDE/#code-stil","title":"Code-Stil","text":"<p>Das Projekt verwendet Standard Ruby f\u00fcr Code-Formatierung:</p> <pre><code># Code formatieren\nbundle exec standardrb --fix\n\n# Auf Probleme pr\u00fcfen\nbundle exec standardrb\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#git-workflow","title":"Git-Workflow","text":"<ol> <li>Feature-Branch von main erstellen</li> <li>\u00c4nderungen mit Tests vornehmen</li> <li>Code-Qualit\u00e4tspr\u00fcfungen ausf\u00fchren</li> <li>Pull Request einreichen</li> </ol>"},{"location":"DEVELOPER_GUIDE/#testing_1","title":"Testing","text":"<pre><code># Alle Tests ausf\u00fchren\nrails test\n\n# Bestimmte Test-Datei ausf\u00fchren\nrails test test/models/tournament_test.rb\n\n# Systemtests ausf\u00fchren\nrails test:system\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#datenbank-migrationen","title":"Datenbank-Migrationen","text":"<pre><code># Migration generieren\nrails generate migration AddFieldToModel\n\n# Migrationen ausf\u00fchren\nrails db:migrate\n\n# Zur\u00fcckrollen\nrails db:rollback\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#deployment","title":"Deployment","text":""},{"location":"DEVELOPER_GUIDE/#produktions-setup","title":"Produktions-Setup","text":"<p>Die Anwendung ist f\u00fcr den Einsatz auf Raspberry Pi oder \u00e4hnlicher Hardware konzipiert:</p>"},{"location":"DEVELOPER_GUIDE/#systemanforderungen","title":"Systemanforderungen","text":"<ul> <li>Hardware: Raspberry Pi 4 (4GB RAM empfohlen)</li> <li>OS: Raspberry Pi OS (32-bit)</li> <li>Datenbank: PostgreSQL 11+</li> <li>Web-Server: Nginx + Puma</li> </ul>"},{"location":"DEVELOPER_GUIDE/#deployment-prozess","title":"Deployment-Prozess","text":"<ol> <li>Server-Setup: Siehe Runbook f\u00fcr detaillierte Server-Konfiguration</li> <li>Anwendungs-Deployment: Capistrano-basiertes Deployment</li> <li>Service-Management: Systemd-Services f\u00fcr Autostart</li> <li>Scoreboard-Setup: Automatisierter Scoreboard-Start</li> </ol>"},{"location":"DEVELOPER_GUIDE/#konfigurationsdateien","title":"Konfigurationsdateien","text":""},{"location":"DEVELOPER_GUIDE/#datenbank-konfiguration","title":"Datenbank-Konfiguration","text":"<pre><code># config/database.yml\nproduction:\n  adapter: postgresql\n  database: carambus_production\n  host: localhost\n  username: www_data\n  password: &lt;%= ENV['DATABASE_PASSWORD'] %&gt;\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#anwendungs-konfiguration","title":"Anwendungs-Konfiguration","text":"<pre><code># config/application.yml\ndefaults: &amp;defaults\n  database_url: postgresql://www_data:password@localhost/carambus_production\n  redis_url: redis://localhost:6379/0\n  secret_key_base: &lt;%= ENV['SECRET_KEY_BASE'] %&gt;\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#service-management","title":"Service-Management","text":"<pre><code># Anwendung starten\nsudo systemctl start carambus\n\n# Autostart aktivieren\nsudo systemctl enable carambus\n\n# Status pr\u00fcfen\nsudo systemctl status carambus\n</code></pre>"},{"location":"DEVELOPER_GUIDE/#mitwirken","title":"Mitwirken","text":""},{"location":"DEVELOPER_GUIDE/#entwicklungsumgebung","title":"Entwicklungsumgebung","text":"<ol> <li>Folgen Sie dem Erste Schritte Leitfaden</li> <li>Pre-commit-Hooks einrichten: <code>bundle exec overcommit --install</code></li> <li>Machen Sie sich mit dem Datenbankdesign vertraut</li> </ol>"},{"location":"DEVELOPER_GUIDE/#code-beitrage","title":"Code-Beitr\u00e4ge","text":"<ol> <li>Repository forken</li> <li>Feature-Branch erstellen</li> <li>\u00c4nderungen vornehmen</li> <li>Tests f\u00fcr neue Funktionalit\u00e4t hinzuf\u00fcgen</li> <li>Sicherstellen, dass alle Tests bestehen</li> <li>Pull Request einreichen</li> </ol>"},{"location":"DEVELOPER_GUIDE/#dokumentation","title":"Dokumentation","text":"<ul> <li>Relevante Dokumentation bei Hinzuf\u00fcgen von Features aktualisieren</li> <li>Code-Beispiele f\u00fcr neue APIs einschlie\u00dfen</li> <li>Konfigurations\u00e4nderungen dokumentieren</li> </ul>"},{"location":"DEVELOPER_GUIDE/#test-richtlinien","title":"Test-Richtlinien","text":"<ul> <li>Tests f\u00fcr alle neue Funktionalit\u00e4t schreiben</li> <li>Test-Abdeckung \u00fcber 80% halten</li> <li>Integrationstests f\u00fcr komplexe Workflows einschlie\u00dfen</li> <li>Sowohl deutsche als auch englische Locales testen</li> </ul>"},{"location":"DEVELOPER_GUIDE/#code-review-prozess","title":"Code-Review-Prozess","text":"<ol> <li>Alle \u00c4nderungen erfordern Code-Review</li> <li>Automatisierte Pr\u00fcfungen m\u00fcssen bestehen</li> <li>Manuelles Testing auf Staging-Umgebung</li> <li>Dokumentations-Updates nach Bedarf</li> </ol>"},{"location":"DEVELOPER_GUIDE/#zusatzliche-ressourcen","title":"Zus\u00e4tzliche Ressourcen","text":""},{"location":"DEVELOPER_GUIDE/#dokumentation_1","title":"Dokumentation","text":"<ul> <li>Datenbankdesign: Detailliertes Datenbankschema</li> <li>Docker-Installation: Docker-Installation</li> <li>Turnierverwaltung: Turnier-Workflows</li> <li>Installations\u00fcbersicht: Installations\u00fcbersicht</li> </ul>"},{"location":"DEVELOPER_GUIDE/#externe-links","title":"Externe Links","text":"<ul> <li>Ruby on Rails Guides</li> <li>Hotwire Dokumentation</li> <li>Stimulus Reflex</li> <li>Action Cable</li> </ul>"},{"location":"DEVELOPER_GUIDE/#support","title":"Support","text":"<ul> <li>Issues: Verwenden Sie GitHub Issues f\u00fcr Bug-Reports und Feature-Requests</li> <li>Diskussionen: GitHub Discussions f\u00fcr Fragen und Ideen</li> <li>Dokumentation: Dokumentation mit \u00c4nderungen aktuell halten</li> </ul> <p>Diese Dokumentation wird vom Carambus-Entwicklungsteam gepflegt. F\u00fcr Fragen oder Beitr\u00e4ge siehe den Mitwirken Abschnitt. </p>"},{"location":"about/","title":"\u00dcber","text":""},{"location":"about/#-","title":"---","text":"<p>title: about summary: \u00dcber mich ;-) version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-06 15:53:01.713035000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-06 16:53:01.713035000 Z tags: [] metadata: {} position: 0 id: 6</p>"},{"location":"about/#der-entwickler-uber-sich-selbst","title":"Der Entwickler \u00fcber sich selbst:","text":"<p>Kompromisslose Automatisierung des Billard Spielbetriebs von der Tournierplanung \u00fcber die Datenerfassung bis hin zur \u00dcbertragung der Spielergebnisse. Das ist das Ziel des Carambus Projektes.</p> <p>Eigentlich ist mein Beratungsgewerbe Ullrich-IT-Consulting bereits Geschichte, da ich mich schon seit l\u00e4ngerem Im Ruhestand befinde. Aber anl\u00e4sslich des bevorstehenden Jubil\u00e4ums meines Vereins Billardclub Wedel 61 e.V. kam mir die Idee endlich einmal etwas Substantielles beizusteuern.</p> <p>Und wer mich kennt, der weiss, dass ich w\u00e4hrend meines gesamten Berufslebens - zuletzt als Vision\u00e4r bei Sun Microsystems - bestebt war neueste Technologien einzusetzen.</p> <p>2008 kam ich das erste Mal mit der Entwicklungsumgebung Ruby/Rails in Ber\u00fchrung. Seit dem sch\u00e4tze ich den enormen Fortschritt in der Entwicklungsgeschwindigkeit. Die grosse Frage war nun, ob sich dieses Projekt, welches an vielen Stellen Realzeit-Anforderungen an die beteiligten Anzeige- und Erfassungssystem stellt, sinnvoll mit RoR realisieren l\u00e4sst.</p> <p>Dem Projekt ging also zun\u00e4chst eine ca 4-w\u00f6chige Evaluierung m\u00f6glicher Entwicklungsumgebungen voraus - insbesondere React, React Native und Angular. Leider f\u00fchrte das jeweils zu sehr aufwendigen Bruchstellen zwischen serverseitiger Datenbankorientierte Logik und den JavaScriptbasierten Endger\u00e4ten. Also verschiedene Betriebssysteme, Sprachen und Frameworks. Keine gute Idee. Gl\u00fccklicherweise kam ich \u00fcber GoRails zu einer idealen L\u00f6sung - Stimulus Reflex und Cable Ready! Carambus ist ein serverbasierte Webl\u00f6sung mit Single Page Feeling and den Scoreboards!</p> <p>Dr. Gernot Ullrich</p> <p>Ullrich-IT-Consulting</p>"},{"location":"database_design/","title":"Carambus API Datenbank-Design Dokumentation","text":""},{"location":"database_design/#kernmodelle-und-ihre-beziehungen","title":"Kernmodelle und ihre Beziehungen","text":""},{"location":"database_design/#seeding-modell-doppelte-funktionalitat","title":"Seeding-Modell - Doppelte Funktionalit\u00e4t","text":"<p>Das <code>Seeding</code>-Modell erf\u00fcllt zwei verschiedene Zwecke im System:</p> <ol> <li>Team-Kaderverwaltung</li> <li>Verbunden mit <code>LeagueTeam</code> \u00fcber <code>league_team_id</code></li> <li>Dient zur Verwaltung des vollst\u00e4ndigen Spielerkaders eines Ligateams</li> <li>Wird w\u00e4hrend der initialen Liga/Team-Einrichtung und beim Scraping erstellt</li> <li> <p>Beispiel: <code>Seeding.where(league_team: league_team, player: player)</code></p> </li> <li> <p>Spielbeteiligungsverfolgung</p> </li> <li>Verbunden mit <code>Party</code> \u00fcber polymorphe <code>tournament_id</code> und <code>tournament_type</code></li> <li>Verfolgt, welche Spieler an bestimmten Spielen teilnehmen</li> <li>Wird bei der Einrichtung einzelner Spiele erstellt</li> <li>Beispiel: <code>party.seedings.where(\"id &gt; #{Game::MIN_ID}\")</code></li> </ol> <pre><code>class Seeding &lt; ApplicationRecord\n  belongs_to :player, optional: true\n  belongs_to :tournament, polymorphic: true, optional: true\n  belongs_to :league_team, optional: true\n  # ...\nend\n</code></pre>"},{"location":"database_design/#party-und-leagueteam-beziehung","title":"Party und LeagueTeam Beziehung","text":"<p>Die Beziehung zwischen <code>Party</code> und <code>LeagueTeam</code> ist f\u00fcr die Spielplanung und Team-Beteiligung konzipiert:</p> <pre><code>class Party &lt; ApplicationRecord\n  belongs_to :league_team_a, class_name: \"LeagueTeam\"\n  belongs_to :league_team_b, class_name: \"LeagueTeam\"\n  belongs_to :host_league_team, class_name: \"LeagueTeam\"\n  belongs_to :no_show_team, class_name: \"LeagueTeam\"\n  has_many :seedings, as: :tournament\n  # ...\nend\n\nclass LeagueTeam &lt; ApplicationRecord\n  has_many :parties_a, class_name: \"Party\", foreign_key: :league_team_a_id\n  has_many :parties_b, class_name: \"Party\", foreign_key: :league_team_b_id\n  has_many :parties_as_host, class_name: \"Party\", foreign_key: :host_league_team_id\n  has_many :no_show_parties, class_name: \"Party\", foreign_key: :no_show_team_id\n  has_many :seedings\n  # ...\nend\n</code></pre>"},{"location":"database_design/#datenspeicherungsmuster","title":"Datenspeicherungsmuster","text":""},{"location":"database_design/#flexible-datenspeicherung","title":"Flexible Datenspeicherung","text":"<p>Mehrere Modelle verwenden serialisierte Spalten f\u00fcr flexible Datenspeicherung:</p> <ol> <li>JSON-Serialisierung <pre><code>serialize :data, coder: JSON, type: Hash\n</code></pre>    Verwendet in:</li> <li><code>Party</code> - Speichert spielspezifische Daten</li> <li><code>Seeding</code> - Speichert Spielergebnisse und Ranglisten</li> <li> <p><code>LeagueTeam</code> - Speichert teamspezifische Metadaten</p> </li> <li> <p>YAML-Serialisierung <pre><code>serialize :remarks, coder: YAML, type: Hash\n</code></pre>    Verwendet in:</p> </li> <li><code>Party</code> - Speichert Spielbemerkungen und Notizen</li> </ol>"},{"location":"database_design/#region-tagging-system","title":"Region-Tagging-System","text":"<p>Das <code>RegionTaggable</code>-Concern bietet intelligente Regionsverwaltung:</p> <pre><code># Beispiel aus RegionTaggable\nwhen Seeding\n  if tournament_id.present?\n    # Behandlung des tournament-basierten Region-Taggings\n    tournament ? [\n      tournament.region_id,\n      (tournament.organizer_type == \"Region\" ? tournament.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  elsif league_team_id.present?\n    # Behandlung des league-team-basierten Region-Taggings\n    league_team&amp;.league ? [\n      (league_team.league.organizer_type == \"Region\" ? league_team.league.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  end\n</code></pre>"},{"location":"database_design/#datenschutz-und-synchronisation","title":"Datenschutz und Synchronisation","text":""},{"location":"database_design/#lokaler-schutz","title":"Lokaler Schutz","text":"<p>Das <code>LocalProtector</code>-Concern sch\u00fctzt lokale Daten vor externen \u00c4nderungen:</p> <pre><code>class Party &lt; ApplicationRecord\n  include LocalProtector\n  # ...\nend\n\nclass LeagueTeam &lt; ApplicationRecord\n  include LocalProtector\n  # ...\nend\n\nclass Seeding &lt; ApplicationRecord\n  include LocalProtector\n  # ...\nend\n</code></pre>"},{"location":"database_design/#quellenverwaltung","title":"Quellenverwaltung","text":"<p>Das <code>SourceHandler</code>-Concern verwaltet die externe Datensynchronisation:</p> <pre><code>class Party &lt; ApplicationRecord\n  include SourceHandler\n  # ...\nend\n\nclass LeagueTeam &lt; ApplicationRecord\n  include SourceHandler\n  # ...\nend\n</code></pre>"},{"location":"database_design/#wichtige-arbeitsablaufe","title":"Wichtige Arbeitsabl\u00e4ufe","text":""},{"location":"database_design/#team-einrichtung-und-spielerstellung","title":"Team-Einrichtung und Spielerstellung","text":"<ol> <li>Ligateams werden mit ihrem Basis-Kader erstellt (Seedings mit <code>league_team_id</code>)</li> <li>Bei der Erstellung eines Spiels:</li> <li>Eine neue <code>Party</code> wird erstellt, die zwei <code>LeagueTeam</code>s verbindet</li> <li>Spezifische Seedings werden f\u00fcr das Spiel erstellt (mit <code>tournament_id</code>)</li> <li>Diese Seedings verfolgen, welche Spieler aus dem Team-Kader an diesem Spiel teilnehmen</li> </ol>"},{"location":"database_design/#datensynchronisation","title":"Datensynchronisation","text":"<ol> <li>Externe Daten (von BA/CC) werden \u00fcber den <code>SourceHandler</code> synchronisiert</li> <li>Lokale Daten werden vor externen \u00c4nderungen durch <code>LocalProtector</code> gesch\u00fctzt</li> <li>Region-Tagging wird automatisch basierend auf dem Kontext (Tournament oder Ligateam) behandelt</li> </ol>"},{"location":"database_design/#wichtige-hinweise-fur-entwickler","title":"Wichtige Hinweise f\u00fcr Entwickler","text":"<ol> <li>Seeding-Erstellung</li> <li>Immer ber\u00fccksichtigen, ob ein Team-Kadereintrag oder ein Spielbeteiligungseintrag erstellt wird</li> <li> <p>Passende Assoziationen verwenden (<code>league_team_id</code> vs <code>tournament_id</code>)</p> </li> <li> <p>Datenschutz</p> </li> <li>Den <code>LocalProtector</code> bei der \u00c4nderung von Datens\u00e4tzen beachten</li> <li> <p><code>unprotected = true</code> verwenden, wenn lokale \u00c4nderungen notwendig sind</p> </li> <li> <p>Regionsverwaltung</p> </li> <li>Region-Tagging ist automatisch, aber kontextabh\u00e4ngig</li> <li> <p>Unterschiedliche Logik f\u00fcr tournament-basierte vs. league-team-basierte Seedings</p> </li> <li> <p>Datenspeicherung</p> </li> <li>Passende Serialisierung (JSON vs YAML) f\u00fcr verschiedene Datentypen verwenden</li> <li>Struktur der gespeicherten Daten in serialisierten Spalten beachten</li> </ol>"},{"location":"database_design/#datenbankschema-highlights","title":"Datenbankschema-Highlights","text":""},{"location":"database_design/#seeding-modell","title":"Seeding-Modell","text":"<pre><code>create_table \"seedings\" do |t|\n  t.string \"ba_state\"\n  t.integer \"balls_goal\"\n  t.text \"data\"\n  t.integer \"position\"\n  t.integer \"rank\"\n  t.string \"role\"\n  t.string \"state\"\n  t.string \"tournament_type\"\n  t.integer \"league_team_id\"\n  t.integer \"player_id\"\n  t.integer \"playing_discipline_id\"\n  t.integer \"tournament_id\"\n  # ...\nend\n</code></pre>"},{"location":"database_design/#party-modell","title":"Party-Modell","text":"<pre><code>create_table \"parties\" do |t|\n  t.datetime \"date\"\n  t.integer \"league_id\"\n  t.text \"remarks\"\n  t.integer \"league_team_a_id\"\n  t.integer \"league_team_b_id\"\n  t.integer \"host_league_team_id\"\n  t.integer \"no_show_team_id\"\n  t.text \"data\"\n  # ... weitere Felder ...\nend\n</code></pre>"},{"location":"database_design/#leagueteam-modell","title":"LeagueTeam-Modell","text":"<pre><code>create_table \"league_teams\" do |t|\n  t.string \"name\"\n  t.string \"shortname\"\n  t.integer \"league_id\"\n  t.integer \"ba_id\"\n  t.integer \"cc_id\"\n  t.integer \"club_id\"\n  t.text \"data\"\n  # ... weitere Felder ...\nend\n</code></pre>"},{"location":"datenbank-partitionierung-und-synchronisierung/","title":"Datenbank-Partitionierung","text":""},{"location":"datenbank-partitionierung-und-synchronisierung/#-","title":"---","text":"<p>title: Datenbank-Partitionierung und Synchronisierung summary: 'Das System implementiert eine regionsbasierte Datenbank-Partitionierungsstrategie   zur Optimierung der Datensynchronisierung zwischen lokalen Servern und dem zentralen   API-Server. Dieser Ansatz stellt sicher, dass jeder lokale Server nur die f\u00fcr seine   Region relevanten Daten verwaltet und gleichzeitig Zugriff auf notwendige globale   Ereignisse hat. Zus\u00e4tzlich werden regionsunabh\u00e4ngige Daten an alle lokalen Server   synchronisiert.</p> <p>' version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-04-29 21:19:03.426133000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-04-29 23:19:03.426133000 Z tags: [] metadata: {} position: 0 id: 10</p>"},{"location":"datenbank-partitionierung-und-synchronisierung/#ubersicht","title":"\u00dcbersicht","text":"<p>Das System implementiert eine regionsbasierte Datenbank-Partitionierungsstrategie zur Optimierung der Datensynchronisierung zwischen lokalen Servern und dem zentralen API-Server. Dieser Ansatz stellt sicher, dass jeder lokale Server nur die f\u00fcr seine Region relevanten Daten verwaltet und gleichzeitig Zugriff auf notwendige globale Ereignisse hat. Zus\u00e4tzlich werden regionsunabh\u00e4ngige Daten an alle lokalen Server synchronisiert.</p>"},{"location":"datenbank-partitionierung-und-synchronisierung/#hauptkomponenten","title":"Hauptkomponenten","text":""},{"location":"datenbank-partitionierung-und-synchronisierung/#1-regions-tagging-regiontaggable","title":"1. Regions-Tagging (RegionTaggable)","text":"<ul> <li>Datens\u00e4tze werden mit einem <code>region_id</code> markiert, um ihre regionale Zuordnung zu verfolgen</li> <li>Ein <code>global_context</code> Boolean-Flag kennzeichnet Datens\u00e4tze, die an globalen Ereignissen teilnehmen</li> <li>Datens\u00e4tze ohne regionale Abh\u00e4ngigkeiten (region_id ist NULL) werden an alle Server synchronisiert</li> <li>Implementiert als Concern in <code>app/models/concerns/region_taggable.rb</code></li> </ul>"},{"location":"datenbank-partitionierung-und-synchronisierung/#2-versionsverwaltung","title":"2. Versionsverwaltung","text":"<ul> <li>Nutzt PaperTrail f\u00fcr die Versionsverfolgung</li> <li>Versionen werden mit <code>region_id</code> markiert, um die regionale Relevanz zu verfolgen</li> <li>Versionen mit NULL region_id werden als global betrachtet und an alle Server gesendet</li> </ul>"},{"location":"datenbank-partitionierung-und-synchronisierung/#3-synchronisierungslogik","title":"3. Synchronisierungslogik","text":"<ul> <li>Lokale Server erhalten nur Daten mit <code>region_id</code> ihrer Region oder <code>global_context = true</code></li> <li>Globale Ereignisse (DBU-Turniere, etc.) werden an alle Server synchronisiert</li> <li>Regionsunabh\u00e4ngige Daten (Konfigurationen, etc.) werden an alle Server gesendet</li> </ul>"},{"location":"datenbank-partitionierung-und-synchronisierung/#implementierung","title":"Implementierung","text":""},{"location":"datenbank-partitionierung-und-synchronisierung/#regiontaggable-concern","title":"RegionTaggable Concern","text":"<pre><code>module RegionTaggable\n  extend ActiveSupport::Concern\n\n  included do\n    after_save :update_region_tagging\n    after_destroy :update_region_tagging\n  end\n\n  def find_associated_region_id\n    # Berechnet die region_id basierend auf dem Modelltyp\n  end\n\n  def global_context?\n    # Bestimmt, ob der Datensatz globalen Kontext hat\n  end\nend\n</code></pre>"},{"location":"datenbank-partitionierung-und-synchronisierung/#versions-scope","title":"Versions-Scope","text":"<pre><code>scope :for_region, -&gt;(region_id) {\n  where(\"region_id IS NULL OR region_id = ?\", region_id)\n}\n</code></pre>"},{"location":"datenbank-partitionierung-und-synchronisierung/#verwendung","title":"Verwendung","text":""},{"location":"datenbank-partitionierung-und-synchronisierung/#rake-tasks","title":"Rake Tasks","text":"<pre><code># Region-IDs f\u00fcr alle Modelle aktualisieren\nrails region_taggings:update_all_region_ids\n\n# Region-Tagging f\u00fcr alle Modelle aktualisieren\nrails region_taggings:update_all\n\n# Global Context f\u00fcr Datens\u00e4tze setzen\nrails region_taggings:set_global_context\n\n# Region-Tagging verifizieren\nrails region_taggings:verify\n</code></pre>"},{"location":"datenbank-partitionierung-und-synchronisierung/#modelle-mit-regiontaggable","title":"Modelle mit RegionTaggable","text":"<ul> <li>Region, Club, Tournament, League, Party</li> <li>Location, LeagueTeam, Game, PartyGame, GameParticipation</li> <li>Player, SeasonParticipation, Seeding</li> </ul>"},{"location":"datenbank-partitionierung-und-synchronisierung/#migration-von-altem-system","title":"Migration von altem System","text":"<p>Das System wurde von einem komplexen polymorphic <code>region_taggings</code> System zu einem einfachen <code>region_id</code> + <code>global_context</code> System migriert:</p> <ol> <li>Altes System: <code>region_ids</code> Array mit polymorphic <code>region_taggings</code> Tabelle</li> <li>Neues System: Einzelne <code>region_id</code> mit <code>global_context</code> Boolean</li> </ol>"},{"location":"datenbank-partitionierung-und-synchronisierung/#vorteile-des-neuen-systems","title":"Vorteile des neuen Systems","text":"<ul> <li>Einfacher zu verstehen und zu warten</li> <li>Bessere Performance durch direkte Indizes</li> <li>Klarere Trennung zwischen regionalen und globalen Daten</li> <li>Weniger Komplexit\u00e4t in der Synchronisierungslogik</li> </ul>"},{"location":"docker_installation/","title":"\ud83d\udc33 Docker Installation f\u00fcr Carambus","text":""},{"location":"docker_installation/#ubersicht","title":"\ud83d\udccb \u00dcbersicht","text":"<p>Dieses Dokument beschreibt die automatisierten Prozesse f\u00fcr: 1. Neuinstallation eines Carambus-Servers auf verschiedenen Plattformen 2. Migration bestehender Installationen zu neuen Hauptversionen 3. Entwicklungsumgebung f\u00fcr lokale Entwicklung auf einem Computer mit macOS</p> <p>Das Ziel ist es, diese Prozesse so zu vereinfachen, dass ein lokaler System-Manager ohne tiefe technische Kenntnisse diese Aufgaben durchf\u00fchren kann.</p>"},{"location":"docker_installation/#architektur-ubersicht","title":"\ud83c\udfd7\ufe0f Architektur-\u00dcbersicht","text":""},{"location":"docker_installation/#production-modi-2-verschiedene-systeme","title":"Production-Modi (2 verschiedene Systeme)","text":""},{"location":"docker_installation/#1-api-server-newapicarambusde","title":"1. API-Server (newapi.carambus.de)","text":"<ul> <li>Zweck: Zentrale API f\u00fcr alle Local-Server</li> <li>Merkmale: Ist der zentrale API-Server</li> <li>Verwendung: Produktions-API-Server</li> <li>Domain: newapi.carambus.de</li> <li>Installationspfad: <code>/var/www/carambus_api</code></li> </ul>"},{"location":"docker_installation/#2-local-server-lokale-installationen","title":"2. Local-Server (lokale Installationen)","text":"<ul> <li>Zweck: Lokale Server f\u00fcr Turniere/Clubs</li> <li>Merkmale: Hat eine Carambus API URL, die auf den API-Server verweist</li> <li>Verwendung: Raspberry Pi Scoreboards, lokale Server</li> <li>Domain: localhost oder lokale IP</li> <li>API-URL: Verweist auf newapi.carambus.de</li> <li>Installationspfad: <code>/var/www/carambus</code></li> </ul>"},{"location":"docker_installation/#3-kombinierte-installation-api-server-local-server","title":"3. Kombinierte Installation (API-Server + Local-Server)","text":"<ul> <li>Zweck: API-Server mit zus\u00e4tzlichem Local-Server f\u00fcr Hosting</li> <li>Verwendung: F\u00fcr Locations ohne eigenen Server</li> <li>Installationspfade: </li> <li>API-Server: <code>/var/www/carambus_api</code></li> <li>Local-Server: <code>/var/www/carambus</code></li> <li>Vorteil: Zentrale Verwaltung mit lokaler Hosting-Funktionalit\u00e4t</li> </ul> <p>Hinweis: Beide Server-Typen k\u00f6nnen auf derselben Hardware laufen. Der API-Server kann auch als Hosting-Server f\u00fcr lokale Carambus-Instanzen fungieren, die keinen eigenen Server haben.</p>"},{"location":"docker_installation/#development-modus-ubergeordnet","title":"Development-Modus (\u00fcbergeordnet)","text":"<ul> <li>Zweck: Beide Production-Modi k\u00f6nnen im Development-Modus getestet werden</li> <li>Plattform: Computer mit macOS f\u00fcr lokale Entwicklung</li> <li>Vorteil: Parallele Tests beider Modi m\u00f6glich</li> <li>Verwendung: Inter-System-Kommunikation testen (Local-Server \u2194 API-Server)</li> </ul>"},{"location":"docker_installation/#installationstypen","title":"\ud83d\ude80 Installationstypen","text":""},{"location":"docker_installation/#docker-basierte-installation-empfohlen","title":"Docker-basierte Installation (Empfohlen)","text":""},{"location":"docker_installation/#vorteile","title":"Vorteile","text":"<ul> <li>\u2705 Konsistente Umgebung</li> <li>\u2705 Einfache Migration</li> <li>\u2705 Minimaler technischer Aufwand</li> <li>\u2705 Reproduzierbare Installationen</li> <li>\u2705 Automatische Updates</li> </ul>"},{"location":"docker_installation/#prozess","title":"Prozess","text":"<ol> <li>Automatische Konfiguration beim ersten Boot</li> <li>Web-basierte Lokalisierung (nur f\u00fcr lokale Server)</li> <li>Automatischer Scoreboard-Start (nur f\u00fcr lokale Server)</li> </ol>"},{"location":"docker_installation/#installationsprozess-docker-basiert","title":"\ud83d\udccb Installationsprozess (Docker-basiert)","text":""},{"location":"docker_installation/#phase-1-vorbereitung","title":"Phase 1: Vorbereitung","text":""},{"location":"docker_installation/#11-plattform-spezifische-voraussetzungen","title":"1.1 Plattform-spezifische Voraussetzungen","text":"<p>Raspberry Pi: - Raspberry Pi Imager mit Custom Image - Optional: SSH-Konfiguration mit Standard-Account - Optional: WLAN-Anbindung mit fester IP im Router</p> <p>Ubuntu Server (z.B. Hetzner): - Basis-Installation bereits durch Hoster erfolgt - Netzwerkkonfiguration bereits durch Hoster erfolgt - SSH-Zugang \u00fcber Standard-Port 22</p>"},{"location":"docker_installation/#12-www-data-account-konfigurieren","title":"1.2 www-data Account konfigurieren","text":"<p>Wichtig: Alle Carambus-Installationen verwenden den Standard-Account <code>www-data</code> (uid=33, gid=33), der bereits in beiden Betriebssystemen definiert ist:</p> <pre><code># Der www-data User ist bereits vorhanden:\n# www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n\n# Shell f\u00fcr SSH-Zugang aktivieren (Home-Verzeichnis bleibt /var/www)\nsudo chsh -s /bin/bash www-data\n\n# wheel-Gruppe erstellen (falls nicht vorhanden)\nsudo groupadd wheel\n\n# wheel-Gruppe f\u00fcr passwortloses sudo konfigurieren\necho '%wheel ALL=(ALL) NOPASSWD: ALL' | sudo tee -a /etc/sudoers\n\n# www-data zu wheel-Gruppe hinzuf\u00fcgen\nsudo usermod -aG wheel www-data\n\n# SSH-Schl\u00fcssel f\u00fcr passwortlosen Zugang einrichten\nsudo mkdir -p /var/www/.ssh\nsudo chown www-data:www-data /var/www/.ssh\nsudo chmod 700 /var/www/.ssh\n# \u00d6ffentlichen Schl\u00fcssel vom Entwicklungssystem kopieren\n</code></pre>"},{"location":"docker_installation/#13-ssh-konfiguration","title":"1.3 SSH-Konfiguration","text":"<p>Entwicklungssystem-Skripte gehen immer von folgender SSH-Konfiguration aus:</p> <pre><code># Standard-SSH-Zugang f\u00fcr alle Skripte\nssh -p 8910 www-data@host\n\n# Kein direkter Root-Zugang m\u00f6glich\n# Kein passwortloser Root-Zugang m\u00f6glich\n# Von www-data aus ggf. per sudo su weiter\n</code></pre> <p>SSH-Konfiguration auf dem Zielsystem:</p> <pre><code># /etc/ssh/sshd_config\nPort 8910\nPermitRootLogin no\n# PasswordAuthentication no  # Auskommentiert f\u00fcr initiale Konfiguration\nPubkeyAuthentication yes\nAllowUsers www-data\n</code></pre> <p>Hinweis: Diese Konfiguration entspricht den Ansible-Regeln, die f\u00fcr das Deployment verwendet werden. Die <code>wheel</code>-Gruppe erm\u00f6glicht passwortloses sudo f\u00fcr den <code>www-data</code> User.</p>"},{"location":"docker_installation/#phase-2-automatische-konfiguration","title":"Phase 2: Automatische Konfiguration","text":""},{"location":"docker_installation/#21-netzwerk-konfiguration","title":"2.1 Netzwerk-Konfiguration","text":"<p>Hinweis: Die Netzanbindung erfolgt bereits beim Laden des Basis-OS: - Raspberry Pi: Optional SSH-Konfiguration und WLAN-Anbindung (vorzugsweise feste IP im Router) - Ubuntu Server: \u00dcber die Administration des Hosters</p> <p>F\u00fcr die Docker-Installation ist in jedem Fall ein Account <code>www-data</code> vorhanden, \u00fcber den auch die Rails-Anwendung l\u00e4uft.</p>"},{"location":"docker_installation/#22-lokalisierung","title":"2.2 Lokalisierung","text":"<p>Wichtig: Nur die lokalen Server haben eine Regionalisierung (region_id bzw. Kontext) zur Einstellung des Datenfilters.</p> <pre><code># config/localization.yml\nlocation:\n  id: \"{location_id}\"\n  name: \"{location_name}\"\n  timezone: \"Europe/Berlin\"\n  region_id: \"{region_id}\"  # Nur f\u00fcr lokale Server relevant\n</code></pre> <p>Lokalisierung ist nur notwendig f\u00fcr Scoreboards, da diese einer Location zugeordnet sind, damit die entsprechende Tischauswahl f\u00fcr die Location gemacht werden kann.</p> <p>Hinweis: Es gab beim <code>assets:precompile</code> Probleme, dass eine <code>location_id</code> vorgegeben sein musste. Das muss nochmal angeschaut und eliminiert werden.</p>"},{"location":"docker_installation/#23-carambus-api-url-konfigurieren","title":"2.3 Carambus API URL konfigurieren","text":"<pre><code># config/api.yml\ncarambus_api:\n  url: \"https://newapi.carambus.de\"\n  timeout: 30\n  retry_attempts: 3\n</code></pre>"},{"location":"docker_installation/#24-sprachkonfiguration","title":"2.4 Sprachkonfiguration","text":"<p>Deutsch ist immer die Default-Locale. Benutzer k\u00f6nnen \u00fcber ihr Profil eine eigene Locale (DE oder EN) ausw\u00e4hlen. Das Umschalten ist in der Webapp m\u00f6glich und ist f\u00fcr die Installation irrelevant.</p> <pre><code># config/application.yml\ndefault_locale: \"de\"\navailable_locales: [\"de\", \"en\"]\n</code></pre>"},{"location":"docker_installation/#phase-3-scoreboard-setup-nur-fur-lokale-server","title":"Phase 3: Scoreboard-Setup (nur f\u00fcr lokale Server)","text":"<p>Hinweis: Desktop-Konfigurationen m\u00fcssen wir nochmal gesondert anschauen. Wir hegen bei der Passivinstallation von einem Headless-Server aus.</p>"},{"location":"docker_installation/#entwicklungsumgebung-computer-mit-macos","title":"\ud83d\udd27 Entwicklungsumgebung (Computer mit macOS)","text":""},{"location":"docker_installation/#lokale-entwicklung","title":"Lokale Entwicklung","text":"<pre><code># Einzelnes System starten\ndocker-compose -f docker-compose.development.local-server.yml up\n\n# Alle Systeme parallel (f\u00fcr Inter-System-Tests)\n./start-development-parallel.sh\n</code></pre>"},{"location":"docker_installation/#parallele-systeme-development-modus","title":"Parallele Systeme (Development-Modus)","text":"<pre><code># Alle drei Systeme gleichzeitig auf dem macOS-Computer\ndocker-compose -f docker-compose.development.parallel.yml up\n\n# Ports:\n# - API-Server: 3001 (PostgreSQL: 5433, Redis: 6380)\n# - Local-Server: 3000 (PostgreSQL: 5432, Redis: 6379)\n# - Web-Client: 3002 (PostgreSQL: 5434, Redis: 6381)\n\n# Installationspfade:\n# - API-Server: /var/www/carambus_api\n# - Local-Server: /var/www/carambus\n</code></pre>"},{"location":"docker_installation/#inter-system-kommunikation-testen","title":"Inter-System-Kommunikation testen","text":"<pre><code># Local-Server kommuniziert mit API-Server \u00fcber Carambus API URL\n# F\u00fcr Region-Filter-Tests\n# F\u00fcr Synchronisierung-Tests\n# Local-Server hat API-URL, die auf API-Server verweist\n</code></pre>"},{"location":"docker_installation/#monitoring-und-wartung","title":"\ud83d\udcca Monitoring und Wartung","text":""},{"location":"docker_installation/#system-monitoring","title":"System-Monitoring","text":"<pre><code># Container-Status\ndocker compose ps\n\n# Ressourcen-Verbrauch\ndocker stats\n\n# System-Ressourcen\nhtop\n</code></pre>"},{"location":"docker_installation/#automatische-updates","title":"Automatische Updates","text":"<pre><code># Crontab f\u00fcr automatische Updates\ncrontab -e\n\n# T\u00e4glich um 2:00 Uhr aktualisieren\n# F\u00fcr Local-Server:\n0 2 * * * cd /var/www/carambus &amp;&amp; git pull &amp;&amp; docker compose up -d --build\n# F\u00fcr API-Server:\n# 0 2 * * * cd /var/www/carambus_api &amp;&amp; git pull &amp;&amp; docker compose up -d --build\n</code></pre>"},{"location":"docker_installation/#backup-system","title":"Backup-System","text":"<pre><code># Automatisches Backup der Lokalisierung\n#!/bin/bash\n# backup-localization.sh\n\nLOCATION_ID=$(grep \"LOCATION_ID\" .env | cut -d'=' -f2)\nBACKUP_DIR=\"/backup/localization\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\ntar -czf \"$BACKUP_DIR/localization_${LOCATION_ID}_${DATE}.tar.gz\" \\\n  config/localization.yml \\\n  .env \\\n  storage/\n\n# F\u00fcr kombinierte Installationen (API-Server + Local-Server):\n# Beide Verzeichnisse sichern\n# tar -czf \"$BACKUP_DIR/carambus_combined_${DATE}.tar.gz\" \\\n#   /var/www/carambus_api \\\n#   /var/www/carambus\n</code></pre>"},{"location":"docker_installation/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"docker_installation/#haufige-probleme","title":"H\u00e4ufige Probleme","text":""},{"location":"docker_installation/#container-startet-nicht","title":"Container startet nicht","text":"<pre><code># Docker-Status pr\u00fcfen\nsudo systemctl status docker\n\n# Logs anschauen\ndocker compose logs\n\n# Container neu starten\ndocker compose restart\n</code></pre>"},{"location":"docker_installation/#scoreboard-startet-nicht-nur-fur-lokale-server","title":"Scoreboard startet nicht (nur f\u00fcr lokale Server)","text":"<pre><code># Browser-Cache leeren\nrm -rf ~/.cache/chromium\n\n# Browser neu starten\npkill chromium\nchromium-browser --start-fullscreen --app=http://localhost:3000/scoreboard\n</code></pre>"},{"location":"docker_installation/#netzwerk-probleme","title":"Netzwerk-Probleme","text":"<pre><code># IP-Adresse pr\u00fcfen\nip addr show\n\n# Netzwerk neu starten\nsudo systemctl restart networking\n</code></pre>"},{"location":"docker_installation/#log-analyse","title":"Log-Analyse","text":"<pre><code># Alle Logs\ndocker compose logs -f\n\n# Nur Rails-Logs\ndocker compose logs -f web\n\n# Nur Datenbank-Logs\ndocker compose logs -f postgres\n</code></pre>"},{"location":"docker_installation/#migration-von-bestehenden-installationen","title":"\ud83d\udd04 Migration von bestehenden Installationen","text":""},{"location":"docker_installation/#schritt-1-backup-erstellen","title":"Schritt 1: Backup erstellen","text":"<pre><code># Lokalisierung sichern\ntar -czf localization_backup.tar.gz config/localization.yml .env\n\n# Datenbank sichern\ndocker compose exec postgres pg_dump -U www_data carambus &gt; carambus_backup.sql\n</code></pre>"},{"location":"docker_installation/#schritt-2-neue-installation","title":"Schritt 2: Neue Installation","text":"<pre><code># Neues Deployment ausf\u00fchren\n# F\u00fcr Local-Server:\n./deploy-docker.sh carambus_raspberry www-data@192.168.178.53:8910 /var/www/carambus\n# F\u00fcr API-Server:\n# ./deploy-docker.sh carambus_api_server www-data@newapi.carambus.de:8910 /var/www/carambus_api\n</code></pre>"},{"location":"docker_installation/#schritt-3-daten-wiederherstellen","title":"Schritt 3: Daten wiederherstellen","text":"<pre><code># Lokalisierung wiederherstellen\ntar -xzf localization_backup.tar.gz\n\n# Datenbank wiederherstellen\ndocker compose exec -T postgres psql -U www_data carambus &lt; carambus_backup.sql\n</code></pre>"},{"location":"docker_installation/#weitere-dokumentation","title":"\ud83d\udcd6 Weitere Dokumentation","text":"<ul> <li>Installations\u00fcbersicht - Installations\u00fcbersicht</li> <li>Entwicklerleitfaden - Entwicklerdokumentation</li> <li>API-Dokumentation - API-Referenz</li> </ul>"},{"location":"docker_installation/#support","title":"\ud83c\udd98 Support","text":"<p>Bei Problemen: 1. Pr\u00fcfen Sie die Installations\u00fcbersicht-Seite 2. Logs anschauen: <code>docker compose logs</code> 3. Container-Status: <code>docker compose ps</code> 4. System neu starten: <code>sudo reboot</code></p> <p>\ud83c\udf89 Das ist alles! Mit diesem Guide k\u00f6nnen Sie Carambus einfach installieren und verwalten.</p> <p>\ud83d\udca1 Tipp: F\u00fcr die Entwicklung verwenden Sie die parallelen Docker-Systeme auf dem macOS-Computer, um Inter-System-Kommunikation zu testen!</p> <p>\ud83c\udfd7\ufe0f Architektur: 2 Production-Modi - API-Server (zentral) und Local-Server (mit Carambus API URL), beide im Development-Modus testbar!</p> <p>\ud83d\udd11 Wichtig: Alle Installationen verwenden den Standard-Account <code>www-data</code> und sind \u00fcber SSH-Port 8910 erreichbar. Lokalisierung ist nur f\u00fcr lokale Server mit Scoreboards relevant. API-Server und Local-Server k\u00f6nnen auf derselben Hardware laufen mit unterschiedlichen Installationspfaden (<code>/var/www/carambus_api</code> und <code>/var/www/carambus</code>).</p> <p>\ud83d\udcdd Hinweis: Alle Deploy-Skripte und Dokumentation wurden entsprechend angepasst. Bitte verwenden Sie die aktualisierten Befehle mit <code>www-data@</code> und den korrekten Pfaden. </p>"},{"location":"einzelturnierverwaltung/","title":"Einzelturnierverwaltung","text":""},{"location":"einzelturnierverwaltung/#-","title":"---","text":"<p>title: Einzelturnierverwaltung summary: Die Einzelturnierverwaltung stellt eine Br\u00fccke zwischen der Turnierplanung   in der ClubCloud, den Carambus Scoreboards und dem Ergebnisdienst der ClubClud dar.  In   diesem Dokument werden die Abl\u00e4ufe im Detail beschrieben version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-05 14:49:55.360649000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-05 15:49:55.360649000 Z tags: [] metadata: {} position: 1 id: 3</p>"},{"location":"einzelturnierverwaltung/#turnierverwaltung","title":"Turnierverwaltung","text":""},{"location":"einzelturnierverwaltung/#account","title":"Account","text":"<p>F\u00fcr das Carambus Turniermanagement ist ein Account mit Admin-Rechten auf dem Carambus Location Server erforderlich. Dieser kann vom Club-Vorsitzenden oder Carambus-Entwickler eingerichtet werden. URL ist aus den URLs der Scoreboards ableitbar, z.B. in Wedel http://192.168.2.143:3131 .</p>"},{"location":"einzelturnierverwaltung/#abgleich-mit-der-clubcloud","title":"Abgleich mit der ClubCloud","text":"<p>Die Turniere findet man am besten \u00fcber die <code>Regionaverb\u00e4nde -&gt; Suchen -&gt; Ansehen</code>.</p> <p>Dort sind die aktuell bekannten Turniere der laufenden Saison gelistet. Das Turnier kann \u00fcber den Titel  ausgew\u00e4hlt werden. Sollte ein Turnier noch nicht gelistet sein, so kann das mehrere Gr\u00fcnde haben:</p> <ul> <li>Das Turnier ist noch nicht in der ClubCloud eingetragen</li> <li>Der zentrale Carambus API Server kennt das Turnier noch nicht.</li> <li>Das Turnier ist noch nicht auf den lokalen Location Server \u00fcbertragen.</li> </ul>"},{"location":"einzelturnierverwaltung/#das-turnier-ist-noch-nicht-in-der-clubcloud-eingetragen","title":"Das Turnier ist noch nicht in der ClubCloud eingetragen","text":"<p>Aufgabe des Landessportwartes ist es, die Turniere mit den Teilnehmerlisten in der ClubCloud einzupflegen.</p>"},{"location":"einzelturnierverwaltung/#der-zentrale-carambus-api-server-kennt-das-turnier-noch-nicht","title":"Der zentrale Carambus API Server kennt das Turnier noch nicht.","text":"<p>Der Api Server wird derzeit vom Carambus-Entwickler (mailto: gernot.ullrich@gmx.de) betreut. Turnierdaten der Carambus nutzenden Regionen werden automatisiert t\u00e4glich um 20:00 aus dem zugeh\u00f6rigen regionalen ClubCloud Server aktualisiert.</p> <p>Lokale Server fordern Updates aus der ClubCloud immer \u00fcber den zentralen API Server (api.carambus.de) an. Dieser greift die Daten von den verschiedenen ClubCloud Instanzen ab.  Mit den spezifischen Updates werden immer auch alle Updates \u00fcbertragen, die zwischenzeitlich auf dem API Server gemacht wurden.</p>"},{"location":"einzelturnierverwaltung/#das-turnier-ist-noch-nicht-auf-den-lokalen-location-server-ubertragen","title":"Das Turnier ist noch nicht auf den lokalen Location Server \u00fcbertragen","text":"<p>Ein lokal nicht vorhandenes Turnier, welches aber auf dem API Server existiert, wird automatisch bei jeder Update-Anfrage an den API Server geladen, denn bei jeder Anfrage an den API Server wird der gesammte Datenbestand synchronisiert. So eine explizite Anfrage kann z.B. das Aktualisieren der Club-Daten sein: <code>Clubs -&gt; Suchen -&gt; Ansehen -&gt; \"Datenabgleich mit der ClubCloud mit allen Details\"</code></p>"},{"location":"einzelturnierverwaltung/#aktualisieren-von-regionalverband-club-spieler-turnier-setzlisten","title":"Aktualisieren von Regionalverband, Club, Spieler, Turnier, Setzlisten","text":"<p>Beim expliziten Abholen von Daten werden auf dem API Server die angeforderten Daten mit der Billars Area abggeglichen.</p> <p>Folgenden explizte Datenanfragen sind implementiert:</p> <ul> <li><code>Club -&gt; Datenabgleich mit der ClubCloud</code></li> <li><code>Club -&gt; Datenabgleich mit der ClubCloud mit allen Details</code></li> <li><code>Regionalverband -&gt; Datenabgleich mit der ClubCloud inkl. Clubs</code></li> <li><code>Regionalverband -&gt; Datenabgleich mit der ClubCloud inkl. Clubs und Spieler</code></li> <li><code>Turnier -&gt; Datenabgleich mit der ClubCloud</code></li> </ul>"},{"location":"einzelturnierverwaltung/#turnierverwaltung_1","title":"TurnierVerwaltung","text":"<p>Ein Turnier wird generell in folgenden Phasen verwaltet:</p> <ul> <li>Abgleich mit der ClubCloud</li> <li>\u00dcberpr\u00fcfung der relevanten Daten</li> <li>Sortierung der Setzliste gem\u00e4ss Rankings</li> <li>Auswahl des Turniermodus</li> <li>Lokale Anpassung der Turnierparameter</li> <li>Check der lokalen Scoreboards</li> <li>Start des Turniers</li> <li>Abgleich der Partieergebnisse mit den Spielprotokollen</li> <li>eMail mit den Spielergebnissen (csv) an den Turnierleiter</li> <li>Upload der Spielergebnisse (csv) in die ClubCloud</li> <li>Abgleich mit der ClubCloud zum letzten Check.</li> </ul>"},{"location":"einzelturnierverwaltung/#abgleich-mit-der-clubcloud_1","title":"Abgleich mit der ClubCloud","text":"<p>Wie oben beschrieben kann das Turnier erstmalig geladen werden z.B. durch Abgleich der Clubdaten</p> <p>Wenn ein Turnier bereits lokal bekannt ist, kann jederzeit eine Aktualisierung erneut angefordert werden: <code>Region -&gt; Turnier -&gt; Datenabgleich mit der ClubCloud</code></p>"},{"location":"einzelturnierverwaltung/#uberprufung-der-relevanten-daten","title":"\u00dcberpr\u00fcfung der relevanten Daten","text":"<p>F\u00fcr den Ablauf eines Turnieres sind folgende Daten wichtig:</p> <ul> <li>Veranstalter (Regionalverband oder Club)</li> <li>Disziplin (f\u00fcr die Tischzuordnungen)</li> <li>Datum</li> <li>Saison</li> <li>Spielort (f\u00fcr die Tischzuordnungen)</li> </ul> <p>Diese Daten werden in der Regel automatisiert von der ClubCloud gezogen. Ein Sonderfall ist der Spielort. Leider ist bezgl. des Spielortes auf der ClubCloud eine freie Texteingaben m\u00f6glich. F\u00fcr die Tischzuordnung ist in Carambus jedoch die Auswahl eines formal definierten Spielortes mit Konfigurierung der Tische notwendig (Tischnahme, Tischart) Weiterhin ist anzugeben, ob es sich um ein Vorgabetournier handelt.</p> <p>Diese Daten m\u00fcssen \u00fcber <code>Turnier -&gt; Edit -&gt; Turnier aktualisieren</code> erg\u00e4nzt werden</p>"},{"location":"einzelturnierverwaltung/#sortierung-der-setzliste-gemass-rankings","title":"Sortierung der Setzliste gem\u00e4ss Rankings","text":"<p>Mit dem BA-Abgleich wird die Teilnehmerliste (Setzliste) \u00fcbertragen.</p> <p>F\u00fcr Vorgabeturniere k\u00f6nnen die Handicaps eingetragen werden: <code>Tournament -&gt; Setzliste aktualisieren</code> Diese Liste kann jetzt lokal entsprechend der Spielerrankings sortiert werden: <code>Tournament -&gt; Ordne nach Rangliste bzw. Handicap</code></p> <p>Die Reihenfolge kann jetzt noch ge\u00e4ndert werden durch Tausch von Pl\u00e4tzen mit den Pfeilen oben/unten.</p> <p>Die Reihenfolge wird dann endg\u00fcltig abgeschlossen mit <code>Turnier -&gt; Abschluss der Rangliste (nicht umkehrbar)</code></p>"},{"location":"einzelturnierverwaltung/#auswahl-des-turniermodus","title":"Auswahl des Turniermodus","text":"<p>Jetzt in die Turniermodusauswahl springen: <code>Turnier -&gt; Turniermodus festlegen</code></p> <p>In der Regel stehen mehrere M\u00f6glichkeiten zur Verf\u00fcgung.  Der Tournierleiter kann einen Modus ausw\u00e4hlen - in der Regel schon vom Landessportwart vorgegeben bei Turnieren der Regionalverb\u00e4nde.</p> <p>Auswahl duch Klick z.B. <code>Weiter mit T07</code></p>"},{"location":"einzelturnierverwaltung/#lokale-anpassung-der-turnierparameter","title":"Lokale Anpassung der Turnierparameter","text":"<p>Folgende Parameter k\u00f6nnen nun noch angepasst werden:</p> <ul> <li>Zuordnung der Tische (Mapping interner Tischname zu extern Namen)</li> <li>Ballziel (ggf. bereits f\u00fcr Turnier vorgegeben)</li> <li>Aufnahmebegrenzung (ggf. bereits f\u00fcr Turnier vorgegeben)</li> <li>Timeout in sec (0 oder keine eingabe, wenn keine Timeouts)</li> <li>Timeouts (n Timeoutverl\u00e4ngerungen maximal)</li> <li>Checkbox \"Tournament manager checks results before acceptance\"</li> <li>Einspielzeit</li> <li>verk\u00fcrzte Einspielzeit (bei Wechsel an einen bereits bespielten Tisch)</li> </ul> <p>Zur Checkbox:  Normalerweise k\u00f6nnen die Spieler des Spielstatus fortschreiben z.B. nach <code>Partie beendet - OK?</code>. Wenn ein Check von Turniermanager erforderlich ist, wird dieses unterbunden und der Turnierleiter kann nach Abgleich mit dem Spielprotokoll den Tisch freigeben.</p> <p>Die neuen Spielpaarungen erscheinen jeweils automatisch auf den Scoreboards. Erst ganz am Ende:</p>"},{"location":"einzelturnierverwaltung/#email-mit-den-spielergebnissen-csv-an-den-turnierleiter","title":"eMail mit den Spielergebnissen (csv) an den Turnierleiter","text":"<p>Nach Abschluss des Turniers erh\u00e4lt der Turnierleiter automatisch per eMail eine CSV-Datei mit den Ergebnissen in dem Format, welches f\u00fcr den Upload in die ClubCloud notwendig ist. Diese Datei wird auch auf dem lokalen Server gespeichert ({carambus}/tmp/result-{ba_id}.csv)</p>"},{"location":"einzelturnierverwaltung/#upload-der-spielergebnisse-csv-in-die-clubcloud","title":"Upload der Spielergebnisse (csv) in die ClubCloud","text":"<p>Der Turnierleiter kann die CSV-Datei direkt in die ClubCloud hochladen (er weiss wie das geht ;-)</p>"},{"location":"einzelturnierverwaltung/#abgleich-mit-der-clubcloud-zum-letzten-check","title":"Abgleich mit der ClubCloud zum letzten Check","text":"<p>Als letzten Schritt kann nocheinmal ein Abgleich mit der ClubCloud erfolgen. Die damit heruntergeladenen Daten sind Grundlage f\u00fcr sp\u00e4ter ausgerechnete Rankings.</p>"},{"location":"installation_overview/","title":"\ud83d\ude80 Installation \u00dcbersicht","text":""},{"location":"installation_overview/#verfugbare-installations-guides","title":"\ud83d\udccb Verf\u00fcgbare Installations-Guides","text":""},{"location":"installation_overview/#docker-installation-empfohlen","title":"\ud83d\udc33 Docker Installation (Empfohlen)","text":"<p>Docker Installation - Vollst\u00e4ndiger Guide f\u00fcr die Docker-basierte Installation von Carambus auf verschiedenen Plattformen.</p> <p>Unterst\u00fctzte Plattformen: - Raspberry Pi - F\u00fcr lokale Scoreboards und Turniere - Ubuntu Server - F\u00fcr professionelle Hosting-Umgebungen (z.B. Hetzner) - Kombinierte Installation - API-Server + Local-Server auf derselben Hardware</p> <p>Vorteile der Docker-Installation: - \u2705 Konsistente Umgebung - \u2705 Einfache Migration - \u2705 Minimaler technischer Aufwand - \u2705 Reproduzierbare Installationen - \u2705 Automatische Updates</p>"},{"location":"installation_overview/#manuelle-installation","title":"\ud83d\udd27 Manuelle Installation","text":"<p>F\u00fcr spezielle Anforderungen oder wenn Docker nicht verf\u00fcgbar ist:</p> <ul> <li>Raspberry Pi Setup - Detaillierte Anleitung f\u00fcr Pi-spezifische Installation</li> <li>Ubuntu Server Setup - Server-spezifische Konfiguration</li> <li>API Server Setup - Produktions-Server Installation</li> </ul>"},{"location":"installation_overview/#architektur-ubersicht","title":"\ud83c\udfd7\ufe0f Architektur-\u00dcbersicht","text":""},{"location":"installation_overview/#production-modi","title":"Production-Modi","text":"<ol> <li>API-Server (<code>/var/www/carambus_api</code>)</li> <li>Zentrale API f\u00fcr alle Local-Server</li> <li>Domain: newapi.carambus.de</li> <li> <p>Kann auch als Hosting-Server fungieren</p> </li> <li> <p>Local-Server (<code>/var/www/carambus</code>)</p> </li> <li>Lokale Server f\u00fcr Turniere/Clubs</li> <li>Verweist auf API-Server</li> <li>F\u00fcr Scoreboards und lokale Verwaltung</li> </ol>"},{"location":"installation_overview/#development-modus","title":"Development-Modus","text":"<ul> <li>Beide Production-Modi k\u00f6nnen parallel getestet werden</li> <li>Auf macOS-Computer mit Docker</li> <li>Inter-System-Kommunikation testbar</li> </ul>"},{"location":"installation_overview/#wichtige-konfigurationen","title":"\ud83d\udd11 Wichtige Konfigurationen","text":""},{"location":"installation_overview/#standard-account","title":"Standard-Account","text":"<ul> <li>User: <code>www-data</code> (uid=33, gid=33)</li> <li>Home-Verzeichnis: <code>/var/www</code></li> <li>SSH-Port: 8910</li> <li>Sudo: \u00dcber <code>wheel</code>-Gruppe</li> </ul>"},{"location":"installation_overview/#installationspfade","title":"Installationspfade","text":"<ul> <li>API-Server: <code>/var/www/carambus_api</code></li> <li>Local-Server: <code>/var/www/carambus</code></li> </ul>"},{"location":"installation_overview/#schnellstart","title":"\ud83d\ude80 Schnellstart","text":""},{"location":"installation_overview/#1-plattform-wahlen","title":"1. Plattform w\u00e4hlen","text":"<pre><code># Raspberry Pi\n./deploy-docker.sh carambus_raspberry www-data@192.168.178.53:8910 /var/www/carambus\n\n# Ubuntu Server\n./deploy-docker.sh carambus_newapi www-data@carambus.de:8910 /var/www/carambus_api\n</code></pre>"},{"location":"installation_overview/#2-automatische-konfiguration","title":"2. Automatische Konfiguration","text":"<p>Das Deployment-Skript konfiguriert automatisch: - Docker-Container - Datenbank (PostgreSQL) - Cache (Redis) - Web-Server (Rails + Puma) - Nginx-Konfiguration - SSL-Zertifikate (bei HTTPS)</p>"},{"location":"installation_overview/#3-lokalisierung-nur-fur-local-server","title":"3. Lokalisierung (nur f\u00fcr Local-Server)","text":"<ul> <li>Web-basierte Konfiguration</li> <li>Region-spezifische Einstellungen</li> <li>Scoreboard-Konfiguration</li> </ul>"},{"location":"installation_overview/#weitere-dokumentation","title":"\ud83d\udcd6 Weitere Dokumentation","text":"<ul> <li>Docker Installation - Vollst\u00e4ndiger Docker-Guide</li> <li>Entwicklerleitfaden - Entwicklerdokumentation</li> <li>API-Dokumentation - API-Referenz</li> </ul>"},{"location":"installation_overview/#support","title":"\ud83c\udd98 Support","text":"<p>Bei Problemen: 1. Pr\u00fcfen Sie die Docker Installation-Seite 2. Logs anschauen: <code>docker compose logs</code> 3. Container-Status: <code>docker compose ps</code> 4. System neu starten: <code>sudo reboot</code></p> <p>\ud83c\udfaf Ziel: Einfache, automatisierte Installation von Carambus auf verschiedenen Plattformen mit konsistenter Konfiguration. </p>"},{"location":"league/","title":"Ligaspieltage","text":""},{"location":"league/#-","title":"---","text":"<p>title: Verwaltung von Ligaspieltagen summary: Die Behandlung von Ligabegegnungen l\u00e4uft grundlegend verschieden verglichen mit Einzelturnieren und wird daher auch speziell unterst\u00fctzt. Die Struktur der Ligabegegnungen ist f\u00fcr die einzelnen Ligen vorgegeben und \u00e4ndert sich nicht im Laufe einer Saison. version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-05 14:34:15.052622000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-05 15:34:15.052622000 Z tags: [] metadata: {} position: 1 id: 2</p>"},{"location":"league/#verwaltung-von-ligaspieltagen","title":"Verwaltung von Ligaspieltagen","text":""},{"location":"league/#uberblick","title":"\u00dcberblick","text":"<p>Die Behandlung von Ligabegegnungen l\u00e4uft grundlegend verschieden verglichen mit Einzelturnieren und wird daher auch speziell unterst\u00fctzt. Die Struktur der Ligabegegnungen ist f\u00fcr die einzelnen Ligen vorgegeben und \u00e4ndert sich nicht im Laufe einer Saison.</p> <p>Folgende Phasen werden im allgemeinen durchlaufen:</p> <ul> <li>Planung der Spieltage und Mannschaften</li> <li>Zu Beginn eines Spieltages Festlegung der Spieler durch die Kapit\u00e4ne</li> <li>Pro Runde Festlegung der Spieltische zu den einzelnen Spielen</li> <li>Zuordnung der Spieler zu den einzelnen Spielen pro Runde</li> <li>Start der Runden und \u00dcbertragung der Daten an die Scoreboards</li> <li>Bedienung der Scoreboards</li> <li>\u00dcbergabe der Ergebnisse an den Matchday-Monitor und ggf. an \u00dcbersichtsboards</li> <li>Automatischer Abschluss einer Runde, Start einer weiteren Runde und ggf. Start eines Shootout bei Gleichstand</li> <li>\u00dcbertragung der Ergebnisse an die ClubCloud</li> </ul>"},{"location":"league/#planung-der-spieltage-und-mannschaften","title":"Planung der Spieltage und Mannschaften","text":"<p>Die Struktur der Spieltage einer Liga wird zu Saisonbegin auf DBU- oder Landesebene festgelegt und in der ClubClud formal eingetragen. Die Terminierung der einzelnen Spieltage wird ebenfalls in der ClubCloud gef\u00fchrt. Weiterhin werden die in den einzelnen Mannschaften spielberechtigten Spieler festgelegt.</p> <p>Diese Daten bilden die Grundlage f\u00fcr das Carambus Matchday Management. Der Spielleiter findet diese Daten am einfachsten \u00fcber das Spiellokal, wo alle Begegnungen aufgelistet sind.</p> <p>Nach \u00f6ffen der Spieltagansicht gibt es einen Link zum Matchday Monitor. In dessen Ansicht wird der gesammte Spieltagablauf gesteuert.</p>"},{"location":"league/#festlegung-der-spieler-eines-spieltages","title":"Festlegung der Spieler eines Spieltages","text":"<p>Carambus bietet aus den Eintragungen in der ClubCloud zur Auswahl die Spieler des entsprechenden Teams und zus\u00e4tzlich Spieler aus untergeordneten Ligen. Nach der Auswahl, ist die Menge der am Spieltag verf\u00fcgbaren Spieler unver\u00e4nderbar festgelegt.</p>"},{"location":"league/#zuordnung-der-tische","title":"Zuordnung der Tische","text":"<p>In Carambus k\u00f6nnen die in einem Spiellokal verf\u00fcgbaren Tische mit Name und Typ (Karambol gro\u00df, mittel, klein, Pool, Snooker) definiert werden. Rundenweise m\u00fcssen aus dieser Menge Tische den einzelnen Spielen zugeordnet werden.</p>"},{"location":"league/#zuordnung-der-spieler-zu-spielen","title":"Zuordnung der Spieler zu Spielen","text":"<p>Nach der Zuordnung der Tische m\u00fcssen nun die einzelnen Spielpaarungen besetzt werden. Erst wenn alle Spiele einer Runde belegt sind, kann die Runde gestartet werden.</p>"},{"location":"league/#ubertragundg-der-daten-an-die-scoreboards","title":"\u00dcbertragundg der Daten an die Scoreboards","text":"<p>Mit dem Start der Runde erscheinen an den Scoreboards die einzelnen Spielpaarungen. Nach Abschluss eines Matches bleinen die Ergebnisse solange stehen, bis die n\u00e4chste Paarung aufgerufen wird.</p>"},{"location":"league/#bedienung-der-scoreboards","title":"Bedienung der Scoreboards","text":"<p>Die Bedienung der Scoreboards erfolgt \u00fcber Touch-Eingabe. Per Undo k\u00f6nnen Eingaben beliebig zur\u00fcckgenommen werden. Das gilt auch nach Ende der Partie, solange die Partie nicht endg\u00fcltig vom Spielleiter abgeschlossen wurde.</p>"},{"location":"league/#steuerung-am-matchday-monitor","title":"Steuerung am Matchday Monitor","text":"<p>Die gesammte \u00dcberwachung der Spieltages kann am Matchday-Monitor vorgenommen werden. Die Ergebnisse werden life in der Monitoransicht aktualisiert. Am Ende muss das Ergebnis der einzelnen Paarungen best\u00e4tigt werden.</p>"},{"location":"league/#automatischer-rundenabschluss-und-start","title":"Automatischer Rundenabschluss und -start","text":"<p>Wenn alle Spiele einer Runde best\u00e4tigt sind, wird automatisch zur n\u00e4chsten Runde, bzw. ggf zum Shootout \u00fcbergegangen. Die Zwischenrgebnisse und das Endergebnis k\u00f6nnen bei Bedarf an jedem Scoreboards eingesehen werden (Start -&gt; Turniere -&gt; Turnier).</p>"},{"location":"league/#upload-in-die-clubcloud","title":"Upload in die ClubCloud","text":"<p>Zum Upload in die ClubCloud wird das Formular angeboten, genau so wie auch im Adminbereich der ClubCloud. Damit das funktioniert, ist ein Login in die ClubCloud mit demselben Browser notwendig. </p>"},{"location":"mkdocs_dokumentation/","title":"MkDocs Dokumentation f\u00fcr Carambus","text":""},{"location":"mkdocs_dokumentation/#ubersicht","title":"\u00dcbersicht","text":"<p>Das Carambus-Projekt verwendet MkDocs mit dem Material Theme und mkdocs-static-i18n Plugin f\u00fcr eine mehrsprachige, professionelle Dokumentation. Die Dokumentation wird automatisch \u00fcber GitHub Actions gebaut und als Artifact bereitgestellt.</p>"},{"location":"mkdocs_dokumentation/#architektur","title":"Architektur","text":""},{"location":"mkdocs_dokumentation/#verzeichnisstruktur","title":"\ud83d\udcc1 Verzeichnisstruktur","text":"<pre><code>carambus_api/\n\u251c\u2500\u2500 mkdocs.yml                 # Hauptkonfiguration\n\u251c\u2500\u2500 requirements.txt           # Python-Dependencies\n\u251c\u2500\u2500 pages/                     # Dokumentationsdateien\n\u2502   \u251c\u2500\u2500 index.md              # Startseite\n\u2502   \u251c\u2500\u2500 assets/               # Bilder und Medien\n\u2502   \u251c\u2500\u2500 de/                   # Deutsche Dokumentation\n\u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u251c\u2500\u2500 DEVELOPER_GUIDE.md\n\u2502   \u2502   \u251c\u2500\u2500 tournament.md\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 en/                   # Englische Dokumentation\n\u2502       \u251c\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 DEVELOPER_GUIDE.md\n\u2502       \u251c\u2500\u2500 tournament.md\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 .github/workflows/\n\u2502   \u2514\u2500\u2500 build-docs.yml        # CI/CD Workflow\n\u2514\u2500\u2500 site/                     # Gebaute Dokumentation (generiert)\n</code></pre>"},{"location":"mkdocs_dokumentation/#mehrsprachige-unterstutzung","title":"\ud83c\udf10 Mehrsprachige Unterst\u00fctzung","text":"<p>Das Projekt verwendet das mkdocs-static-i18n Plugin f\u00fcr vollst\u00e4ndige Zweisprachigkeit:</p> <ul> <li>Deutsch (de): Standardsprache, wird zuerst angezeigt</li> <li>Englisch (en): Zweitsprache, vollst\u00e4ndig \u00fcbersetzt</li> <li>Sprachumschaltung: Automatisch in der Navigation verf\u00fcgbar</li> <li>Separate Navigation: Jede Sprache hat ihre eigene Men\u00fcstruktur</li> </ul>"},{"location":"mkdocs_dokumentation/#konfiguration","title":"Konfiguration","text":""},{"location":"mkdocs_dokumentation/#theme-und-design","title":"\ud83c\udfa8 Theme und Design","text":"<pre><code>theme:\n  name: material\n  features:\n    - navigation.tabs      # Tab-Navigation\n    - search.suggest       # Suchvorschl\u00e4ge\n    - header.autohide      # Automatisches Ausblenden der Kopfzeile\n  palette:\n    - scheme: default\n      primary: indigo      # Prim\u00e4rfarbe\n    - scheme: slate        # Dark Mode\n      primary: indigo\n</code></pre>"},{"location":"mkdocs_dokumentation/#navigation","title":"\ud83d\udccb Navigation","text":"<p>Die Navigation ist f\u00fcr beide Sprachen konfiguriert:</p> <pre><code>nav:\n  - Startseite: index.md\n  - Einf\u00fchrung:\n      - \u00dcber: about.md\n      - README: README.md\n  - Benutzerhandbuch:\n      - Turnierverwaltung: tournament.md\n      - Tischreservierung: table_reservation_heating_control.md\n      - Scoreboard Setup: scoreboard_autostart_setup.md\n      - Modus-Umschaltung: mode_switcher.md\n  - Entwicklerhandbuch:\n      - Entwicklerhandbuch: DEVELOPER_GUIDE.md\n      - Datenbankdesign: database_design.md\n      - Datenbanksynchronisation: database_syncing.md\n      - Paper Trail Optimierung: paper_trail_optimization.md\n  - Admin-Handbuch:\n      - Admin-Rollen: admin_roles.md\n      - Datenverwaltung: data_management.md\n      - Filter-Popup Verwendung: filter_popup_usage.md\n  - Referenz:\n      - ER-Diagramm: er_diagram.md\n      - API: API.md\n      - AGB: terms.md\n      - Datenschutz: privacy.md\n</code></pre>"},{"location":"mkdocs_dokumentation/#plugins","title":"\ud83d\udd0c Plugins","text":"<pre><code>plugins:\n  - search                    # Volltextsuche\n  - i18n:                     # Mehrsprachigkeit\n      languages:\n        - locale: de\n          name: Deutsch\n          default: true\n          build: true\n        - locale: en\n          name: English\n          build: true\n      reconfigure_material: true\n      docs_structure: folder\n</code></pre>"},{"location":"mkdocs_dokumentation/#markdown-erweiterungen","title":"\ud83d\udcdd Markdown-Erweiterungen","text":"<pre><code>markdown_extensions:\n  - pymdownx.highlight        # Syntax-Highlighting\n  - pymdownx.superfences      # Code-Bl\u00f6cke und ER-Diagramme\n  - toc:                      # Inhaltsverzeichnis\n      permalink: true\n  - admonition                # Warnungen und Hinweise\n  - attr_list                 # Attribute f\u00fcr Bilder\n  - md_in_html                # HTML in Markdown\n</code></pre>"},{"location":"mkdocs_dokumentation/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"mkdocs_dokumentation/#github-actions-workflow","title":"\ud83d\ude80 GitHub Actions Workflow","text":"<pre><code>name: Build Documentation\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build documentation\n        run: mkdocs build\n\n      - name: Upload documentation artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: documentation-build\n          path: ./site\n          retention-days: 30\n</code></pre>"},{"location":"mkdocs_dokumentation/#dependencies","title":"\ud83d\udce6 Dependencies","text":"<pre><code>mkdocs-material&gt;=9.5.0        # Material Theme\nmkdocs-static-i18n&gt;=1.0.0     # Mehrsprachigkeit\npymdown-extensions&gt;=10.0.0    # Markdown-Erweiterungen\n</code></pre>"},{"location":"mkdocs_dokumentation/#lokale-entwicklung","title":"Lokale Entwicklung","text":""},{"location":"mkdocs_dokumentation/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<pre><code># Python-Umgebung aktivieren\ncd carambus_api\n\n# Dependencies installieren\npip install -r requirements.txt\n\n# Dokumentation lokal starten\nmkdocs serve\n\n# Dokumentation bauen\nmkdocs build\n</code></pre>"},{"location":"mkdocs_dokumentation/#lokaler-server","title":"\ud83c\udf10 Lokaler Server","text":"<ul> <li>URL: <code>http://127.0.0.1:8000/carambus-docs/</code></li> <li>Live-Reload: Automatische Aktualisierung bei \u00c4nderungen</li> <li>Sprachumschaltung: Verf\u00fcgbar in der Navigation</li> </ul>"},{"location":"mkdocs_dokumentation/#neue-dokumentation-hinzufugen","title":"\ud83d\udcc1 Neue Dokumentation hinzuf\u00fcgen","text":"<ol> <li>Datei erstellen: <code>pages/de/neue_seite.md</code></li> <li>Navigation erweitern: In <code>mkdocs.yml</code> hinzuf\u00fcgen</li> <li>Englische \u00dcbersetzung: <code>pages/en/neue_seite.md</code> erstellen</li> <li>Testen: <code>mkdocs serve</code> ausf\u00fchren</li> </ol>"},{"location":"mkdocs_dokumentation/#features","title":"Features","text":""},{"location":"mkdocs_dokumentation/#suche","title":"\ud83d\udd0d Suche","text":"<ul> <li>Volltextsuche in beiden Sprachen</li> <li>Suchvorschl\u00e4ge w\u00e4hrend der Eingabe</li> <li>Sprachspezifische Suchergebnisse</li> </ul>"},{"location":"mkdocs_dokumentation/#responsive-design","title":"\ud83d\udcf1 Responsive Design","text":"<ul> <li>Mobile-optimiert durch Material Theme</li> <li>Touch-freundlich f\u00fcr Tablets und Smartphones</li> <li>Dark Mode Unterst\u00fctzung</li> </ul>"},{"location":"mkdocs_dokumentation/#customization","title":"\ud83c\udfa8 Customization","text":"<ul> <li>Indigo als Prim\u00e4rfarbe</li> <li>Carambus-Branding integriert</li> <li>Professionelles Design</li> </ul>"},{"location":"mkdocs_dokumentation/#er-diagramme","title":"\ud83d\udcca ER-Diagramme","text":"<ul> <li>Mermaid Integration f\u00fcr ER-Diagramme</li> <li>Interaktive Diagramme</li> <li>Responsive Darstellung</li> </ul>"},{"location":"mkdocs_dokumentation/#deployment","title":"Deployment","text":""},{"location":"mkdocs_dokumentation/#github-actions","title":"\ud83d\ude80 GitHub Actions","text":"<ul> <li>Automatischer Build bei jedem Push</li> <li>Artifact-Upload f\u00fcr Download</li> <li>30 Tage Retention f\u00fcr Artifacts</li> </ul>"},{"location":"mkdocs_dokumentation/#artifact-download","title":"\ud83d\udce5 Artifact-Download","text":"<ol> <li>GitHub Actions \u00f6ffnen: <code>https://github.com/GernotUllrich/carambus/actions</code></li> <li>\"Build Documentation\" Workflow ausw\u00e4hlen</li> <li>\"documentation-build\" Artifact herunterladen</li> <li>Entpacken und auf Webserver deployen</li> </ol>"},{"location":"mkdocs_dokumentation/#github-pages-optional","title":"\ud83c\udf10 GitHub Pages (Optional)","text":"<p>F\u00fcr automatisches Online-Deployment:</p> <ol> <li>GitHub Pages in Repository-Einstellungen aktivieren</li> <li>Source: <code>gh-pages</code> Branch oder <code>/docs</code> Ordner</li> <li>Workflow erweitern um GitHub Pages Deployment</li> </ol>"},{"location":"mkdocs_dokumentation/#best-practices","title":"Best Practices","text":""},{"location":"mkdocs_dokumentation/#dokumentation-schreiben","title":"\ud83d\udcdd Dokumentation schreiben","text":"<ul> <li>Klare Struktur mit \u00dcberschriften</li> <li>Code-Beispiele mit Syntax-Highlighting</li> <li>Bilder in <code>pages/assets/</code> speichern</li> <li>Links zwischen verwandten Seiten</li> </ul>"},{"location":"mkdocs_dokumentation/#links-und-navigation","title":"\ud83d\udd17 Links und Navigation","text":"<ul> <li>Relative Links verwenden: <code>[Text](datei.md)</code></li> <li>Anker-Links f\u00fcr Abschnitte: <code>[Text](datei.md#abschnitt)</code></li> <li>Externe Links mit vollst\u00e4ndiger URL</li> </ul>"},{"location":"mkdocs_dokumentation/#bilder-und-medien","title":"\ud83d\uddbc\ufe0f Bilder und Medien","text":"<pre><code>![Alt-Text](assets/bild.png){width=\"100%\"}\n![Alt-Text](assets/bild.png){: .center width=\"50%\"}\n</code></pre>"},{"location":"mkdocs_dokumentation/#warnungen-und-hinweise","title":"\u26a0\ufe0f Warnungen und Hinweise","text":"<pre><code>!!! warning \"Wichtiger Hinweis\"\n    Hier steht der wichtige Text.\n\n!!! info \"Information\"\n    Hier steht eine Information.\n\n!!! tip \"Tipp\"\n    Hier steht ein n\u00fctzlicher Tipp.\n</code></pre>"},{"location":"mkdocs_dokumentation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mkdocs_dokumentation/#haufige-probleme","title":"\ud83d\udd27 H\u00e4ufige Probleme","text":""},{"location":"mkdocs_dokumentation/#port-bereits-belegt","title":"Port bereits belegt","text":"<pre><code># Anderen Port verwenden\nmkdocs serve --dev-addr=127.0.0.1:8001\n</code></pre>"},{"location":"mkdocs_dokumentation/#fehlende-dependencies","title":"Fehlende Dependencies","text":"<pre><code># Dependencies neu installieren\npip install -r requirements.txt --upgrade\n</code></pre>"},{"location":"mkdocs_dokumentation/#build-fehler","title":"Build-Fehler","text":"<pre><code># Validierung der Konfiguration\nmkdocs build --strict\n</code></pre>"},{"location":"mkdocs_dokumentation/#debugging","title":"\ud83d\udccb Debugging","text":"<ul> <li>Logs pr\u00fcfen: Detaillierte Ausgabe bei Build-Fehlern</li> <li>Konfiguration validieren: <code>mkdocs build --strict</code></li> <li>Dependencies checken: <code>pip list | grep mkdocs</code></li> </ul>"},{"location":"mkdocs_dokumentation/#fazit","title":"Fazit","text":"<p>Die MkDocs-Integration bietet eine professionelle, mehrsprachige Dokumentation mit:</p> <ul> <li>\u2705 Automatischem CI/CD \u00fcber GitHub Actions</li> <li>\u2705 Vollst\u00e4ndiger Zweisprachigkeit (DE/EN)</li> <li>\u2705 Responsive Design f\u00fcr alle Ger\u00e4te</li> <li>\u2705 Professionellem Material Theme</li> <li>\u2705 Einfacher Wartung und Erweiterung</li> </ul> <p>Die Dokumentation ist ein wichtiger Bestandteil des Carambus-Projekts und wird kontinuierlich gepflegt und erweitert. </p>"},{"location":"mode_switcher/","title":"Carambus Mode Switcher","text":"<p>Der Carambus Mode Switcher erm\u00f6glicht es Ihnen, einfach zwischen LOCAL und API Modi zu wechseln, indem Sie einen einzigen Entwicklungsordner verwenden, wodurch die Notwendigkeit entf\u00e4llt, zwei separate Ordner zu verwalten.</p>"},{"location":"mode_switcher/#ubersicht","title":"\ud83c\udfaf \u00dcbersicht","text":"<p>Anstatt separate <code>carambus</code> und <code>carambus_api</code> Ordner zu haben, k\u00f6nnen Sie jetzt einen einzigen Ordner mit einem Mode Switcher verwenden, der automatisch die notwendigen Konfigurationsdateien mit ERB-Templates aktualisiert.</p>"},{"location":"mode_switcher/#modus-unterschiede","title":"\ud83d\udd04 Modus-Unterschiede","text":""},{"location":"mode_switcher/#local-modus","title":"LOCAL Modus","text":"<ul> <li>carambus_api_url: <code>https://newapi.carambus.de/</code></li> <li>Datenbank: <code>carambus_development</code></li> <li>Deploy Server: Lokaler Testserver (<code>192.168.178.81</code>)</li> <li>Deploy Basename: <code>carambus</code></li> <li>Log-Datei: <code>development-local.log</code> (symbolischer Link)</li> <li>Server Port: 3001</li> <li>Umgebung: <code>development-local</code></li> <li>Kontext: <code>NBV</code></li> <li>Zweck: Testen der <code>local_server?</code> Funktionalit\u00e4t</li> </ul>"},{"location":"mode_switcher/#api-modus","title":"API Modus","text":"<ul> <li>carambus_api_url: Leer (nil)</li> <li>Datenbank: <code>carambus_api_development</code></li> <li>Deploy Server: Produktionsserver (<code>carambus.de</code>)</li> <li>Deploy Basename: <code>carambus_api</code></li> <li>Log-Datei: <code>development-api.log</code> (symbolischer Link)</li> <li>Server Port: 3000</li> <li>Umgebung: <code>development-api</code></li> <li>Kontext: Leer (nil)</li> <li>Zweck: Normale API-Entwicklung</li> </ul>"},{"location":"mode_switcher/#verwendung","title":"\ud83d\ude80 Verwendung","text":""},{"location":"mode_switcher/#rake-tasks-primare-methode","title":"Rake Tasks (Prim\u00e4re Methode)","text":"<pre><code># Wechseln zu LOCAL Modus\nbundle exec rails mode:local\n\n# Wechseln zu API Modus\nbundle exec rails mode:api\n\n# Aktuellen Modus pr\u00fcfen\nbundle exec rails mode:status\n\n# Backup erstellen\nbundle exec rails mode:backup\n</code></pre>"},{"location":"mode_switcher/#manueller-server-start","title":"Manueller Server-Start","text":"<pre><code># LOCAL Modus Server\nbundle exec rails server -p 3001 -e development-local\n\n# API Modus Server\nbundle exec rails server -p 3000 -e development-api\n\n# LOCAL Modus Konsole\nbundle exec rails console -e development-local\n\n# API Modus Konsole\nbundle exec rails console -e development-api\n</code></pre>"},{"location":"mode_switcher/#geanderte-dateien","title":"\ud83d\udcc1 Ge\u00e4nderte Dateien","text":"<p>Der Mode Switcher verwendet ERB-Templates, um diese Konfigurationsdateien zu generieren:</p> <ol> <li><code>config/carambus.yml</code> (generiert aus <code>config/carambus.yml.erb</code>)</li> <li><code>carambus_api_url</code> Wert</li> <li><code>context</code> Wert</li> <li><code>basename</code> Wert</li> <li><code>carambus_domain</code> Wert</li> <li><code>location_id</code> Wert</li> <li><code>application_name</code> Wert</li> <li> <p><code>club_id</code> Wert</p> </li> <li> <p><code>config/database.yml</code> (generiert aus <code>config/database.yml.erb</code>)</p> </li> <li> <p>Entwicklungsdatenbank-Name</p> </li> <li> <p><code>config/deploy.rb</code> (generiert aus <code>config/deploy.rb.erb</code>)</p> </li> <li> <p>Deploy Basename (behebt Ordner-Namen-Abh\u00e4ngigkeit)</p> </li> <li> <p><code>log/development.log</code></p> </li> <li>Symbolischer Link zu modus-spezifischer Log-Datei</li> <li><code>development-local.log</code> f\u00fcr LOCAL Modus</li> <li><code>development-api.log</code> f\u00fcr API Modus</li> </ol>"},{"location":"mode_switcher/#sicherheitsfunktionen","title":"\ud83d\udee1\ufe0f Sicherheitsfunktionen","text":""},{"location":"mode_switcher/#automatische-backups","title":"Automatische Backups","text":"<ul> <li>Erstellt zeitstempel-basierte Backups vor dem Modus-Wechsel</li> <li>Backups werden in <code>tmp/mode_backups/</code> gespeichert</li> <li>Einfache Wiederherstellung bei Bedarf</li> </ul>"},{"location":"mode_switcher/#status-prufung","title":"Status-Pr\u00fcfung","text":"<ul> <li>Zeigt aktuelle Konfiguration vor dem Wechsel</li> <li>Zeigt Modus-Unterschiede klar an</li> <li>Validiert Konfigurationsdateien</li> </ul>"},{"location":"mode_switcher/#template-validierung","title":"Template-Validierung","text":"<ul> <li>Pr\u00fcft auf erforderliche ERB-Template-Dateien</li> <li>Gibt klare Fehlermeldungen aus, wenn Templates fehlen</li> <li>Stellt ordnungsgem\u00e4\u00dfe Template-Substitution sicher</li> </ul>"},{"location":"mode_switcher/#visuelle-indikatoren","title":"\ud83c\udfa8 Visuelle Indikatoren","text":""},{"location":"mode_switcher/#mode-helper","title":"Mode Helper","text":"<p>Verwenden Sie den <code>ModeHelper</code> in Ihren Views, um den aktuellen Modus anzuzeigen:</p> <pre><code>&lt;!-- Einfacher Modus-Badge --&gt;\n&lt;%= render_mode_indicator %&gt;\n\n&lt;!-- Modus-Badge mit Tooltip --&gt;\n&lt;%= render_mode_tooltip %&gt;\n</code></pre>"},{"location":"mode_switcher/#verfugbare-methoden","title":"Verf\u00fcgbare Methoden","text":"<ul> <li><code>current_mode</code> - Gibt 'LOCAL' oder 'API' zur\u00fcck</li> <li><code>mode_badge_class</code> - CSS-Klassen f\u00fcr Styling</li> <li><code>mode_icon</code> - Emoji-Icon (\ud83c\udfe0 f\u00fcr LOCAL, \ud83c\udf10 f\u00fcr API)</li> <li><code>mode_description</code> - Menschenlesbare Beschreibung</li> </ul>"},{"location":"mode_switcher/#konfiguration","title":"\ud83d\udd27 Konfiguration","text":""},{"location":"mode_switcher/#erb-templates","title":"ERB-Templates","text":"<p>Der Mode Switcher verwendet diese ERB-Template-Dateien:</p> <ul> <li><code>config/carambus.yml.erb</code> - Hauptkonfigurations-Template</li> <li><code>config/database.yml.erb</code> - Datenbank-Konfigurations-Template  </li> <li><code>config/deploy.rb.erb</code> - Deployment-Konfigurations-Template</li> </ul>"},{"location":"mode_switcher/#template-variablen","title":"Template-Variablen","text":"<p>Die Templates verwenden diese Variablen, die w\u00e4hrend des Modus-Wechsels ersetzt werden:</p> <ul> <li><code>&lt;%= carambus_api_url %&gt;</code> - API-URL f\u00fcr den Modus</li> <li><code>&lt;%= database %&gt;</code> - Datenbank-Name f\u00fcr den Modus</li> <li><code>&lt;%= basename %&gt;</code> - Deploy Basename f\u00fcr den Modus</li> <li><code>&lt;%= context %&gt;</code> - Kontext-Identifier f\u00fcr den Modus</li> <li><code>&lt;%= carambus_domain %&gt;</code> - Domain f\u00fcr den Modus</li> <li><code>&lt;%= location_id %&gt;</code> - Location-ID f\u00fcr den Modus</li> <li><code>&lt;%= application_name %&gt;</code> - Anwendungsname</li> <li><code>&lt;%= club_id %&gt;</code> - Club-ID f\u00fcr den Modus</li> </ul>"},{"location":"mode_switcher/#workflow-beispiele","title":"\ud83d\udccb Workflow-Beispiele","text":""},{"location":"mode_switcher/#testen-der-local-server-funktionalitat","title":"Testen der Local Server Funktionalit\u00e4t","text":"<pre><code># Wechseln zu LOCAL Modus\nbundle exec rails mode:local\n\n# LOCAL Server starten\nbundle exec rails server -p 3001 -e development-local\n\n# local_server? Funktionalit\u00e4t testen\n# Die Anwendung verh\u00e4lt sich jetzt so, als w\u00fcrde sie lokal laufen\n</code></pre>"},{"location":"mode_switcher/#normale-api-entwicklung","title":"Normale API-Entwicklung","text":"<pre><code># Wechseln zu API Modus\nbundle exec rails mode:api\n\n# API Server starten\nbundle exec rails server -p 3000 -e development-api\n\n# Normale API-Entwicklung mit Produktions-API-Verbindung\n</code></pre>"},{"location":"mode_switcher/#beide-umgebungen-gleichzeitig-ausfuhren","title":"Beide Umgebungen gleichzeitig ausf\u00fchren","text":"<pre><code># Terminal 1: LOCAL Server starten\nbundle exec rails mode:local\nbundle exec rails server -p 3001 -e development-local\n\n# Terminal 2: API Server starten\nbundle exec rails mode:api\nbundle exec rails server -p 3000 -e development-api\n\n# Sie k\u00f6nnen jetzt beide Umgebungen nebeneinander testen!\n</code></pre>"},{"location":"mode_switcher/#schnelle-modus-prufung","title":"Schnelle Modus-Pr\u00fcfung","text":"<pre><code># Aktuellen Modus vor \u00c4nderungen pr\u00fcfen\nbundle exec rails mode:status\n\n# Ausgabe-Beispiel:\n# Current Configuration:\n#   API URL: https://newapi.carambus.de/\n#   Context: NBV\n#   Database: carambus_development\n#   Deploy Basename: carambus\n#   Log File: development-local.log\n# Current Mode: LOCAL\n</code></pre>"},{"location":"mode_switcher/#wichtige-hinweise","title":"\ud83d\udea8 Wichtige Hinweise","text":"<ol> <li> <p>Datenbank-Erstellung: Sie m\u00fcssen beide Datenbanken erstellen:    <pre><code>bundle exec rails db:create RAILS_ENV=development\n# Dann Modi wechseln und die andere Datenbank erstellen\n</code></pre></p> </li> <li> <p>ERB-Templates: Stellen Sie sicher, dass alle erforderlichen ERB-Template-Dateien existieren:</p> </li> <li><code>config/carambus.yml.erb</code></li> <li><code>config/database.yml.erb</code></li> <li> <p><code>config/deploy.rb.erb</code></p> </li> <li> <p>Umgebungsvariablen: Der Mode Switcher bewahrt Ihre bestehende Umgebungsvariablen-Konfiguration.</p> </li> <li> <p>Git-Integration: Konfigurations\u00e4nderungen werden nicht automatisch committed. Committen Sie Modus-\u00c4nderungen bei Bedarf.</p> </li> <li> <p>Backup-Wiederherstellung: Um von einem Backup wiederherzustellen:    <pre><code>cp tmp/mode_backups/config_backup_TIMESTAMP/* config/\n</code></pre></p> </li> </ol>"},{"location":"mode_switcher/#fehlerbehebung","title":"\ud83d\udd0d Fehlerbehebung","text":""},{"location":"mode_switcher/#haufige-probleme","title":"H\u00e4ufige Probleme","text":"<ol> <li> <p>Fehlende ERB-Templates: Stellen Sie sicher, dass alle Template-Dateien existieren:    <pre><code>ls -la config/*.erb\n</code></pre></p> </li> <li> <p>Datenbank-Verbindungsfehler: Stellen Sie sicher, dass beide Datenbanken existieren:    <pre><code>bundle exec rails db:create RAILS_ENV=development\n</code></pre></p> </li> <li> <p>Konfiguration nicht aktualisiert: Pr\u00fcfen Sie Dateiberechtigungen und versuchen Sie bei Bedarf <code>sudo</code>.</p> </li> <li> <p>Template-Substitutionsfehler: \u00dcberpr\u00fcfen Sie die ERB-Syntax in Template-Dateien.</p> </li> </ol>"},{"location":"mode_switcher/#verifikation","title":"Verifikation","text":"<p>Nach dem Modus-Wechsel die \u00c4nderungen verifizieren:</p> <pre><code># carambus.yml pr\u00fcfen\ngrep -A 5 \"development:\" config/carambus.yml\n\n# database.yml pr\u00fcfen\ngrep -A 3 \"development:\" config/database.yml\n\n# deploy.rb basename pr\u00fcfen\ngrep \"set :basename,\" config/deploy.rb\n\n# Log-Datei-Link pr\u00fcfen\nls -la log/development.log\n</code></pre>"},{"location":"mode_switcher/#template-debugging","title":"Template-Debugging","text":"<p>Um Template-Probleme zu debuggen:</p> <pre><code># Template-Inhalt pr\u00fcfen\ncat config/carambus.yml.erb\ncat config/database.yml.erb\ncat config/deploy.rb.erb\n\n# \u00dcberpr\u00fcfen, ob Template-Variablen korrekt formatiert sind\ngrep -n \"&lt;%=\" config/*.erb\n</code></pre> <p>Dieser erweiterte Mode Switcher verwendet ERB-Templates f\u00fcr bessere Wartbarkeit und eliminiert die Komplexit\u00e4t der Verwaltung von zwei separaten Entwicklungsordnern, w\u00e4hrend eine klare Trennung zwischen lokalen Tests und API-Entwicklungsmodi beibehalten wird. </p>"},{"location":"table_reservation_heating_control/","title":"Tischreservierung","text":""},{"location":"table_reservation_heating_control/#-","title":"---","text":"<p>title: Tischreservierung und Heizungssteuerung summary: Automatisierte Tischreservierung \u00fcber Google Calendar und intelligente Heizungssteuerung basierend auf Scoreboard-Aktivit\u00e4ten version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-01-27 10:00:00.000000000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-01-27 11:00:00.000000000 Z tags: [reservierung, heizung, automatisation, google-calendar] metadata: {} position: 0 id: 100</p>"},{"location":"table_reservation_heating_control/#tischreservierung-und-heizungssteuerung","title":"Tischreservierung und Heizungssteuerung","text":"<p>BC Wedel, Gernot, 7. Mai 2024</p>"},{"location":"table_reservation_heating_control/#1-tischreservierung","title":"1. Tischreservierung","text":""},{"location":"table_reservation_heating_control/#zugang-zum-google-calendar","title":"Zugang zum Google Calendar","text":"<p>Tischreservierungen k\u00f6nnen ab sofort von berechtigten Mitgliedern im zentralen Google Calendar \"BC Wedel\" vorgenommen werden.</p> <p>Zugangslinks erhalten Sie durch eine formlose E-Mail an: - gernot.ullrich@gmx.de - wcauel@gmail.com</p>"},{"location":"table_reservation_heating_control/#wichtige-formatierung-fur-carambus-auswertung","title":"Wichtige Formatierung f\u00fcr Carambus-Auswertung","text":"<p>Der Titel der Reservierung muss einem spezifischen Format folgen, damit Carambus die Reservierung korrekt auswerten kann.</p>"},{"location":"table_reservation_heating_control/#gultige-reservierungstitel-beispiele","title":"G\u00fcltige Reservierungstitel-Beispiele:","text":"<ul> <li>\"T6 Gernot + Lothar\" - Einzelne Tischreservierung</li> <li>\"T1, T4-T8 Clubabend\" - Mehrere Tische f\u00fcr Clubabend</li> <li>\"T5, T7 NDM Cadre 35/2 Klasse 5-6\" - Turnierreservierung (Cadre wird rot hervorgehoben)</li> </ul>"},{"location":"table_reservation_heating_control/#formatierungsregeln","title":"Formatierungsregeln:","text":"<ul> <li>Tischnummern: Verwenden Sie \"T\" gefolgt von der Tischnummer (z.B. T1, T6)</li> <li>Mehrere Tische: Trennen Sie mit Komma (T1, T4) oder Bereich (T4-T8)</li> <li>Beschreibung: F\u00fcgen Sie nach den Tischnummern eine Beschreibung hinzu</li> <li>Turniere: Verwenden Sie spezielle Schl\u00fcsselw\u00f6rter wie \"Cadre\" f\u00fcr automatische Erkennung</li> </ul>"},{"location":"table_reservation_heating_control/#2-heizungssteuerung","title":"2. Heizungssteuerung","text":""},{"location":"table_reservation_heating_control/#automatisierte-steuerung","title":"Automatisierte Steuerung","text":"<p>Die Tischheizungen werden automatisch basierend auf Kalendereintr\u00e4gen und Scoreboard-Aktivit\u00e4ten geschaltet.</p>"},{"location":"table_reservation_heating_control/#heizung-ein-an","title":"Heizung EIN (AN)","text":"<p>Die Heizung wird automatisch eingeschaltet:</p> <ol> <li>2 Stunden vor einer Reservierung - Basierend auf Google Calendar Eintr\u00e4gen</li> <li>Sp\u00e4testens 5 Minuten vor Beginn - Wenn ein Spiel auf dem Scoreboard erkannt wird</li> </ol>"},{"location":"table_reservation_heating_control/#heizung-aus-aus","title":"Heizung AUS (AUS)","text":"<p>Die Heizung wird automatisch ausgeschaltet:</p> <ol> <li>Nach 1 Stunde ohne Scoreboard-Aktivit\u00e4t - Wenn die Reservierung bereits begonnen hat</li> <li>Nach 1 Stunde ohne Aktivit\u00e4t - Wenn keine Reservierung l\u00e4uft und keine Scoreboard-Aktivit\u00e4t erkannt wird</li> </ol>"},{"location":"table_reservation_heating_control/#technische-details","title":"Technische Details","text":"<ul> <li>Scoreboard-Integration: Das System \u00fcberwacht kontinuierlich die Aktivit\u00e4ten auf dem Carambus Scoreboard</li> <li>Kalender-Integration: Google Calendar Eintr\u00e4ge werden automatisch ausgelesen und verarbeitet</li> <li>Intelligente Logik: Das System ber\u00fccksichtigt sowohl geplante Reservierungen als auch spontane Aktivit\u00e4ten</li> </ul>"},{"location":"table_reservation_heating_control/#vorteile-der-automatisierten-steuerung","title":"Vorteile der automatisierten Steuerung","text":"<ul> <li>Energieeffizienz: Heizungen werden nur bei Bedarf eingeschaltet</li> <li>Komfort: Automatische Vorheizung vor Reservierungen</li> <li>Kosteneinsparung: Vermeidung unn\u00f6tiger Heizkosten bei ungenutzten Tischen</li> <li>Benutzerfreundlichkeit: Keine manuelle Bedienung der Heizungen erforderlich</li> </ul> <p>Diese Dokumentation beschreibt die Integration von Google Calendar Reservierungen mit der Carambus Scoreboard-Technologie f\u00fcr eine vollautomatisierte Tisch- und Heizungsverwaltung im BC Wedel. </p>"},{"location":"terms/","title":"AGB","text":""},{"location":"terms/#-","title":"---","text":"<p>title: Terms summary: version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-05 22:15:15.285055000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-05 23:15:15.285055000 Z tags: [] metadata: {} position: 0 id: 4</p> <p>Diese Webanwendung hat im wesentlichen zwei Schnittstellen:</p> <ul> <li>Turnierpl\u00e4ne und Ergebnisse aus der Website billardarea.de (BA), bzw. seit 2022 aus den verschiedenen regionalen ClubCloud-Instanzen.</li> <li>die Anzeigetafeln an den Tischen.</li> </ul> <p>Nachdem die Turnierdaten und Setzlisten von der ClubCloud abgegriffen sind arbeitet Carambus selbst\u00e4ndig, wobei der gew\u00e4hlte Turniermodus mit den Anzeigetafeln abgeglichen wird. Ohne weitere Eingriffe durch den Turnier-Manager wird durch die Eingaben an den Anzeigetafeln der Turnierablauf gesteuert gem\u00e4ss dem gew\u00e4hlten Turniermodus abgewickelt.</p> <p>Aus Sicherheitsgr\u00fcnden (no waranty here! ;-) ) sollte sich das Turnier-Management nicht allein auf die Eingaben an den Anzeigetafeln st\u00fctzen.  Eine parallele Erfassung der Spielergebnisse auf den. vorgegebenen Spielprotokollformularen sollte manuell durchgef\u00fchrt werden.</p>"},{"location":"tournament/","title":"Turnierverwaltung","text":""},{"location":"tournament/#-","title":"---","text":"<p>title: Turnierverwaltung summary: version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-07 22:00:25.243335000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-07 23:00:25.243335000 Z tags: [] metadata: {} position: 0 id: 50000002</p>"},{"location":"tournament/#turnierverwaltung","title":"Turnierverwaltung","text":""},{"location":"tournament/#account","title":"Account","text":"<p>F\u00fcr das Carambus Turniermanagement ist ein Account mit Admin-Rechten auf dem Carambus Location Server erforderlich. Dieser kann vom Club-Vorsitzenden oder Carambus-Entwickler eingerichtet werden. URL ist aus den URLs der Scoreboards ableitbar, z.B. in Wedel http://192.168.2.143:3131 .</p>"},{"location":"tournament/#abgleich-mit-der-clubcloud","title":"Abgleich mit der ClubCloud","text":"<p>Die Turniere findet man am besten \u00fcber die <code>Regionaverb\u00e4nde -&gt; Suchen -&gt; Ansehen</code>.</p> <p>Dort sind die aktuell bekannten Turniere der laufenden Saison gelistet. Das Turnier kann \u00fcber den Titel  ausgew\u00e4hlt werden. Sollte ein Turnier noch nicht gelistet sein, so kann das mehrere Gr\u00fcnde haben:</p> <ul> <li>Das Turnier ist noch nicht in der ClubCloud eingetragen</li> <li>Der zentrale Carambus API Server kennt das Turnier noch nicht.</li> <li>Das Turnier ist noch nicht auf den lokalen Location Server \u00fcbertragen.</li> </ul>"},{"location":"tournament/#das-turnier-ist-noch-nicht-in-der-clubcloud-eingetragen","title":"Das Turnier ist noch nicht in der ClubCloud eingetragen","text":"<p>Aufgabe des Landessportwartes ist es, die Turniere mit den Teilnehmerlisten in der ClubCloud einzupflegen.</p>"},{"location":"tournament/#der-zentrale-carambus-api-server-kennt-das-turnier-noch-nicht","title":"Der zentrale Carambus API Server kennt das Turnier noch nicht.","text":"<p>Der Api Server wird derzeit vom Carambus-Entwickler (mailto: gernot.ullrich@gmx.de) betreut. Turnierdaten der Carambus nutzenden Regionen werden automatisiert t\u00e4glich um 20:00 aus dem zugeh\u00f6rigen regionalen ClubCloud Server aktualisiert.</p> <p>Lokale Server fordern Updates aus der ClubCloud immer \u00fcber den zentralen API Server (api.carambus.de) an. Dieser greift die Daten von den verschiedenen ClubCloud Instanzen ab.  Mit den spezifischen Updates werden immer auch alle Updates \u00fcbertragen, die zwischenzeitlich auf dem API Server gemacht wurden.</p>"},{"location":"tournament/#das-turnier-ist-noch-nicht-auf-den-lokalen-location-server-ubertragen","title":"Das Turnier ist noch nicht auf den lokalen Location Server \u00fcbertragen","text":"<p>Ein lokal nicht vorhandenes Turnier, welches aber auf dem API Server existiert, wird automatisch bei jeder Update-Anfrage an den API Server geladen, denn bei jeder Anfrage an den API Server wird der gesammte Datenbestand synchronisiert. So eine explizite Anfrage kann z.B. das Aktualisieren der Club-Daten sein: <code>Clubs -&gt; Suchen -&gt; Ansehen -&gt; \"Datenabgleich mit der ClubCloud mit allen Details\"</code></p>"},{"location":"tournament/#aktualisieren-von-regionalverband-club-spieler-turnier-setzlisten","title":"Aktualisieren von Regionalverband, Club, Spieler, Turnier, Setzlisten","text":"<p>Beim expliziten Abholen von Daten werden auf dem API Server die angeforderten Daten mit der Billars Area abggeglichen.</p> <p>Folgenden explizte Datenanfragen sind implementiert:</p> <ul> <li><code>Club -&gt; Datenabgleich mit der ClubCloud</code></li> <li><code>Club -&gt; Datenabgleich mit der ClubCloud mit allen Details</code></li> <li><code>Regionalverband -&gt; Datenabgleich mit der ClubCloud inkl. Clubs</code></li> <li><code>Regionalverband -&gt; Datenabgleich mit der ClubCloud inkl. Clubs und Spieler</code></li> <li><code>Turnier -&gt; Datenabgleich mit der ClubCloud</code></li> </ul>"},{"location":"tournament/#turnierverwaltung_1","title":"TurnierVerwaltung","text":"<p>Ein Turnier wird generell in folgenden Phasen verwaltet:</p> <ul> <li>Abgleich mit der ClubCloud</li> <li>\u00dcberpr\u00fcfung der relevanten Daten</li> <li>Sortierung der Setzliste gem\u00e4ss Rankings</li> <li>Auswahl des Turniermodus</li> <li>Lokale Anpassung der Turnierparameter</li> <li>Check der lokalen Scoreboards</li> <li>Start des Turniers</li> <li>Abgleich der Partieergebnisse mit den Spielprotokollen</li> <li>eMail mit den Spielergebnissen (csv) an den Turnierleiter</li> <li>Upload der Spielergebnisse (csv) in die ClubCloud</li> <li>Abgleich mit der ClubCloud zum letzten Check.</li> </ul>"},{"location":"tournament/#abgleich-mit-der-clubcloud_1","title":"Abgleich mit der ClubCloud","text":"<p>Wie oben beschrieben kann das Turnier erstmalig geladen werden z.B. durch Abgleich der Clubdaten</p> <p>Wenn ein Turnier bereits lokal bekannt ist, kann jederzeit eine Aktualisierung erneut angefordert werden: <code>Region -&gt; Turnier -&gt; Datenabgleich mit der ClubCloud</code></p>"},{"location":"tournament/#uberprufung-der-relevanten-daten","title":"\u00dcberpr\u00fcfung der relevanten Daten","text":"<p>F\u00fcr den Ablauf eines Turnieres sind folgende Daten wichtig:</p> <ul> <li>Veranstalter (Regionalverband oder Club)</li> <li>Disziplin (f\u00fcr die Tischzuordnungen)</li> <li>Datum</li> <li>Saison</li> <li>Spielort (f\u00fcr die Tischzuordnungen)</li> </ul> <p>Diese Daten werden in der Regel automatisiert von der ClubCloud gezogen. Ein Sonderfall ist der Spielort. Leider ist bezgl. des Spielortes auf der ClubCloud eine freie Texteingaben m\u00f6glich. F\u00fcr die Tischzuordnung ist in Carambus jedoch die Auswahl eines formal definierten Spielortes mit Konfigurierung der Tische notwendig (Tischnahme, Tischart) Weiterhin ist anzugeben, ob es sich um ein Vorgabetournier handelt.</p> <p>Diese Daten m\u00fcssen \u00fcber <code>Turnier -&gt; Edit -&gt; Turnier aktualisieren</code> erg\u00e4nzt werden</p>"},{"location":"tournament/#sortierung-der-setzliste-gemass-rankings","title":"Sortierung der Setzliste gem\u00e4ss Rankings","text":"<p>Mit dem BA-Abgleich wird die Teilnehmerliste (Setzliste) \u00fcbertragen.</p> <p>F\u00fcr Vorgabeturniere k\u00f6nnen die Handicaps eingetragen werden: <code>Tournament -&gt; Setzliste aktualisieren</code> Diese Liste kann jetzt lokal entsprechend der Spielerrankings sortiert werden: <code>Tournament -&gt; Ordne nach Rangliste bzw. Handicap</code></p> <p>Die Reihenfolge kann jetzt noch ge\u00e4ndert werden durch Tausch von Pl\u00e4tzen mit den Pfeilen oben/unten.</p> <p>Die Reihenfolge wird dann endg\u00fcltig abgeschlossen mit <code>Turnier -&gt; Abschluss der Rangliste (nicht umkehrbar)</code></p>"},{"location":"tournament/#auswahl-des-turniermodus","title":"Auswahl des Turniermodus","text":"<p>Jetzt in die Turniermodusauswahl springen: <code>Turnier -&gt; Turniermodus festlegen</code></p> <p>In der Regel stehen mehrere M\u00f6glichkeiten zur Verf\u00fcgung.  Der Tournierleiter kann einen Modus ausw\u00e4hlen - in der Regel schon vom Landessportwart vorgegeben bei Turnieren der Regionalverb\u00e4nde.</p> <p>Auswahl duch Klick z.B. <code>Weiter mit T07</code></p>"},{"location":"tournament/#lokale-anpassung-der-turnierparameter","title":"Lokale Anpassung der Turnierparameter","text":"<p>Folgende Parameter k\u00f6nnen nun noch angepasst werden:</p> <ul> <li>Zuordnung der Tische (Mapping interner Tischname zu extern Namen)</li> <li>Ballziel (ggf. bereits f\u00fcr Turnier vorgegeben)</li> <li>Aufnahmebegrenzung (ggf. bereits f\u00fcr Turnier vorgegeben)</li> <li>Timeout in sec (0 oder keine eingabe, wenn keine Timeouts)</li> <li>Timeouts (n Timeoutverl\u00e4ngerungen maximal)</li> <li>Checkbox \"Tournament manager checks results before acceptance\"</li> <li>Einspielzeit</li> <li>verk\u00fcrzte Einspielzeit (bei Wechsel an einen bereits bespielten Tisch)</li> </ul> <p>Zur Checkbox:  Normalerweise k\u00f6nnen die Spieler des Spielstatus fortschreiben z.B. nach <code>Partie beendet - OK?</code>. Wenn ein Check von Turniermanager erforderlich ist, wird dieses unterbunden und der Turnierleiter kann nach Abgleich mit dem Spielprotokoll den Tisch freigeben.</p> <p>Die neuen Spielpaarungen erscheinen jeweils automatisch auf den Scoreboards. Erst ganz am Ende:</p>"},{"location":"tournament/#email-mit-den-spielergebnissen-csv-an-den-turnierleiter","title":"eMail mit den Spielergebnissen (csv) an den Turnierleiter","text":"<p>Nach Abschluss des Turniers erh\u00e4lt der Turnierleiter automatisch per eMail eine CSV-Datei mit den Ergebnissen in dem Format, welches f\u00fcr den Upload in die ClubCloud notwendig ist. Diese Datei wird auch auf dem lokalen Server gespeichert ({carambus}/tmp/result-{ba_id}.csv)</p>"},{"location":"tournament/#upload-der-spielergebnisse-csv-in-die-clubcloud","title":"Upload der Spielergebnisse (csv) in die ClubCloud","text":"<p>Der Turnierleiter kann die CSV-Datei direkt in die ClubCloud hochladen (er weiss wie das geht ;-)</p>"},{"location":"tournament/#abgleich-mit-der-clubcloud-zum-letzten-check","title":"Abgleich mit der ClubCloud zum letzten Check","text":"<p>Als letzten Schritt kann nocheinmal ein Abgleich mit der ClubCloud erfolgen. Die damit heruntergeladenen Daten sind Grundlage f\u00fcr sp\u00e4ter ausgerechnete Rankings.</p>"},{"location":"verwaltung-von-ligaspieltagen/","title":"Verwaltung von Ligaspieltagen","text":""},{"location":"verwaltung-von-ligaspieltagen/#-","title":"---","text":"<p>title: Verwaltung von Ligaspieltagen summary: Die Behandlung von Ligabegegnungen l\u00e4uft grundlegend verschieden verglichen   mit Einzelturnieren und wird daher auch speziell unterst\u00fctzt.  Die Struktur der   Ligabegegnungen ist f\u00fcr die einzelnen Ligen vorgegeben und \u00e4ndert sich nicht im   Laufe einer Saison. version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-05 14:34:15.052622000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-05 15:34:15.052622000 Z tags: [] metadata: {} position: 1 id: 2</p>"},{"location":"verwaltung-von-ligaspieltagen/#verwaltung-von-ligaspieltagen","title":"Verwaltung von Ligaspieltagen","text":""},{"location":"verwaltung-von-ligaspieltagen/#uberblick","title":"\u00dcberblick","text":"<p>Die Behandlung von Ligabegegnungen l\u00e4uft grundlegend verschieden verglichen mit Einzelturnieren und wird daher auch speziell unterst\u00fctzt.  Die Struktur der Ligabegegnungen ist f\u00fcr die einzelnen Ligen vorgegeben und \u00e4ndert sich nicht im Laufe einer Saison.</p> <p>Folgende Phasen werden im allgemeinen durchlaufen:</p> <ul> <li>Planung der Spieltage und Mannschaften</li> <li>Zu Beginn eines Spieltages Festlegung der Spieler durch die Kapit\u00e4ne</li> <li>Pro Runde Festlegung der Spieltische zu den einzelnen Spielen</li> <li>Zuordnung der Spieler zu den einzelnen Spielen pro Runde</li> <li>Start der Runden und \u00dcbertragung der Daten an die Scoreboards</li> <li>Bedienung der Scoreboards</li> <li>\u00dcbergabe der Ergebnisse an den Matchday-Monitor und ggf. an  \u00dcbersichtsboards</li> <li>Automatischer Abschluss einer Runde, Start einer weiteren Runde und ggf.  Start eines Shootout bei Gleichstand.</li> <li>\u00dcbertragung der Ergebnisse an die ClubCloud</li> </ul>"},{"location":"verwaltung-von-ligaspieltagen/#planung-der-spieltage-und-mannschaften","title":"Planung der Spieltage und Mannschaften","text":"<p>Die Struktur der Spieltage einer Liga wird zu Saisonbegin auf DBU- oder Landesebene festgelegt und in der ClubClud formal eingetragen. Die Terminierung der einzelnen Spieltage wird ebenfalls in der ClubCloud gef\u00fchrt.  Weiterhin werden die in den einzelnen Mannschaften spielberechtigten Spieler festgelegt.</p> <p>Diese Daten bilden die Grundlage f\u00fcr das Carambus Matchday Management. Der Spielleiter findet diese Daten am einfachsten \u00fcber das Spiellokal, wo alle Begegnungen aufgelistet sind.</p> <p>Nach \u00f6ffen der Spieltagansicht gibt es einen Link zum Matchday Monitor. In dessen Ansicht wird der gesammte Spieltagablauf gesteuert.</p>"},{"location":"verwaltung-von-ligaspieltagen/#festlegung-der-spieler-eines-spieltages","title":"Festlegung der Spieler eines Spieltages","text":"<p>Carambus bietet aus den Eintragungen in der ClubCloud zur Auswahl die Spieler des entsprechenden Teams und zus\u00e4tzlich Spieler aus untergeordneten Ligen. Nach der Auswahl, ist die Menge der am Spieltag verf\u00fcgbaren Spieler unver\u00e4nderbar festgelegt.</p>"},{"location":"verwaltung-von-ligaspieltagen/#zuordnung-der-tische","title":"Zuordnung der Tische","text":"<p>In Carambus k\u00f6nnen die in einem Spiellokal verf\u00fcgbaren Tische mit Name und Typ (Karambol gro\u00df, mittel, klein, Pool, Snooker) definiert werden.  Rundenweise m\u00fcssen aus dieser Menge Tische den einzelnen Spielen zugeordnet werden.</p>"},{"location":"verwaltung-von-ligaspieltagen/#zuordnung-der-spieler-zu-spielen","title":"Zuordnung der Spieler zu Spielen","text":"<p>Nach der Zuordnung der Tische m\u00fcssen nun die einzelnen Spielpaarungen besetzt werden.  Erst wenn alle Spiele einer Runde belegt sind, kann die Runde gestartet werden.</p>"},{"location":"verwaltung-von-ligaspieltagen/#ubertragundg-der-daten-an-die-scoreboards","title":"\u00dcbertragundg der Daten an die Scoreboards","text":"<p>Mit dem Start der Runde erscheinen an den Scoreboards die einzelnen Spielpaarungen. Nach Abschluss eines Matches bleinen die Ergebnisse solange stehen, bis die n\u00e4chste Paarung aufgerufen wird.</p>"},{"location":"verwaltung-von-ligaspieltagen/#bedienung-der-scoreboards","title":"Bedienung der Scoreboards","text":"<p>Die Bedienung der Scoreboards erfolgt \u00fcber Touch-Eingabe.  Per Undo k\u00f6nnen Eingaben beliebig zur\u00fcckgenommen werden.  Das gilt auch nach Ende der Partie, solange die Partie nicht endg\u00fcltig vom Spielleiter abgeschlossen wurde.</p>"},{"location":"verwaltung-von-ligaspieltagen/#steuerung-am-matchday-monitor","title":"Steuerung am Matchday Monitor","text":"<p>Die gesammte \u00dcberwachung der Spieltages kann am Matchday-Monitor vorgenommen werden. Die Ergebnisse werden life in der Monitoransicht aktualisiert. Am Ende muss das Ergebnis der einzelnen Paarungen best\u00e4tigt werden. </p>"},{"location":"verwaltung-von-ligaspieltagen/#automatischer-rundenabschluss-und-start","title":"Automatischer Rundenabschluss und -start","text":"<p>Wenn alle Spiele einer Runde best\u00e4tigt sind, wird automatisch zur n\u00e4chsten Runde, bzw. ggf zum Shootout \u00fcbergegangen. Die Zwischenrgebnisse und das Endergebnis k\u00f6nnen bei Bedarf an jedem Scoreboards eingesehen werden (Start -&gt; Turniere -&gt; Turnier)</p>"},{"location":"verwaltung-von-ligaspieltagen/#upload-in-die-clubcloud","title":"Upload in die ClubCloud","text":"<p>Zum Upload in die ClubCloud wird das Formular angeboten, genau so wie auch im Adminbereich der ClubCloud.  Damit das funktioniert, ist ein Login  in die ClubCloud mit demselben Browser  notwendig.</p>"},{"location":"en/","title":"Carambus API Documentation","text":"<p>Welcome to the Carambus API documentation. This directory contains comprehensive documentation for the Carambus billiards management system.</p>"},{"location":"en/#documentation-index","title":"\ud83d\udcda Documentation Index","text":""},{"location":"en/#core-documentation","title":"Core Documentation","text":"<ul> <li>About - Developer information and project overview</li> </ul>"},{"location":"en/#system-setup-configuration","title":"System Setup &amp; Configuration","text":"<ul> <li>Scoreboard Autostart Setup - Complete guide for setting up scoreboard autostart functionality</li> <li>Mode Switcher - Switch between LOCAL and API modes in single folder</li> <li>Table Reservation and Heating Control - Automated table reservation and heating control</li> </ul>"},{"location":"en/#database-data-management","title":"Database &amp; Data Management","text":"<ul> <li>Database Design - Complete database schema and design documentation</li> <li>Database Syncing - Database synchronization procedures</li> </ul>"},{"location":"en/#tournament-management","title":"Tournament Management","text":"<ul> <li>Tournament Management - Tournament administration and management</li> <li>Tournament Duplicate Handling - Handling duplicate tournament entries</li> <li>Game Plan Reconstruction - Reconstructing game plans and schedules</li> </ul>"},{"location":"en/#league-management","title":"League Management","text":"<ul> <li>League Match Days - League match day management</li> </ul>"},{"location":"en/#system-administration","title":"System Administration","text":"<ul> <li>Admin Roles - Administrative roles and permissions</li> <li>Data Management - Data management procedures</li> <li>Privacy - Privacy and data protection information</li> </ul>"},{"location":"en/#technical-documentation","title":"Technical Documentation","text":"<ul> <li>ER Diagram - Entity-Relationship diagram</li> <li>Paper Trail Optimization - Optimizing paper trail functionality</li> <li>Filter Popup Usage - How to use filter popups in the interface</li> </ul>"},{"location":"en/#terms-legal","title":"Terms &amp; Legal","text":"<ul> <li>Terms - General terms</li> </ul>"},{"location":"en/#specialized-documentation","title":"Specialized Documentation","text":"<ul> <li>Island25 - Special documentation for Island25</li> <li>Region Tagging Cleanup Summary - Summary of region tagging cleanup operations</li> </ul>"},{"location":"en/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>For new users, we recommend starting with: 1. About - Understand the project 2. Scoreboard Autostart Setup - Set up the scoreboard system 3. Table Reservation and Heating Control - Learn about automated table management</p>"},{"location":"en/#system-requirements","title":"\ud83d\udd27 System Requirements","text":"<ul> <li>Ruby on Rails application</li> <li>PostgreSQL database</li> <li>WebSocket support for real-time features</li> <li>Google Calendar integration for table reservations</li> </ul>"},{"location":"en/#support","title":"\ud83d\udcde Support","text":"<p>For technical support or questions about the documentation, please contact: - Email: gernot.ullrich@gmx.de - Project: Billardclub Wedel 61 e.V.</p> <p>Last updated: January 27, 2025 </p>"},{"location":"en/API/","title":"Carambus API Documentation","text":""},{"location":"en/API/#overview","title":"Overview","text":"<p>The Carambus API provides RESTful endpoints for managing billiards tournaments, leagues, players, and real-time scoreboard functionality. The API is built on Ruby on Rails and follows REST conventions.</p>"},{"location":"en/API/#authentication","title":"Authentication","text":""},{"location":"en/API/#session-based-authentication","title":"Session-based Authentication","text":"<p>Most endpoints require authentication via Devise. Include session cookies in your requests:</p> <pre><code># Login to get session\ncurl -X POST http://localhost:3000/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"user\": {\"email\": \"user@example.com\", \"password\": \"password\"}}' \\\n  -c cookies.txt\n\n# Use session for authenticated requests\ncurl -X GET http://localhost:3000/api/tournaments \\\n  -b cookies.txt\n</code></pre>"},{"location":"en/API/#api-token-authentication-future","title":"API Token Authentication (Future)","text":"<p>Token-based authentication is planned for future releases.</p>"},{"location":"en/API/#base-url","title":"Base URL","text":"<pre><code>Development: http://localhost:3000\nProduction: https://carambus.de\n</code></pre>"},{"location":"en/API/#response-format","title":"Response Format","text":"<p>All API responses are in JSON format:</p> <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"tournament\",\n    \"attributes\": {\n      \"name\": \"Regional Championship 2024\",\n      \"start_date\": \"2024-01-15\",\n      \"status\": \"active\"\n    },\n    \"relationships\": {\n      \"discipline\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"discipline\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/API/#error-responses","title":"Error Responses","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"validation_error\",\n    \"message\": \"Validation failed\",\n    \"details\": {\n      \"name\": [\"can't be blank\"]\n    }\n  }\n}\n</code></pre>"},{"location":"en/API/#core-endpoints","title":"Core Endpoints","text":""},{"location":"en/API/#tournaments","title":"Tournaments","text":""},{"location":"en/API/#list-tournaments","title":"List Tournaments","text":"<pre><code>GET /tournaments\n</code></pre> <p>Query Parameters: - <code>page</code>: Page number (default: 1) - <code>per_page</code>: Items per page (default: 25) - <code>status</code>: Filter by status (<code>active</code>, <code>completed</code>, <code>draft</code>) - <code>discipline_id</code>: Filter by discipline - <code>location_id</code>: Filter by location</p> <p>Response: <pre><code>{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"type\": \"tournament\",\n      \"attributes\": {\n        \"name\": \"Regional Championship 2024\",\n        \"start_date\": \"2024-01-15\",\n        \"end_date\": \"2024-01-17\",\n        \"status\": \"active\",\n        \"discipline_name\": \"3-Cushion\",\n        \"location_name\": \"Billard Club Wedel\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"total_count\": 50,\n    \"total_pages\": 2,\n    \"current_page\": 1\n  }\n}\n</code></pre></p>"},{"location":"en/API/#get-tournament","title":"Get Tournament","text":"<pre><code>GET /tournaments/{id}\n</code></pre> <p>Response: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"tournament\",\n    \"attributes\": {\n      \"name\": \"Regional Championship 2024\",\n      \"start_date\": \"2024-01-15\",\n      \"end_date\": \"2024-01-17\",\n      \"status\": \"active\",\n      \"discipline_name\": \"3-Cushion\",\n      \"location_name\": \"Billard Club Wedel\",\n      \"participant_count\": 16,\n      \"game_count\": 24\n    },\n    \"relationships\": {\n      \"discipline\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"discipline\"\n        }\n      },\n      \"location\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"location\"\n        }\n      },\n      \"seedings\": {\n        \"data\": [\n          {\n            \"id\": 1,\n            \"type\": \"seeding\"\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/API/#create-tournament","title":"Create Tournament","text":"<pre><code>POST /tournaments\n</code></pre> <p>Request Body: <pre><code>{\n  \"tournament\": {\n    \"name\": \"New Tournament\",\n    \"discipline_id\": 1,\n    \"location_id\": 1,\n    \"start_date\": \"2024-02-01\",\n    \"end_date\": \"2024-02-03\",\n    \"max_participants\": 16\n  }\n}\n</code></pre></p>"},{"location":"en/API/#update-tournament","title":"Update Tournament","text":"<pre><code>PATCH /tournaments/{id}\n</code></pre>"},{"location":"en/API/#delete-tournament","title":"Delete Tournament","text":"<pre><code>DELETE /tournaments/{id}\n</code></pre>"},{"location":"en/API/#tournament-actions","title":"Tournament Actions","text":""},{"location":"en/API/#start-tournament","title":"Start Tournament","text":"<pre><code>POST /tournaments/{id}/start\n</code></pre>"},{"location":"en/API/#reset-tournament","title":"Reset Tournament","text":"<pre><code>POST /tournaments/{id}/reset\n</code></pre>"},{"location":"en/API/#generate-game-plan","title":"Generate Game Plan","text":"<pre><code>POST /tournaments/{id}/generate_game_plan\n</code></pre>"},{"location":"en/API/#players","title":"Players","text":""},{"location":"en/API/#list-players","title":"List Players","text":"<pre><code>GET /players\n</code></pre> <p>Query Parameters: - <code>page</code>: Page number - <code>per_page</code>: Items per page - <code>region_id</code>: Filter by region - <code>club_id</code>: Filter by club - <code>search</code>: Search by name</p>"},{"location":"en/API/#get-player","title":"Get Player","text":"<pre><code>GET /players/{id}\n</code></pre> <p>Response: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"player\",\n    \"attributes\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"ba_id\": \"12345\",\n      \"club_name\": \"Billard Club Wedel\",\n      \"region_name\": \"Schleswig-Holstein\",\n      \"ranking\": 1250\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/API/#leagues","title":"Leagues","text":""},{"location":"en/API/#list-leagues","title":"List Leagues","text":"<pre><code>GET /leagues\n</code></pre>"},{"location":"en/API/#get-league","title":"Get League","text":"<pre><code>GET /leagues/{id}\n</code></pre>"},{"location":"en/API/#league-teams","title":"League Teams","text":"<pre><code>GET /leagues/{id}/league_teams\n</code></pre>"},{"location":"en/API/#parties-matches","title":"Parties (Matches)","text":""},{"location":"en/API/#list-parties","title":"List Parties","text":"<pre><code>GET /parties\n</code></pre> <p>Query Parameters: - <code>tournament_id</code>: Filter by tournament - <code>league_id</code>: Filter by league - <code>status</code>: Filter by status - <code>date</code>: Filter by date</p>"},{"location":"en/API/#get-party","title":"Get Party","text":"<pre><code>GET /parties/{id}\n</code></pre> <p>Response: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"party\",\n    \"attributes\": {\n      \"date\": \"2024-01-15T14:00:00Z\",\n      \"status\": \"in_progress\",\n      \"team_a_name\": \"Team Alpha\",\n      \"team_b_name\": \"Team Beta\",\n      \"score_a\": 3,\n      \"score_b\": 2\n    },\n    \"relationships\": {\n      \"league_team_a\": {\n        \"data\": {\n          \"id\": 1,\n          \"type\": \"league_team\"\n        }\n      },\n      \"league_team_b\": {\n        \"data\": {\n          \"id\": 2,\n          \"type\": \"league_team\"\n        }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/API/#table-monitors","title":"Table Monitors","text":""},{"location":"en/API/#get-table-monitor","title":"Get Table Monitor","text":"<pre><code>GET /table_monitors/{id}\n</code></pre> <p>Response: <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"table_monitor\",\n    \"attributes\": {\n      \"table_number\": 1,\n      \"status\": \"active\",\n      \"current_game\": {\n        \"id\": 123,\n        \"player_a\": \"John Doe\",\n        \"player_b\": \"Jane Smith\",\n        \"score_a\": 15,\n        \"score_b\": 12,\n        \"balls_goal\": 30\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/API/#update-table-monitor","title":"Update Table Monitor","text":"<pre><code>PATCH /table_monitors/{id}\n</code></pre> <p>Request Body: <pre><code>{\n  \"table_monitor\": {\n    \"balls_a\": 16,\n    \"balls_b\": 12\n  }\n}\n</code></pre></p>"},{"location":"en/API/#table-monitor-actions","title":"Table Monitor Actions","text":""},{"location":"en/API/#add-points","title":"Add Points","text":"<pre><code>POST /table_monitors/{id}/add_one\nPOST /table_monitors/{id}/add_ten\n</code></pre>"},{"location":"en/API/#subtract-points","title":"Subtract Points","text":"<pre><code>POST /table_monitors/{id}/minus_one\nPOST /table_monitors/{id}/minus_ten\n</code></pre>"},{"location":"en/API/#next-step","title":"Next Step","text":"<pre><code>POST /table_monitors/{id}/next_step\n</code></pre>"},{"location":"en/API/#start-game","title":"Start Game","text":"<pre><code>POST /table_monitors/{id}/start_game\n</code></pre>"},{"location":"en/API/#evaluate-result","title":"Evaluate Result","text":"<pre><code>POST /table_monitors/{id}/evaluate_result\n</code></pre>"},{"location":"en/API/#real-time-api","title":"Real-time API","text":""},{"location":"en/API/#table-monitor-channel","title":"Table Monitor Channel","text":"<p>Subscribe to real-time table monitor updates:</p> <pre><code>import { createConsumer } from \"@rails/actioncable\"\n\nconst consumer = createConsumer()\nconst subscription = consumer.subscriptions.create(\n  { channel: \"TableMonitorChannel\", table_id: 1 },\n  {\n    connected() {\n      console.log(\"Connected to table monitor\")\n    },\n\n    disconnected() {\n      console.log(\"Disconnected from table monitor\")\n    },\n\n    received(data) {\n      console.log(\"Received update:\", data)\n      // Update UI with new data\n      updateTableDisplay(data)\n    }\n  }\n)\n</code></pre> <p>Channel Events: - <code>score_update</code>: Score changes - <code>game_start</code>: New game started - <code>game_end</code>: Game completed - <code>status_change</code>: Table status changed</p>"},{"location":"en/API/#scoreboard-channel","title":"Scoreboard Channel","text":"<p>Subscribe to scoreboard updates:</p> <pre><code>const scoreboardSubscription = consumer.subscriptions.create(\n  { channel: \"ScoreboardChannel\", location_id: 1 },\n  {\n    received(data) {\n      updateScoreboard(data)\n    }\n  }\n)\n</code></pre>"},{"location":"en/API/#websocket-message-format","title":"WebSocket Message Format","text":"<pre><code>{\n  \"type\": \"score_update\",\n  \"table_id\": 1,\n  \"data\": {\n    \"player_a\": \"John Doe\",\n    \"player_b\": \"Jane Smith\",\n    \"score_a\": 16,\n    \"score_b\": 12,\n    \"balls_goal\": 30,\n    \"status\": \"in_progress\"\n  },\n  \"timestamp\": \"2024-01-15T14:30:00Z\"\n}\n</code></pre>"},{"location":"en/API/#data-synchronization-api","title":"Data Synchronization API","text":""},{"location":"en/API/#external-data-sources","title":"External Data Sources","text":""},{"location":"en/API/#ba-billiards-association-sync","title":"BA (Billiards Association) Sync","text":"<pre><code>POST /api/sync/ba/players\nPOST /api/sync/ba/tournaments\n</code></pre>"},{"location":"en/API/#region-management","title":"Region Management","text":""},{"location":"en/API/#check-region-data","title":"Check Region Data","text":"<pre><code>GET /region_ccs/{id}/check\n</code></pre>"},{"location":"en/API/#fix-region-data","title":"Fix Region Data","text":"<pre><code>POST /region_ccs/{id}/fix\n</code></pre>"},{"location":"en/API/#admin-api","title":"Admin API","text":""},{"location":"en/API/#user-management","title":"User Management","text":"<pre><code>GET /admin/users\nPOST /admin/users\nPATCH /admin/users/{id}\nDELETE /admin/users/{id}\n</code></pre>"},{"location":"en/API/#system-settings","title":"System Settings","text":"<pre><code>GET /settings/club_settings\nPOST /settings/update_club_settings\nGET /settings/tournament_settings\nPOST /settings/update_tournament_settings\n</code></pre>"},{"location":"en/API/#rate-limiting","title":"Rate Limiting","text":"<p>API requests are rate-limited to prevent abuse:</p> <ul> <li>Authenticated users: 1000 requests per hour</li> <li>Unauthenticated users: 100 requests per hour</li> </ul> <p>Rate limit headers are included in responses:</p> <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1642248000\n</code></pre>"},{"location":"en/API/#pagination","title":"Pagination","text":"<p>List endpoints support pagination with the following parameters:</p> <ul> <li><code>page</code>: Page number (default: 1)</li> <li><code>per_page</code>: Items per page (default: 25, max: 100)</li> </ul> <p>Pagination metadata is included in responses:</p> <pre><code>{\n  \"data\": [...],\n  \"meta\": {\n    \"total_count\": 150,\n    \"total_pages\": 6,\n    \"current_page\": 1,\n    \"per_page\": 25\n  }\n}\n</code></pre>"},{"location":"en/API/#filtering-and-sorting","title":"Filtering and Sorting","text":""},{"location":"en/API/#filtering","title":"Filtering","text":"<p>Most list endpoints support filtering:</p> <pre><code>GET /tournaments?status=active&amp;discipline_id=1&amp;location_id=2\n</code></pre>"},{"location":"en/API/#sorting","title":"Sorting","text":"<p>Sorting is supported on most endpoints:</p> <pre><code>GET /tournaments?sort=start_date&amp;direction=desc\nGET /players?sort=last_name&amp;direction=asc\n</code></pre>"},{"location":"en/API/#error-codes","title":"Error Codes","text":"Code Description 400 Bad Request - Invalid parameters 401 Unauthorized - Authentication required 403 Forbidden - Insufficient permissions 404 Not Found - Resource not found 422 Unprocessable Entity - Validation errors 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error"},{"location":"en/API/#sdks-and-libraries","title":"SDKs and Libraries","text":""},{"location":"en/API/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>npm install carambus-api-client\n</code></pre> <pre><code>import { CarambusAPI } from 'carambus-api-client'\n\nconst api = new CarambusAPI({\n  baseURL: 'https://carambus.de',\n  credentials: 'include'\n})\n\n// Get tournaments\nconst tournaments = await api.tournaments.list()\n\n// Create tournament\nconst tournament = await api.tournaments.create({\n  name: 'New Tournament',\n  discipline_id: 1,\n  location_id: 1\n})\n</code></pre>"},{"location":"en/API/#ruby","title":"Ruby","text":"<pre><code>require 'carambus_api'\n\nclient = CarambusAPI::Client.new(\n  base_url: 'https://carambus.de',\n  session_cookies: session_cookies\n)\n\n# Get tournaments\ntournaments = client.tournaments.list\n\n# Create tournament\ntournament = client.tournaments.create(\n  name: 'New Tournament',\n  discipline_id: 1,\n  location_id: 1\n)\n</code></pre>"},{"location":"en/API/#examples","title":"Examples","text":""},{"location":"en/API/#complete-tournament-workflow","title":"Complete Tournament Workflow","text":"<pre><code>// 1. Create tournament\nconst tournament = await api.tournaments.create({\n  name: 'Championship 2024',\n  discipline_id: 1,\n  location_id: 1,\n  start_date: '2024-02-01',\n  max_participants: 16\n})\n\n// 2. Add participants\nfor (const player of players) {\n  await api.tournaments.addParticipant(tournament.id, player.id)\n}\n\n// 3. Generate game plan\nawait api.tournaments.generateGamePlan(tournament.id)\n\n// 4. Start tournament\nawait api.tournaments.start(tournament.id)\n\n// 5. Subscribe to real-time updates\nconst subscription = consumer.subscriptions.create(\n  { channel: \"TournamentChannel\", tournament_id: tournament.id },\n  {\n    received(data) {\n      updateTournamentDisplay(data)\n    }\n  }\n)\n</code></pre>"},{"location":"en/API/#real-time-scoreboard-integration","title":"Real-time Scoreboard Integration","text":"<pre><code>// Connect to scoreboard\nconst scoreboard = consumer.subscriptions.create(\n  { channel: \"ScoreboardChannel\", location_id: 1 },\n  {\n    received(data) {\n      // Update scoreboard display\n      document.getElementById('scoreboard').innerHTML = \n        generateScoreboardHTML(data)\n    }\n  }\n)\n\n// Update table scores\nasync function updateScore(tableId, player, points) {\n  await api.tableMonitors.update(tableId, {\n    [`balls_${player}`]: points\n  })\n}\n</code></pre>"},{"location":"en/API/#support","title":"Support","text":"<p>For API support and questions:</p> <ul> <li>Documentation: API.md</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul> <p>This API documentation is maintained by the Carambus development team. For questions or contributions, please see the Contributing Guide. </p>"},{"location":"en/DEVELOPER_GUIDE/","title":"Carambus Developer Guide","text":""},{"location":"en/DEVELOPER_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Architecture</li> <li>Getting Started</li> <li>Database Design</li> <li>Core Models</li> <li>Key Features</li> <li>Development Workflow</li> <li>Deployment</li> <li>Contributing</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#overview","title":"Overview","text":"<p>Carambus is a comprehensive billiards tournament management system built with Ruby on Rails. It provides complete automation of billiards operations from tournament planning to data collection and result transmission.</p>"},{"location":"en/DEVELOPER_GUIDE/#key-features","title":"Key Features","text":"<ul> <li>Tournament Management: Complete tournament lifecycle management</li> <li>Real-time Scoreboards: Live scoreboard displays with WebSocket support</li> <li>League Management: Team-based league organization</li> <li>Data Synchronization: Integration with external billiards databases (BA/CC)</li> <li>Multi-language Support: German and English interfaces</li> <li>Responsive Design: Works on desktop and mobile devices</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: Ruby on Rails 7.2</li> <li>Database: PostgreSQL</li> <li>Frontend: Hotwire (Turbo + Stimulus) + Stimulus Reflex</li> <li>Real-time: Action Cable with Redis</li> <li>Authentication: Devise</li> <li>Authorization: Pundit + CanCanCan</li> <li>Admin Interface: Administrate</li> <li>Deployment: Capistrano + Puma</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#architecture","title":"Architecture","text":""},{"location":"en/DEVELOPER_GUIDE/#rails-structure","title":"Rails Structure","text":"<p>Carambus follows standard Rails conventions with some customizations:</p> <pre><code>app/\n\u251c\u2500\u2500 controllers/          # RESTful controllers\n\u251c\u2500\u2500 models/              # ActiveRecord models with concerns\n\u251c\u2500\u2500 views/               # ERB templates\n\u251c\u2500\u2500 javascript/          # Stimulus controllers and utilities\n\u251c\u2500\u2500 channels/            # Action Cable channels\n\u251c\u2500\u2500 jobs/                # Background jobs\n\u251c\u2500\u2500 services/            # Business logic services\n\u2514\u2500\u2500 helpers/             # View helpers\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#key-architectural-patterns","title":"Key Architectural Patterns","text":""},{"location":"en/DEVELOPER_GUIDE/#concerns","title":"Concerns","text":"<p>The application uses Rails concerns to share functionality:</p> <ul> <li><code>LocalProtector</code>: Protects local data from external modifications</li> <li><code>SourceHandler</code>: Manages external data synchronization</li> <li><code>RegionTaggable</code>: Handles region-based data organization</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#real-time-features","title":"Real-time Features","text":"<ul> <li>Action Cable: WebSocket connections for live updates</li> <li>Stimulus Reflex: Server-side reflexes for reactive UI</li> <li>Cable Ready: Client-side DOM manipulation</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#getting-started","title":"Getting Started","text":""},{"location":"en/DEVELOPER_GUIDE/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ruby 3.2+ (see <code>.ruby-version</code>)</li> <li>PostgreSQL 11+</li> <li>Redis 5+</li> <li>Node.js 14+ (for asset compilation)</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository <pre><code>git clone &lt;repository-url&gt;\ncd carambus\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>bundle install\nyarn install\n</code></pre></p> </li> <li> <p>Database setup <pre><code>cp config/database.yml.example config/database.yml\n# Edit database.yml with your PostgreSQL credentials\n\nrails db:create\nrails db:migrate\nrails db:seed\n</code></pre></p> </li> <li> <p>Environment configuration <pre><code>cp config/application.yml.example config/application.yml\n# Edit application.yml with your configuration\n</code></pre></p> </li> <li> <p>Start the application <pre><code>rails server\n</code></pre></p> </li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#development-tools","title":"Development Tools","text":""},{"location":"en/DEVELOPER_GUIDE/#code-quality","title":"Code Quality","text":"<ul> <li>RuboCop: Code style enforcement</li> <li>Standard: Ruby code formatting</li> <li>Brakeman: Security vulnerability scanning</li> <li>Overcommit: Git hooks for code quality</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#testing","title":"Testing","text":"<ul> <li>RSpec: Unit and integration tests</li> <li>Capybara: System tests</li> <li>Factory Bot: Test data factories</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#database-design","title":"Database Design","text":""},{"location":"en/DEVELOPER_GUIDE/#core-models","title":"Core Models","text":""},{"location":"en/DEVELOPER_GUIDE/#seeding-model-dual-purpose","title":"Seeding Model (Dual Purpose)","text":"<p>The <code>Seeding</code> model serves two distinct purposes:</p> <ol> <li>Team Roster Management</li> <li>Connected to <code>LeagueTeam</code> via <code>league_team_id</code></li> <li>Maintains full roster of players for a league team</li> <li> <p>Created during initial league/team setup</p> </li> <li> <p>Match Participation Tracking</p> </li> <li>Connected to <code>Party</code> via polymorphic <code>tournament_id</code></li> <li>Tracks which players participate in specific matches</li> <li>Created when setting up individual matches</li> </ol> <pre><code>class Seeding &lt; ApplicationRecord\n  belongs_to :player, optional: true\n  belongs_to :tournament, polymorphic: true, optional: true\n  belongs_to :league_team, optional: true\n  include LocalProtector\n  include SourceHandler\n  include RegionTaggable\nend\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#party-and-leagueteam-relationship","title":"Party and LeagueTeam Relationship","text":"<pre><code>class Party &lt; ApplicationRecord\n  belongs_to :league_team_a, class_name: \"LeagueTeam\"\n  belongs_to :league_team_b, class_name: \"LeagueTeam\"\n  belongs_to :host_league_team, class_name: \"LeagueTeam\"\n  has_many :seedings, as: :tournament\n  include LocalProtector\n  include SourceHandler\nend\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#data-storage-patterns","title":"Data Storage Patterns","text":""},{"location":"en/DEVELOPER_GUIDE/#flexible-data-storage","title":"Flexible Data Storage","text":"<p>Several models use serialized columns for flexible data storage:</p> <pre><code># JSON Serialization\nserialize :data, coder: JSON, type: Hash\n# Used in: Party, Seeding, LeagueTeam\n\n# YAML Serialization  \nserialize :remarks, coder: YAML, type: Hash\n# Used in: Party\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#region-tagging-system","title":"Region Tagging System","text":"<p>The <code>RegionTaggable</code> concern provides intelligent region handling:</p> <pre><code># Automatic region tagging based on context\nwhen Seeding\n  if tournament_id.present?\n    # Tournament-based region tagging\n    tournament ? [\n      tournament.region_id,\n      (tournament.organizer_type == \"Region\" ? tournament.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  elsif league_team_id.present?\n    # League team-based region tagging\n    league_team&amp;.league ? [\n      (league_team.league.organizer_type == \"Region\" ? league_team.league.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  end\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#core-models_1","title":"Core Models","text":""},{"location":"en/DEVELOPER_GUIDE/#tournament-management","title":"Tournament Management","text":"<ul> <li>Tournament: Main tournament entity</li> <li>Discipline: Game types (e.g., 3-cushion, 1-cushion)</li> <li>Player: Individual players</li> <li>Seeding: Tournament participation and rankings</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#league-management","title":"League Management","text":"<ul> <li>League: League organization</li> <li>LeagueTeam: Teams within leagues</li> <li>Party: Individual matches between teams</li> <li>Season: League seasons</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#location-management","title":"Location Management","text":"<ul> <li>Location: Billiards clubs/locations</li> <li>Table: Individual billiards tables</li> <li>TableMonitor: Real-time table monitoring</li> <li>TableLocal: Local table configurations</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#user-management","title":"User Management","text":"<ul> <li>User: System users with Devise authentication</li> <li>Role: User roles and permissions</li> <li>Admin: Administrative interface via Administrate</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#key-features_1","title":"Key Features","text":""},{"location":"en/DEVELOPER_GUIDE/#real-time-scoreboards","title":"Real-time Scoreboards","text":"<p>The scoreboard system provides live updates for tournament displays:</p>"},{"location":"en/DEVELOPER_GUIDE/#components","title":"Components","text":"<ul> <li>Table Monitor: Real-time game tracking</li> <li>Scoreboard Display: Public scoreboard views</li> <li>WebSocket Integration: Live updates via Action Cable</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#setup","title":"Setup","text":"<p>See Scoreboard Autostart Setup for detailed configuration.</p>"},{"location":"en/DEVELOPER_GUIDE/#data-synchronization","title":"Data Synchronization","text":"<p>Integration with external billiards databases:</p>"},{"location":"en/DEVELOPER_GUIDE/#external-sources","title":"External Sources","text":"<ul> <li>BA (Billiards Association): Official player and tournament data</li> <li>CC (Competition Center): Competition management system</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#synchronization-process","title":"Synchronization Process","text":"<ol> <li>External data is fetched via API</li> <li>Local data is protected from external modifications</li> <li>Region tagging is automatically applied</li> <li>Conflicts are resolved based on source priority</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#tournament-workflows","title":"Tournament Workflows","text":""},{"location":"en/DEVELOPER_GUIDE/#tournament-creation","title":"Tournament Creation","text":"<ol> <li>Create tournament with discipline and settings</li> <li>Define participants (players/teams)</li> <li>Generate game plans</li> <li>Start tournament with real-time monitoring</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#match-management","title":"Match Management","text":"<ol> <li>Schedule matches (Parties)</li> <li>Track live game progress</li> <li>Record results and rankings</li> <li>Generate reports and statistics</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#development-workflow","title":"Development Workflow","text":""},{"location":"en/DEVELOPER_GUIDE/#code-style","title":"Code Style","text":"<p>The project uses Standard Ruby for code formatting:</p> <pre><code># Format code\nbundle exec standardrb --fix\n\n# Check for issues\nbundle exec standardrb\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#git-workflow","title":"Git Workflow","text":"<ol> <li>Create feature branch from main</li> <li>Make changes with tests</li> <li>Run code quality checks</li> <li>Submit pull request</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#testing_1","title":"Testing","text":"<pre><code># Run all tests\nrails test\n\n# Run specific test file\nrails test test/models/tournament_test.rb\n\n# Run system tests\nrails test:system\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#database-migrations","title":"Database Migrations","text":"<pre><code># Generate migration\nrails generate migration AddFieldToModel\n\n# Run migrations\nrails db:migrate\n\n# Rollback\nrails db:rollback\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#production-setup","title":"Production Setup","text":"<p>The application is designed for deployment on Raspberry Pi or similar hardware:</p>"},{"location":"en/DEVELOPER_GUIDE/#system-requirements","title":"System Requirements","text":"<ul> <li>Hardware: Raspberry Pi 4 (4GB RAM recommended)</li> <li>OS: Raspberry Pi OS (32-bit)</li> <li>Database: PostgreSQL 11+</li> <li>Web Server: Nginx + Puma</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#deployment-process","title":"Deployment Process","text":"<ol> <li>Server Setup: See Runbook for detailed server configuration</li> <li>Application Deployment: Capistrano-based deployment</li> <li>Service Management: Systemd services for autostart</li> <li>Scoreboard Setup: Automated scoreboard startup</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#configuration-files","title":"Configuration Files","text":""},{"location":"en/DEVELOPER_GUIDE/#database-configuration","title":"Database Configuration","text":"<pre><code># config/database.yml\nproduction:\n  adapter: postgresql\n  database: carambus_production\n  host: localhost\n  username: www_data\n  password: &lt;%= ENV['DATABASE_PASSWORD'] %&gt;\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#application-configuration","title":"Application Configuration","text":"<pre><code># config/application.yml\ndefaults: &amp;defaults\n  database_url: postgresql://www_data:password@localhost/carambus_production\n  redis_url: redis://localhost:6379/0\n  secret_key_base: &lt;%= ENV['SECRET_KEY_BASE'] %&gt;\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#service-management","title":"Service Management","text":"<pre><code># Start application\nsudo systemctl start carambus\n\n# Enable autostart\nsudo systemctl enable carambus\n\n# Check status\nsudo systemctl status carambus\n</code></pre>"},{"location":"en/DEVELOPER_GUIDE/#contributing","title":"Contributing","text":""},{"location":"en/DEVELOPER_GUIDE/#development-environment","title":"Development Environment","text":"<ol> <li>Follow the Getting Started guide</li> <li>Set up pre-commit hooks: <code>bundle exec overcommit --install</code></li> <li>Familiarize yourself with the Database Design</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#code-contributions","title":"Code Contributions","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Add tests for new functionality</li> <li>Ensure all tests pass</li> <li>Submit a pull request</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#documentation","title":"Documentation","text":"<ul> <li>Update relevant documentation when adding features</li> <li>Include code examples for new APIs</li> <li>Document configuration changes</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write tests for all new functionality</li> <li>Maintain test coverage above 80%</li> <li>Include integration tests for complex workflows</li> <li>Test both German and English locales</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#code-review-process","title":"Code Review Process","text":"<ol> <li>All changes require code review</li> <li>Automated checks must pass</li> <li>Manual testing on staging environment</li> <li>Documentation updates as needed</li> </ol>"},{"location":"en/DEVELOPER_GUIDE/#additional-resources","title":"Additional Resources","text":""},{"location":"en/DEVELOPER_GUIDE/#documentation_1","title":"Documentation","text":"<ul> <li>Database Design: Detailed database schema</li> <li>Docker Installation: Docker installation</li> <li>Tournament Management: Tournament workflows</li> <li>Installation Overview: Installation overview</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#external-links","title":"External Links","text":"<ul> <li>Ruby on Rails Guides</li> <li>Hotwire Documentation</li> <li>Stimulus Reflex</li> <li>Action Cable</li> </ul>"},{"location":"en/DEVELOPER_GUIDE/#support","title":"Support","text":"<ul> <li>Issues: Use GitHub Issues for bug reports and feature requests</li> <li>Discussions: GitHub Discussions for questions and ideas</li> <li>Documentation: Keep documentation up to date with changes</li> </ul> <p>This documentation is maintained by the Carambus development team. For questions or contributions, please see the Contributing section. </p>"},{"location":"en/about/","title":"About","text":""},{"location":"en/database_design/","title":"Carambus API Database Design Documentation","text":""},{"location":"en/database_design/#core-models-and-their-relationships","title":"Core Models and Their Relationships","text":""},{"location":"en/database_design/#seeding-model-dual-purpose-design","title":"Seeding Model - Dual Purpose Design","text":"<p>The <code>Seeding</code> model serves two distinct purposes in the system:</p> <ol> <li>Team Roster Management</li> <li>Connected to <code>LeagueTeam</code> via <code>league_team_id</code></li> <li>Used to maintain the full roster of players for a league team</li> <li>Created during initial league/team setup and scraping</li> <li> <p>Example: <code>Seeding.where(league_team: league_team, player: player)</code></p> </li> <li> <p>Match Participation Tracking</p> </li> <li>Connected to <code>Party</code> via polymorphic <code>tournament_id</code> and <code>tournament_type</code></li> <li>Tracks which players participate in specific matches</li> <li>Created when setting up individual matches</li> <li>Example: <code>party.seedings.where(\"id &gt; #{Game::MIN_ID}\")</code></li> </ol> <pre><code>class Seeding &lt; ApplicationRecord\n  belongs_to :player, optional: true\n  belongs_to :tournament, polymorphic: true, optional: true\n  belongs_to :league_team, optional: true\n  # ...\nend\n</code></pre>"},{"location":"en/database_design/#party-and-leagueteam-relationship","title":"Party and LeagueTeam Relationship","text":"<p>The relationship between <code>Party</code> and <code>LeagueTeam</code> is designed to handle match scheduling and team participation:</p> <pre><code>class Party &lt; ApplicationRecord\n  belongs_to :league_team_a, class_name: \"LeagueTeam\"\n  belongs_to :league_team_b, class_name: \"LeagueTeam\"\n  belongs_to :host_league_team, class_name: \"LeagueTeam\"\n  belongs_to :no_show_team, class_name: \"LeagueTeam\"\n  has_many :seedings, as: :tournament\n  # ...\nend\n\nclass LeagueTeam &lt; ApplicationRecord\n  has_many :parties_a, class_name: \"Party\", foreign_key: :league_team_a_id\n  has_many :parties_b, class_name: \"Party\", foreign_key: :league_team_b_id\n  has_many :parties_as_host, class_name: \"Party\", foreign_key: :host_league_team_id\n  has_many :no_show_parties, class_name: \"Party\", foreign_key: :no_show_team_id\n  has_many :seedings\n  # ...\nend\n</code></pre>"},{"location":"en/database_design/#data-storage-patterns","title":"Data Storage Patterns","text":""},{"location":"en/database_design/#flexible-data-storage","title":"Flexible Data Storage","text":"<p>Several models use serialized columns for flexible data storage:</p> <ol> <li>JSON Serialization <pre><code>serialize :data, coder: JSON, type: Hash\n</code></pre>    Used in:</li> <li><code>Party</code> - Stores match-specific data</li> <li><code>Seeding</code> - Stores player results and rankings</li> <li> <p><code>LeagueTeam</code> - Stores team-specific metadata</p> </li> <li> <p>YAML Serialization <pre><code>serialize :remarks, coder: YAML, type: Hash\n</code></pre>    Used in:</p> </li> <li><code>Party</code> - Stores match remarks and notes</li> </ol>"},{"location":"en/database_design/#region-tagging-system","title":"Region Tagging System","text":"<p>The <code>RegionTaggable</code> concern provides intelligent region handling:</p> <pre><code># Example from RegionTaggable\nwhen Seeding\n  if tournament_id.present?\n    # Handle tournament-based region tagging\n    tournament ? [\n      tournament.region_id,\n      (tournament.organizer_type == \"Region\" ? tournament.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  elsif league_team_id.present?\n    # Handle league team-based region tagging\n    league_team&amp;.league ? [\n      (league_team.league.organizer_type == \"Region\" ? league_team.league.organizer_id : nil),\n      find_dbu_region_id_if_global\n    ].compact : []\n  end\n</code></pre>"},{"location":"en/database_design/#data-protection-and-synchronization","title":"Data Protection and Synchronization","text":""},{"location":"en/database_design/#local-protection","title":"Local Protection","text":"<p>The <code>LocalProtector</code> concern is used to protect local data from external modifications:</p> <pre><code>class Party &lt; ApplicationRecord\n  include LocalProtector\n  # ...\nend\n\nclass LeagueTeam &lt; ApplicationRecord\n  include LocalProtector\n  # ...\nend\n\nclass Seeding &lt; ApplicationRecord\n  include LocalProtector\n  # ...\nend\n</code></pre>"},{"location":"en/database_design/#source-handling","title":"Source Handling","text":"<p>The <code>SourceHandler</code> concern manages external data synchronization:</p> <pre><code>class Party &lt; ApplicationRecord\n  include SourceHandler\n  # ...\nend\n\nclass LeagueTeam &lt; ApplicationRecord\n  include SourceHandler\n  # ...\nend\n</code></pre>"},{"location":"en/database_design/#key-workflows","title":"Key Workflows","text":""},{"location":"en/database_design/#team-setup-and-match-creation","title":"Team Setup and Match Creation","text":"<ol> <li>League teams are created with their base roster (seedings with <code>league_team_id</code>)</li> <li>When a match is created:</li> <li>A new <code>Party</code> is created linking two <code>LeagueTeam</code>s</li> <li>Specific seedings are created for the match (with <code>tournament_id</code>)</li> <li>These seedings track which players from the team roster participate in this match</li> </ol>"},{"location":"en/database_design/#data-synchronization","title":"Data Synchronization","text":"<ol> <li>External data (from BA/CC) is synchronized through the <code>SourceHandler</code></li> <li>Local data is protected from external modifications via <code>LocalProtector</code></li> <li>Region tagging is automatically handled based on the context (tournament or league team)</li> </ol>"},{"location":"en/database_design/#important-notes-for-developers","title":"Important Notes for Developers","text":"<ol> <li>Seeding Creation</li> <li>Always consider whether you're creating a team roster entry or a match participation entry</li> <li> <p>Use appropriate associations (<code>league_team_id</code> vs <code>tournament_id</code>)</p> </li> <li> <p>Data Protection</p> </li> <li>Be aware of the <code>LocalProtector</code> when modifying records</li> <li> <p>Use <code>unprotected = true</code> when necessary for local modifications</p> </li> <li> <p>Region Handling</p> </li> <li>Region tagging is automatic but context-dependent</li> <li> <p>Different logic applies for tournament-based vs league team-based seedings</p> </li> <li> <p>Data Storage</p> </li> <li>Use the appropriate serialization (JSON vs YAML) for different types of data</li> <li>Be aware of the structure of stored data in serialized columns</li> </ol>"},{"location":"en/database_design/#database-schema-highlights","title":"Database Schema Highlights","text":""},{"location":"en/database_design/#seeding-model","title":"Seeding Model","text":"<pre><code>create_table \"seedings\" do |t|\n  t.string \"ba_state\"\n  t.integer \"balls_goal\"\n  t.text \"data\"\n  t.integer \"position\"\n  t.integer \"rank\"\n  t.string \"role\"\n  t.string \"state\"\n  t.string \"tournament_type\"\n  t.integer \"league_team_id\"\n  t.integer \"player_id\"\n  t.integer \"playing_discipline_id\"\n  t.integer \"tournament_id\"\n  # ...\nend\n</code></pre>"},{"location":"en/database_design/#party-model","title":"Party Model","text":"<pre><code>create_table \"parties\" do |t|\n  t.datetime \"date\"\n  t.integer \"league_id\"\n  t.text \"remarks\"\n  t.integer \"league_team_a_id\"\n  t.integer \"league_team_b_id\"\n  t.integer \"host_league_team_id\"\n  t.integer \"no_show_team_id\"\n  t.text \"data\"\n  # ... other fields ...\nend\n</code></pre>"},{"location":"en/database_design/#leagueteam-model","title":"LeagueTeam Model","text":"<pre><code>create_table \"league_teams\" do |t|\n  t.string \"name\"\n  t.string \"shortname\"\n  t.integer \"league_id\"\n  t.integer \"ba_id\"\n  t.integer \"cc_id\"\n  t.integer \"club_id\"\n  t.text \"data\"\n  # ... other fields ...\nend\n</code></pre>"},{"location":"en/datenbank-partitionierung-und-synchronisierung/","title":"Datenbank partitionierung und synchronisierung","text":""},{"location":"en/docker_installation/","title":"\ud83d\udc33 Docker Installation for Carambus","text":""},{"location":"en/docker_installation/#overview","title":"\ud83d\udccb Overview","text":"<p>This document describes the automated processes for: 1. Fresh installation of a Carambus server on various platforms 2. Migration of existing installations to new major versions 3. Development environment for local development on a computer with macOS</p> <p>The goal is to simplify these processes so that a local system manager without deep technical knowledge can perform these tasks.</p>"},{"location":"en/docker_installation/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"en/docker_installation/#production-modes-2-different-systems","title":"Production Modes (2 different systems)","text":""},{"location":"en/docker_installation/#1-api-server-newapicarambusde","title":"1. API Server (newapi.carambus.de)","text":"<ul> <li>Purpose: Central API for all local servers</li> <li>Features: Is the central API server</li> <li>Usage: Production API server</li> <li>Domain: newapi.carambus.de</li> <li>Installation path: <code>/var/www/carambus_api</code></li> </ul>"},{"location":"en/docker_installation/#2-local-server-local-installations","title":"2. Local Server (local installations)","text":"<ul> <li>Purpose: Local servers for tournaments/clubs</li> <li>Features: Has a Carambus API URL that points to the API server</li> <li>Usage: Raspberry Pi scoreboards, local servers</li> <li>Domain: localhost or local IP</li> <li>API-URL: Points to newapi.carambus.de</li> <li>Installation path: <code>/var/www/carambus</code></li> </ul>"},{"location":"en/docker_installation/#3-combined-installation-api-server-local-server","title":"3. Combined Installation (API Server + Local Server)","text":"<ul> <li>Purpose: API server with additional local server for hosting</li> <li>Usage: For locations without their own server</li> <li>Installation paths: </li> <li>API Server: <code>/var/www/carambus_api</code></li> <li>Local Server: <code>/var/www/carambus</code></li> <li>Advantage: Central management with local hosting functionality</li> </ul> <p>Note: Both server types can run on the same hardware. The API server can also function as a hosting server for local Carambus instances that don't have their own server.</p>"},{"location":"en/docker_installation/#development-mode-overarching","title":"Development Mode (overarching)","text":"<ul> <li>Purpose: Both production modes can be tested in development mode</li> <li>Platform: Computer with macOS for local development</li> <li>Advantage: Parallel testing of both modes possible</li> <li>Usage: Inter-system communication testing (Local Server \u2194 API Server)</li> </ul>"},{"location":"en/docker_installation/#installation-types","title":"\ud83d\ude80 Installation Types","text":""},{"location":"en/docker_installation/#docker-based-installation-recommended","title":"Docker-based Installation (Recommended)","text":""},{"location":"en/docker_installation/#advantages","title":"Advantages","text":"<ul> <li>\u2705 Consistent environment</li> <li>\u2705 Easy migration</li> <li>\u2705 Minimal technical effort</li> <li>\u2705 Reproducible installations</li> <li>\u2705 Automatic updates</li> </ul>"},{"location":"en/docker_installation/#process","title":"Process","text":"<ol> <li>Automatic configuration on first boot</li> <li>Web-based localization (only for local servers)</li> <li>Automatic scoreboard startup (only for local servers)</li> </ol>"},{"location":"en/docker_installation/#installation-process-docker-based","title":"\ud83d\udccb Installation Process (Docker-based)","text":""},{"location":"en/docker_installation/#phase-1-preparation","title":"Phase 1: Preparation","text":""},{"location":"en/docker_installation/#11-platform-specific-prerequisites","title":"1.1 Platform-specific Prerequisites","text":"<p>Raspberry Pi: - Raspberry Pi Imager with custom image - Optional: SSH configuration with standard account - Optional: WiFi connection with fixed IP in router</p> <p>Ubuntu Server (e.g., Hetzner): - Base installation already completed by hosting provider - Network configuration already completed by hosting provider - SSH access via standard port 22</p>"},{"location":"en/docker_installation/#12-www-data-account-configuration","title":"1.2 www-data Account Configuration","text":"<p>Important: All Carambus installations use the standard <code>www-data</code> account (uid=33, gid=33), which is already defined in both operating systems:</p> <pre><code># The www-data user already exists:\n# www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n\n# Activate shell for SSH access (home directory remains /var/www)\nsudo chsh -s /bin/bash www-data\n\n# Create wheel group (if not present)\nsudo groupadd wheel\n\n# Configure wheel group for passwordless sudo\necho '%wheel ALL=(ALL) NOPASSWD: ALL' | sudo tee -a /etc/sudoers\n\n# Add www-data to wheel group\nsudo usermod -aG wheel www-data\n\n# Set up SSH keys for passwordless access\nsudo mkdir -p /var/www/.ssh\nsudo chown www-data:www-data /var/www/.ssh\nsudo chmod 700 /var/www/.ssh\n# Copy public key from development system\n</code></pre>"},{"location":"en/docker_installation/#13-ssh-configuration","title":"1.3 SSH Configuration","text":"<p>Development system scripts always assume the following SSH configuration:</p> <pre><code># Standard SSH access for all scripts\nssh -p 8910 www-data@host\n\n# No direct root access possible\n# No passwordless root access possible\n# From www-data, use sudo su if needed\n</code></pre> <p>SSH configuration on target system:</p> <pre><code># /etc/ssh/sshd_config\nPort 8910\nPermitRootLogin no\n# PasswordAuthentication no  # Commented out for initial configuration\nPubkeyAuthentication yes\nAllowUsers www-data\n</code></pre> <p>Note: This configuration corresponds to the Ansible rules used for deployment. The <code>wheel</code> group enables passwordless sudo for the <code>www-data</code> user.</p>"},{"location":"en/docker_installation/#phase-2-automatic-configuration","title":"Phase 2: Automatic Configuration","text":""},{"location":"en/docker_installation/#21-network-configuration","title":"2.1 Network Configuration","text":"<p>Note: Network connection already occurs when loading the base OS: - Raspberry Pi: Optional SSH configuration and WiFi connection (preferably fixed IP in router) - Ubuntu Server: Via hosting provider administration</p> <p>For Docker installation, a <code>www-data</code> account is always present, through which the Rails application also runs.</p>"},{"location":"en/docker_installation/#22-localization","title":"2.2 Localization","text":"<p>Important: Only local servers have regionalization (region_id or context) for setting the data filter.</p> <pre><code># config/localization.yml\nlocation:\n  id: \"{location_id}\"\n  name: \"{location_name}\"\n  timezone: \"Europe/Berlin\"\n  region_id: \"{region_id}\"  # Only relevant for local servers\n</code></pre> <p>Localization is only necessary for scoreboards, as these are assigned to a location so that the corresponding table selection can be made for the location.</p> <p>Note: There were problems with <code>assets:precompile</code> that required a <code>location_id</code> to be specified. This needs to be reviewed and eliminated.</p>"},{"location":"en/docker_installation/#23-carambus-api-url-configuration","title":"2.3 Carambus API URL Configuration","text":"<pre><code># config/api.yml\ncarambus_api:\n  url: \"https://newapi.carambus.de\"\n  timeout: 30\n  retry_attempts: 3\n</code></pre>"},{"location":"en/docker_installation/#24-language-configuration","title":"2.4 Language Configuration","text":"<p>German is always the default locale. Users can select their own locale (DE or EN) through their profile. Switching is possible in the webapp and is irrelevant for installation.</p> <pre><code># config/application.yml\ndefault_locale: \"de\"\navailable_locales: [\"de\", \"en\"]\n</code></pre>"},{"location":"en/docker_installation/#phase-3-scoreboard-setup-only-for-local-servers","title":"Phase 3: Scoreboard Setup (only for local servers)","text":"<p>Note: Desktop configurations need to be reviewed separately. We focus on passive installation from a headless server.</p>"},{"location":"en/docker_installation/#development-environment-computer-with-macos","title":"\ud83d\udd27 Development Environment (Computer with macOS)","text":""},{"location":"en/docker_installation/#local-development","title":"Local Development","text":"<pre><code># Start single system\ndocker-compose -f docker-compose.development.local-server.yml up\n\n# Start all systems in parallel (for inter-system testing)\n./start-development-parallel.sh\n</code></pre>"},{"location":"en/docker_installation/#parallel-systems-development-mode","title":"Parallel Systems (Development Mode)","text":"<pre><code># All three systems simultaneously on macOS computer\ndocker-compose -f docker-compose.development.parallel.yml up\n\n# Ports:\n# - API Server: 3001 (PostgreSQL: 5433, Redis: 6380)\n# - Local Server: 3000 (PostgreSQL: 5432, Redis: 6379)\n# - Web Client: 3002 (PostgreSQL: 5434, Redis: 6381)\n\n# Installation paths:\n# - API Server: /var/www/carambus_api\n# - Local Server: /var/www/carambus\n</code></pre>"},{"location":"en/docker_installation/#inter-system-communication-testing","title":"Inter-System Communication Testing","text":"<pre><code># Local server communicates with API server via Carambus API URL\n# For region filter tests\n# For synchronization tests\n# Local server has API URL that points to API server\n</code></pre>"},{"location":"en/docker_installation/#monitoring-and-maintenance","title":"\ud83d\udcca Monitoring and Maintenance","text":""},{"location":"en/docker_installation/#system-monitoring","title":"System Monitoring","text":"<pre><code># Container status\ndocker compose ps\n\n# Resource consumption\ndocker stats\n\n# System resources\nhtop\n</code></pre>"},{"location":"en/docker_installation/#automatic-updates","title":"Automatic Updates","text":"<pre><code># Crontab for automatic updates\ncrontab -e\n\n# Update daily at 2:00 AM\n# For Local Server:\n0 2 * * * cd /var/www/carambus &amp;&amp; git pull &amp;&amp; docker compose up -d --build\n# For API Server:\n# 0 2 * * * cd /var/www/carambus_api &amp;&amp; git pull &amp;&amp; docker compose up -d --build\n</code></pre>"},{"location":"en/docker_installation/#backup-system","title":"Backup System","text":"<pre><code># Automatic localization backup\n#!/bin/bash\n# backup-localization.sh\n\nLOCATION_ID=$(grep \"LOCATION_ID\" .env | cut -d'=' -f2)\nBACKUP_DIR=\"/backup/localization\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\ntar -czf \"$BACKUP_DIR/localization_${LOCATION_ID}_${DATE}.tar.gz\" \\\n  config/localization.yml \\\n  .env \\\n  storage/\n\n# For combined installations (API Server + Local Server):\n# Backup both directories\n# tar -czf \"$BACKUP_DIR/carambus_combined_${DATE}.tar.gz\" \\\n#   /var/www/carambus_api \\\n#   /var/www/carambus\n</code></pre>"},{"location":"en/docker_installation/#common-problems","title":"Common Problems","text":""},{"location":"en/docker_installation/#container-wont-start","title":"Container won't start","text":"<pre><code># Check Docker status\nsudo systemctl status docker\n\n# View logs\ndocker compose logs\n\n# Restart container\ndocker compose restart\n</code></pre>"},{"location":"en/docker_installation/#scoreboard-wont-start-only-for-local-servers","title":"Scoreboard won't start (only for local servers)","text":"<pre><code># Clear browser cache\nrm -rf ~/.cache/chromium\n\n# Restart browser\npkill chromium\nchromium-browser --start-fullscreen --app=http://localhost:3000/scoreboard\n</code></pre>"},{"location":"en/docker_installation/#network-problems","title":"Network problems","text":"<pre><code># Check IP address\nip addr show\n\n# Restart network\nsudo systemctl restart networking\n</code></pre>"},{"location":"en/docker_installation/#log-analysis","title":"Log Analysis","text":"<pre><code># All logs\ndocker compose logs -f\n\n# Only Rails logs\ndocker compose logs -f web\n\n# Only database logs\ndocker compose logs -f postgres\n</code></pre>"},{"location":"en/docker_installation/#migration-from-existing-installations","title":"\ud83d\udd04 Migration from Existing Installations","text":""},{"location":"en/docker_installation/#step-1-create-backup","title":"Step 1: Create Backup","text":"<pre><code># Backup localization\ntar -czf localization_backup.tar.gz config/localization.yml .env\n\n# Backup database\ndocker compose exec postgres pg_dump -U www_data carambus &gt; carambus_backup.sql\n</code></pre>"},{"location":"en/docker_installation/#step-2-new-installation","title":"Step 2: New Installation","text":"<pre><code># Execute new deployment\n# For Local Server:\n./deploy-docker.sh carambus_raspberry www-data@192.168.178.53:8910 /var/www/carambus\n# For API Server:\n# ./deploy-docker.sh carambus_api_server www-data@newapi.carambus.de:8910 /var/www/carambus_api\n</code></pre>"},{"location":"en/docker_installation/#step-3-restore-data","title":"Step 3: Restore Data","text":"<pre><code># Restore localization\ntar -xzf localization_backup.tar.gz\n\n# Restore database\ndocker compose exec -T postgres psql -U www_data carambus &lt; carambus_backup.sql\n</code></pre>"},{"location":"en/docker_installation/#further-documentation","title":"\ud83d\udcd6 Further Documentation","text":"<ul> <li>Installation Overview - Installation overview</li> <li>Developer Guide - Developer documentation</li> <li>API Documentation - API reference</li> </ul>"},{"location":"en/docker_installation/#support","title":"\ud83c\udd98 Support","text":"<p>If you have problems: 1. Check the Installation Overview page 2. View logs: <code>docker compose logs</code> 3. Container status: <code>docker compose ps</code> 4. Restart system: <code>sudo reboot</code></p> <p>\ud83c\udf89 That's it! With this guide, you can easily install and manage Carambus.</p> <p>\ud83d\udca1 Tip: For development, use the parallel Docker systems on the macOS computer to test inter-system communication!</p> <p>\ud83c\udfd7\ufe0f Architecture: 2 production modes - API server (central) and local server (with Carambus API URL), both testable in development mode!</p> <p>\ud83d\udd11 Important: All installations use the standard <code>www-data</code> account and are accessible via SSH port 8910. Localization is only relevant for local servers with scoreboards. API server and local server can run on the same hardware with different installation paths (<code>/var/www/carambus_api</code> and <code>/var/www/carambus</code>).</p> <p>\ud83d\udcdd Note: All deploy scripts and documentation have been updated accordingly. Please use the updated commands with <code>www-data@</code> and the correct paths. </p>"},{"location":"en/installation_overview/","title":"\ud83d\ude80 Installation Overview","text":""},{"location":"en/installation_overview/#available-installation-guides","title":"\ud83d\udccb Available Installation Guides","text":""},{"location":"en/installation_overview/#docker-installation-recommended","title":"\ud83d\udc33 Docker Installation (Recommended)","text":"<p>Docker Installation - Complete guide for Docker-based installation of Carambus on various platforms.</p> <p>Supported Platforms: - Raspberry Pi - For local scoreboards and tournaments - Ubuntu Server - For professional hosting environments (e.g., Hetzner) - Combined Installation - API server + local server on the same hardware</p> <p>Advantages of Docker Installation: - \u2705 Consistent environment - \u2705 Easy migration - \u2705 Minimal technical effort - \u2705 Reproducible installations - \u2705 Automatic updates</p>"},{"location":"en/installation_overview/#manual-installation","title":"\ud83d\udd27 Manual Installation","text":"<p>For special requirements or when Docker is not available:</p> <ul> <li>Raspberry Pi Setup - Detailed guide for Pi-specific installation</li> <li>Ubuntu Server Setup - Server-specific configuration</li> <li>API Server Setup - Production server installation</li> </ul>"},{"location":"en/installation_overview/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"en/installation_overview/#production-modes","title":"Production Modes","text":"<ol> <li>API Server (<code>/var/www/carambus_api</code>)</li> <li>Central API for all local servers</li> <li>Domain: newapi.carambus.de</li> <li> <p>Can also function as hosting server</p> </li> <li> <p>Local Server (<code>/var/www/carambus</code>)</p> </li> <li>Local servers for tournaments/clubs</li> <li>Points to API server</li> <li>For scoreboards and local management</li> </ol>"},{"location":"en/installation_overview/#development-mode","title":"Development Mode","text":"<ul> <li>Both production modes can be tested in parallel</li> <li>On macOS computer with Docker</li> <li>Inter-system communication testable</li> </ul>"},{"location":"en/installation_overview/#important-configurations","title":"\ud83d\udd11 Important Configurations","text":""},{"location":"en/installation_overview/#standard-account","title":"Standard Account","text":"<ul> <li>User: <code>www-data</code> (uid=33, gid=33)</li> <li>Home Directory: <code>/var/www</code></li> <li>SSH Port: 8910</li> <li>Sudo: Via <code>wheel</code> group</li> </ul>"},{"location":"en/installation_overview/#installation-paths","title":"Installation Paths","text":"<ul> <li>API Server: <code>/var/www/carambus_api</code></li> <li>Local Server: <code>/var/www/carambus</code></li> </ul>"},{"location":"en/installation_overview/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"en/installation_overview/#1-choose-platform","title":"1. Choose Platform","text":"<pre><code># Raspberry Pi\n./deploy-docker.sh carambus_raspberry www-data@192.168.178.53:8910 /var/www/carambus\n\n# Ubuntu Server\n./deploy-docker.sh carambus_newapi www-data@carambus.de:8910 /var/www/carambus_api\n</code></pre>"},{"location":"en/installation_overview/#2-automatic-configuration","title":"2. Automatic Configuration","text":"<p>The deployment script automatically configures: - Docker containers - Database (PostgreSQL) - Cache (Redis) - Web server (Rails + Puma) - Nginx configuration - SSL certificates (for HTTPS)</p>"},{"location":"en/installation_overview/#3-localization-only-for-local-servers","title":"3. Localization (only for local servers)","text":"<ul> <li>Web-based configuration</li> <li>Region-specific settings</li> <li>Scoreboard configuration</li> </ul>"},{"location":"en/installation_overview/#further-documentation","title":"\ud83d\udcd6 Further Documentation","text":"<ul> <li>Docker Installation - Complete Docker guide</li> <li>Developer Guide - Developer documentation</li> <li>API Documentation - API reference</li> </ul>"},{"location":"en/installation_overview/#support","title":"\ud83c\udd98 Support","text":"<p>If you have problems: 1. Check the Docker Installation page 2. View logs: <code>docker compose logs</code> 3. Container status: <code>docker compose ps</code> 4. Restart system: <code>sudo reboot</code></p> <p>\ud83c\udfaf Goal: Simple, automated installation of Carambus on various platforms with consistent configuration. </p>"},{"location":"en/league/","title":"League Match Days","text":""},{"location":"en/league/#-","title":"---","text":"<p>title: League Match Day Management summary: The handling of league matches runs fundamentally different compared to individual tournaments and is therefore specially supported. The structure of league matches is predetermined for the individual leagues and does not change during a season. version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-05 14:34:15.052622000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-05 15:34:15.052622000 Z tags: [] metadata: {} position: 1 id: 2</p>"},{"location":"en/league/#league-match-day-management","title":"League Match Day Management","text":""},{"location":"en/league/#overview","title":"Overview","text":"<p>The handling of league matches runs fundamentally different compared to individual tournaments and is therefore specially supported. The structure of league matches is predetermined for the individual leagues and does not change during a season.</p> <p>The following phases are generally completed:</p> <ul> <li>Planning of match days and teams</li> <li>At the beginning of a match day, determination of players by the captains</li> <li>Per round, assignment of game tables to individual games</li> <li>Assignment of players to individual games per round</li> <li>Start of rounds and transfer of data to scoreboards</li> <li>Operation of scoreboards</li> <li>Handover of results to the Matchday Monitor and possibly to overview boards</li> <li>Automatic completion of a round, start of another round and possibly start of a shootout in case of a tie</li> <li>Transfer of results to the ClubCloud</li> </ul>"},{"location":"en/league/#planning-of-match-days-and-teams","title":"Planning of Match Days and Teams","text":"<p>The structure of match days for a league is determined at the beginning of the season at DBU or state level and formally entered in the ClubCloud. The scheduling of individual match days is also managed in the ClubCloud. Furthermore, the players eligible to play in the individual teams are determined.</p> <p>This data forms the basis for Carambus Matchday Management. The game director finds this data most easily through the game location, where all matches are listed.</p> <p>After opening the match day view, there is a link to the Matchday Monitor. In this view, the entire match day process is controlled.</p>"},{"location":"en/league/#determination-of-players-for-a-match-day","title":"Determination of Players for a Match Day","text":"<p>Carambus offers the players of the respective team from the entries in the ClubCloud for selection, plus players from subordinate leagues. After selection, the number of players available for the match day is unchangeably fixed.</p>"},{"location":"en/league/#assignment-of-tables","title":"Assignment of Tables","text":"<p>In Carambus, the tables available in a game location can be defined with name and type (Carom large, medium, small, Pool, Snooker). Round by round, tables must be assigned to individual games from this set.</p>"},{"location":"en/league/#assignment-of-players-to-games","title":"Assignment of Players to Games","text":"<p>After assigning the tables, the individual game pairings must now be filled. Only when all games of a round are occupied can the round be started.</p>"},{"location":"en/league/#transfer-of-data-to-scoreboards","title":"Transfer of Data to Scoreboards","text":"<p>With the start of the round, the individual game pairings appear on the scoreboards. After completion of a match, the results remain until the next pairing is called.</p>"},{"location":"en/league/#operation-of-scoreboards","title":"Operation of Scoreboards","text":"<p>The operation of scoreboards is done via touch input. Inputs can be undone at any time via Undo. This also applies after the end of the game, as long as the game has not been finally completed by the game director.</p>"},{"location":"en/league/#control-at-the-matchday-monitor","title":"Control at the Matchday Monitor","text":"<p>The entire monitoring of the match day can be done at the Matchday Monitor. The results are updated live in the monitor view. At the end, the result of the individual pairings must be confirmed.</p>"},{"location":"en/league/#automatic-round-completion-and-start","title":"Automatic Round Completion and Start","text":"<p>When all games of a round are confirmed, it automatically proceeds to the next round, or possibly to a shootout. The intermediate results and final result can be viewed at any scoreboard if needed (Start -&gt; Tournaments -&gt; Tournament).</p>"},{"location":"en/league/#upload-to-clubcloud","title":"Upload to ClubCloud","text":"<p>For upload to the ClubCloud, the form is offered, exactly as in the admin area of the ClubCloud. For this to work, a login to the ClubCloud with the same browser is necessary. </p>"},{"location":"en/mode_switcher/","title":"Carambus Mode Switcher","text":"<p>The Carambus Mode Switcher allows you to easily switch between LOCAL and API modes using a single development folder, eliminating the need to maintain two separate folders.</p>"},{"location":"en/mode_switcher/#overview","title":"\ud83c\udfaf Overview","text":"<p>Instead of having separate <code>carambus</code> and <code>carambus_api</code> folders, you can now use a single folder with a mode switcher that automatically updates the necessary configuration files using ERB templates.</p>"},{"location":"en/mode_switcher/#mode-differences","title":"\ud83d\udd04 Mode Differences","text":""},{"location":"en/mode_switcher/#local-mode","title":"LOCAL Mode","text":"<ul> <li>carambus_api_url: <code>https://newapi.carambus.de/</code></li> <li>Database: <code>carambus_development</code></li> <li>Deploy Server: Local testing server (<code>192.168.178.81</code>)</li> <li>Deploy Basename: <code>carambus</code></li> <li>Log File: <code>development-local.log</code> (symbolic link)</li> <li>Server Port: 3001</li> <li>Environment: <code>development-local</code></li> <li>Context: <code>NBV</code></li> <li>Purpose: Testing <code>local_server?</code> functionality</li> </ul>"},{"location":"en/mode_switcher/#api-mode","title":"API Mode","text":"<ul> <li>carambus_api_url: Empty (nil)</li> <li>Database: <code>carambus_api_development</code></li> <li>Deploy Server: Production server (<code>carambus.de</code>)</li> <li>Deploy Basename: <code>carambus_api</code></li> <li>Log File: <code>development-api.log</code> (symbolic link)</li> <li>Server Port: 3000</li> <li>Environment: <code>development-api</code></li> <li>Context: Empty (nil)</li> <li>Purpose: Normal API development</li> </ul>"},{"location":"en/mode_switcher/#usage","title":"\ud83d\ude80 Usage","text":""},{"location":"en/mode_switcher/#rake-tasks-primary-method","title":"Rake Tasks (Primary Method)","text":"<pre><code># Switch to LOCAL mode\nbundle exec rails mode:local\n\n# Switch to API mode\nbundle exec rails mode:api\n\n# Check current mode\nbundle exec rails mode:status\n\n# Create backup\nbundle exec rails mode:backup\n</code></pre>"},{"location":"en/mode_switcher/#manual-server-startup","title":"Manual Server Startup","text":"<pre><code># LOCAL mode server\nbundle exec rails server -p 3001 -e development-local\n\n# API mode server\nbundle exec rails server -p 3000 -e development-api\n\n# LOCAL mode console\nbundle exec rails console -e development-local\n\n# API mode console\nbundle exec rails console -e development-api\n</code></pre>"},{"location":"en/mode_switcher/#files-modified","title":"\ud83d\udcc1 Files Modified","text":"<p>The mode switcher uses ERB templates to generate these configuration files:</p> <ol> <li><code>config/carambus.yml</code> (generated from <code>config/carambus.yml.erb</code>)</li> <li><code>carambus_api_url</code> value</li> <li><code>context</code> value</li> <li><code>basename</code> value</li> <li><code>carambus_domain</code> value</li> <li><code>location_id</code> value</li> <li><code>application_name</code> value</li> <li> <p><code>club_id</code> value</p> </li> <li> <p><code>config/database.yml</code> (generated from <code>config/database.yml.erb</code>)</p> </li> <li> <p>Development database name</p> </li> <li> <p><code>config/deploy.rb</code> (generated from <code>config/deploy.rb.erb</code>)</p> </li> <li> <p>Deploy basename (fixes folder name dependency)</p> </li> <li> <p><code>log/development.log</code></p> </li> <li>Symbolic link to mode-specific log file</li> <li><code>development-local.log</code> for LOCAL mode</li> <li><code>development-api.log</code> for API mode</li> </ol>"},{"location":"en/mode_switcher/#safety-features","title":"\ud83d\udee1\ufe0f Safety Features","text":""},{"location":"en/mode_switcher/#automatic-backups","title":"Automatic Backups","text":"<ul> <li>Creates timestamped backups before switching modes</li> <li>Backups stored in <code>tmp/mode_backups/</code></li> <li>Easy restoration if needed</li> </ul>"},{"location":"en/mode_switcher/#status-checking","title":"Status Checking","text":"<ul> <li>Shows current configuration before switching</li> <li>Displays mode differences clearly</li> <li>Validates configuration files</li> </ul>"},{"location":"en/mode_switcher/#template-validation","title":"Template Validation","text":"<ul> <li>Checks for required ERB template files</li> <li>Provides clear error messages if templates are missing</li> <li>Ensures proper template substitution</li> </ul>"},{"location":"en/mode_switcher/#visual-indicators","title":"\ud83c\udfa8 Visual Indicators","text":""},{"location":"en/mode_switcher/#mode-helper","title":"Mode Helper","text":"<p>Use the <code>ModeHelper</code> in your views to display the current mode:</p> <pre><code>&lt;!-- Simple mode badge --&gt;\n&lt;%= render_mode_indicator %&gt;\n\n&lt;!-- Mode badge with tooltip --&gt;\n&lt;%= render_mode_tooltip %&gt;\n</code></pre>"},{"location":"en/mode_switcher/#available-methods","title":"Available Methods","text":"<ul> <li><code>current_mode</code> - Returns 'LOCAL' or 'API'</li> <li><code>mode_badge_class</code> - CSS classes for styling</li> <li><code>mode_icon</code> - Emoji icon (\ud83c\udfe0 for LOCAL, \ud83c\udf10 for API)</li> <li><code>mode_description</code> - Human-readable description</li> </ul>"},{"location":"en/mode_switcher/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"en/mode_switcher/#erb-templates","title":"ERB Templates","text":"<p>The mode switcher uses these ERB template files:</p> <ul> <li><code>config/carambus.yml.erb</code> - Main configuration template</li> <li><code>config/database.yml.erb</code> - Database configuration template  </li> <li><code>config/deploy.rb.erb</code> - Deployment configuration template</li> </ul>"},{"location":"en/mode_switcher/#template-variables","title":"Template Variables","text":"<p>The templates use these variables that get substituted during mode switching:</p> <ul> <li><code>&lt;%= carambus_api_url %&gt;</code> - API URL for the mode</li> <li><code>&lt;%= database %&gt;</code> - Database name for the mode</li> <li><code>&lt;%= basename %&gt;</code> - Deploy basename for the mode</li> <li><code>&lt;%= context %&gt;</code> - Context identifier for the mode</li> <li><code>&lt;%= carambus_domain %&gt;</code> - Domain for the mode</li> <li><code>&lt;%= location_id %&gt;</code> - Location ID for the mode</li> <li><code>&lt;%= application_name %&gt;</code> - Application name</li> <li><code>&lt;%= club_id %&gt;</code> - Club ID for the mode</li> </ul>"},{"location":"en/mode_switcher/#workflow-examples","title":"\ud83d\udccb Workflow Examples","text":""},{"location":"en/mode_switcher/#testing-local-server-functionality","title":"Testing Local Server Functionality","text":"<pre><code># Switch to LOCAL mode\nbundle exec rails mode:local\n\n# Start LOCAL server\nbundle exec rails server -p 3001 -e development-local\n\n# Test local_server? functionality\n# The application will now behave as if it's running locally\n</code></pre>"},{"location":"en/mode_switcher/#normal-api-development","title":"Normal API Development","text":"<pre><code># Switch to API mode\nbundle exec rails mode:api\n\n# Start API server\nbundle exec rails server -p 3000 -e development-api\n\n# Normal API development with production API connection\n</code></pre>"},{"location":"en/mode_switcher/#running-both-environments-simultaneously","title":"Running Both Environments Simultaneously","text":"<pre><code># Terminal 1: Start LOCAL server\nbundle exec rails mode:local\nbundle exec rails server -p 3001 -e development-local\n\n# Terminal 2: Start API server  \nbundle exec rails mode:api\nbundle exec rails server -p 3000 -e development-api\n\n# You can now test both environments side by side!\n</code></pre>"},{"location":"en/mode_switcher/#quick-mode-check","title":"Quick Mode Check","text":"<pre><code># Check current mode before making changes\nbundle exec rails mode:status\n\n# Output example:\n# Current Configuration:\n#   API URL: https://newapi.carambus.de/\n#   Context: NBV\n#   Database: carambus_development\n#   Deploy Basename: carambus\n#   Log File: development-local.log\n# Current Mode: LOCAL\n</code></pre>"},{"location":"en/mode_switcher/#important-notes","title":"\ud83d\udea8 Important Notes","text":"<ol> <li> <p>Database Creation: You need to create both databases:    <pre><code>bundle exec rails db:create RAILS_ENV=development\n# Then switch modes and create the other database\n</code></pre></p> </li> <li> <p>ERB Templates: Ensure all required ERB template files exist:</p> </li> <li><code>config/carambus.yml.erb</code></li> <li><code>config/database.yml.erb</code></li> <li> <p><code>config/deploy.rb.erb</code></p> </li> <li> <p>Environment Variables: The mode switcher preserves your existing environment variable configuration.</p> </li> <li> <p>Git Integration: Configuration changes are not automatically committed. Commit mode changes when appropriate.</p> </li> <li> <p>Backup Restoration: To restore from backup:    <pre><code>cp tmp/mode_backups/config_backup_TIMESTAMP/* config/\n</code></pre></p> </li> </ol>"},{"location":"en/mode_switcher/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"en/mode_switcher/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Missing ERB Templates: Ensure all template files exist:    <pre><code>ls -la config/*.erb\n</code></pre></p> </li> <li> <p>Database Connection Errors: Ensure both databases exist:    <pre><code>bundle exec rails db:create RAILS_ENV=development\n</code></pre></p> </li> <li> <p>Configuration Not Updated: Check file permissions and try running with <code>sudo</code> if needed.</p> </li> <li> <p>Template Substitution Errors: Verify ERB syntax in template files.</p> </li> </ol>"},{"location":"en/mode_switcher/#verification","title":"Verification","text":"<p>After switching modes, verify the changes:</p> <pre><code># Check carambus.yml\ngrep -A 5 \"development:\" config/carambus.yml\n\n# Check database.yml\ngrep -A 3 \"development:\" config/database.yml\n\n# Check deploy.rb basename\ngrep \"set :basename,\" config/deploy.rb\n\n# Check log file link\nls -la log/development.log\n</code></pre>"},{"location":"en/mode_switcher/#template-debugging","title":"Template Debugging","text":"<p>To debug template issues:</p> <pre><code># Check template content\ncat config/carambus.yml.erb\ncat config/database.yml.erb\ncat config/deploy.rb.erb\n\n# Verify template variables are properly formatted\ngrep -n \"&lt;%=\" config/*.erb\n</code></pre> <p>This enhanced mode switcher uses ERB templates for better maintainability and eliminates the complexity of managing two separate development folders while maintaining clear separation between local testing and API development modes. </p>"},{"location":"en/table_reservation_heating_control/","title":"Table Reservation and Heating Control","text":"<p>BC Wedel, Gernot, May 7, 2024</p> <p>This documentation describes the processes for table reservations and automatic heating control at BC Wedel.</p>"},{"location":"en/table_reservation_heating_control/#table-reservations","title":"Table Reservations","text":""},{"location":"en/table_reservation_heating_control/#reservation-process","title":"Reservation Process","text":"<p>Table reservations can be made by authorized members in the central Google Calendar \"BC Wedel\".</p>"},{"location":"en/table_reservation_heating_control/#calendar-access","title":"Calendar Access","text":"<p>Access links can be requested by sending an informal email to the following addresses: - <code>gernot.ullrich@gmx.de</code> - <code>wcauel@gmail.com</code></p>"},{"location":"en/table_reservation_heating_control/#reservation-title-format","title":"Reservation Title Format","text":"<p>The title of the reservation must follow a specific format to be correctly evaluated by Carambus.</p>"},{"location":"en/table_reservation_heating_control/#examples-of-reservation-titles","title":"Examples of reservation titles:","text":"<ul> <li>Single table: <code>T6 Gernot + Lothar</code></li> <li>Multiple tables: <code>T1, T4-T8 Clubabend</code></li> <li>Tournament with discipline: <code>T5, T7 NDM Cadre 35/2 Klasse 5-6</code></li> </ul> <p>Note: The term \"Cadre\" is a special term that must be used in the reservation.</p>"},{"location":"en/table_reservation_heating_control/#heating-control-table-heaters","title":"Heating Control (Table Heaters)","text":"<p>The table heaters are automatically controlled based on calendar entries and activities on the Scoreboard.</p>"},{"location":"en/table_reservation_heating_control/#activation-on","title":"Activation (ON)","text":"<p>The heaters are automatically activated:</p> <ol> <li>2 hours before a reservation</li> <li>At the latest within 5 minutes, when a game is recognized on the Scoreboard</li> </ol>"},{"location":"en/table_reservation_heating_control/#deactivation-off","title":"Deactivation (OFF)","text":"<p>The heaters are automatically deactivated:</p> <ol> <li>After reservation start: If no activity is recognized on the Scoreboard for one hour</li> <li>Without running reservation: If no reservation is running and no activity is recognized on the Scoreboard for one hour</li> </ol>"},{"location":"en/table_reservation_heating_control/#technical-integration","title":"Technical Integration","text":""},{"location":"en/table_reservation_heating_control/#carambus-system","title":"Carambus System","text":"<p>The Carambus system evaluates the calendar entries and coordinates the heating control.</p>"},{"location":"en/table_reservation_heating_control/#scoreboard-integration","title":"Scoreboard Integration","text":"<p>The Scoreboard recognizes game activities and communicates them to the heating control system.</p>"},{"location":"en/table_reservation_heating_control/#maintenance-and-support","title":"Maintenance and Support","text":""},{"location":"en/table_reservation_heating_control/#calendar-access_1","title":"Calendar Access","text":"<p>For problems with calendar access, contact: - <code>gernot.ullrich@gmx.de</code> - <code>wcauel@gmail.com</code></p>"},{"location":"en/table_reservation_heating_control/#heating-problems","title":"Heating Problems","text":"<p>For problems with heating control: 1. Check calendar entries for correct formatting 2. Monitor Scoreboard activity 3. Contact the system administrator</p>"},{"location":"en/table_reservation_heating_control/#change-history","title":"Change History","text":"<ul> <li>May 7, 2024: First version of documentation</li> <li>Created by: Gernot Ullrich</li> <li>Location: BC Wedel</li> </ul> <p>This documentation is part of the Carambus operational documentation for BC Wedel. </p>"},{"location":"en/terms/","title":"Terms","text":""},{"location":"en/tournament/","title":"Tournament Management","text":""},{"location":"en/tournament/#-","title":"---","text":"<p>title: Tournament Management summary: version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-07 22:00:25.243335000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-07 23:00:25.243335000 Z tags: [] metadata: {} position: 0 id: 50000002</p>"},{"location":"en/tournament/#tournament-management","title":"Tournament Management","text":""},{"location":"en/tournament/#account","title":"Account","text":"<p>For Carambus tournament management, an account with admin rights on the Carambus Location Server is required. This can be set up by the club chairman or Carambus developer. The URL can be derived from the scoreboard URLs, e.g., in Wedel http://192.168.2.143:3131.</p>"},{"location":"en/tournament/#synchronization-with-clubcloud","title":"Synchronization with ClubCloud","text":"<p>Tournaments can be found best via <code>Regional Associations -&gt; Search -&gt; View</code>.</p> <p>There you will find the currently known tournaments of the current season. The tournament can be selected by title. If a tournament is not yet listed, there can be several reasons:</p> <ul> <li>The tournament is not yet registered in ClubCloud</li> <li>The central Carambus API server does not yet know the tournament</li> <li>The tournament has not yet been transferred to the local Location Server</li> </ul>"},{"location":"en/tournament/#the-tournament-is-not-yet-registered-in-clubcloud","title":"The tournament is not yet registered in ClubCloud","text":"<p>It is the task of the state sports supervisor to enter the tournaments with the participant lists in ClubCloud.</p>"},{"location":"en/tournament/#the-central-carambus-api-server-does-not-yet-know-the-tournament","title":"The central Carambus API server does not yet know the tournament","text":"<p>The API server is currently maintained by the Carambus developer (mailto: gernot.ullrich@gmx.de). Tournament data from Carambus-using regions are automatically updated daily at 20:00 from the associated regional ClubCloud server.</p> <p>Local servers always request updates from ClubCloud via the central API server (api.carambus.de). This server fetches data from the various ClubCloud instances. With the specific updates, all updates that have been made on the API server in the meantime are also transmitted.</p>"},{"location":"en/tournament/#the-tournament-has-not-yet-been-transferred-to-the-local-location-server","title":"The tournament has not yet been transferred to the local Location Server","text":"<p>A locally non-existent tournament that exists on the API server is automatically loaded with every update request to the API server, because with every request to the API server the entire data set is synchronized. Such an explicit request can be, for example, updating the club data: <code>Clubs -&gt; Search -&gt; View -&gt; \"Data synchronization with ClubCloud with all details\"</code></p>"},{"location":"en/tournament/#updating-regional-association-club-player-tournament-seeding-lists","title":"Updating Regional Association, Club, Player, Tournament, Seeding Lists","text":"<p>When explicitly fetching data, the requested data is compared with the Billiards Area on the API server.</p> <p>The following explicit data requests are implemented:</p> <ul> <li><code>Club -&gt; Data synchronization with ClubCloud</code></li> <li><code>Club -&gt; Data synchronization with ClubCloud with all details</code></li> <li><code>Regional Association -&gt; Data synchronization with ClubCloud incl. Clubs</code></li> <li><code>Regional Association -&gt; Data synchronization with ClubCloud incl. Clubs and Players</code></li> <li><code>Tournament -&gt; Data synchronization with ClubCloud</code></li> </ul>"},{"location":"en/tournament/#tournament-management_1","title":"Tournament Management","text":"<p>A tournament is generally managed in the following phases:</p> <ul> <li>Synchronization with ClubCloud</li> <li>Verification of relevant data</li> <li>Sorting of seeding list according to rankings</li> <li>Selection of tournament mode</li> <li>Local adjustment of tournament parameters</li> <li>Check of local scoreboards</li> <li>Start of tournament</li> <li>Synchronization of match results with game protocols</li> <li>Email with game results (csv) to tournament director</li> <li>Upload of game results (csv) to ClubCloud</li> <li>Synchronization with ClubCloud for final check</li> </ul>"},{"location":"en/tournament/#synchronization-with-clubcloud_1","title":"Synchronization with ClubCloud","text":"<p>As described above, the tournament can first be loaded, for example, by synchronizing club data</p> <p>If a tournament is already known locally, an update can be requested again at any time: <code>Region -&gt; Tournament -&gt; Data synchronization with ClubCloud</code></p>"},{"location":"en/tournament/#verification-of-relevant-data","title":"Verification of relevant data","text":"<p>For the course of a tournament, the following data is important:</p> <ul> <li>Organizer (Regional Association or Club)</li> <li>Discipline (for table assignments)</li> <li>Date</li> <li>Season</li> <li>Venue (for table assignments)</li> </ul> <p>This data is usually automatically pulled from ClubCloud. A special case is the venue. Unfortunately, regarding the venue on ClubCloud, free text input is possible. However, for table assignment in Carambus, the selection of a formally defined venue with table configuration is necessary (table name, table type) Furthermore, it must be specified whether it is a handicap tournament.</p> <p>This data must be supplemented via <code>Tournament -&gt; Edit -&gt; Update Tournament</code></p>"},{"location":"en/tournament/#sorting-of-seeding-list-according-to-rankings","title":"Sorting of seeding list according to rankings","text":"<p>With the BA synchronization, the participant list (seeding list) is transferred.</p> <p>For handicap tournaments, the handicaps can be entered: <code>Tournament -&gt; Update seeding list</code> This list can now be sorted locally according to player rankings: <code>Tournament -&gt; Sort by ranking or handicap</code></p> <p>The order can now still be changed by swapping places with the up/down arrows.</p> <p>The order is then finally completed with <code>Tournament -&gt; Finalize ranking list (not reversible)</code></p>"},{"location":"en/tournament/#selection-of-tournament-mode","title":"Selection of tournament mode","text":"<p>Now jump to tournament mode selection: <code>Tournament -&gt; Set tournament mode</code></p> <p>Usually several options are available. The tournament director can select a mode - usually already specified by the state sports supervisor for tournaments of regional associations.</p> <p>Selection by clicking e.g. <code>Continue with T07</code></p>"},{"location":"en/tournament/#local-adjustment-of-tournament-parameters","title":"Local adjustment of tournament parameters","text":"<p>The following parameters can now still be adjusted:</p> <ul> <li>Assignment of tables (mapping internal table name to external name)</li> <li>Ball target (possibly already specified for tournament)</li> <li>Shot limit (possibly already specified for tournament)</li> <li>Timeout in sec (0 or no input if no timeouts)</li> <li>Timeouts (n timeout extensions maximum)</li> <li>Checkbox \"Tournament manager checks results before acceptance\"</li> <li>Warm-up time</li> <li>shortened warm-up time (when switching to an already played table)</li> </ul> <p>Regarding the checkbox: Normally, players can advance the game status, e.g., after <code>Game ended - OK?</code>. If a check by tournament manager is required, this is prevented and the tournament director can release the table after checking with the game protocol.</p> <p>The new pairings appear automatically on the scoreboards. Finally:</p>"},{"location":"en/tournament/#email-with-game-results-csv-to-tournament-director","title":"Email with game results (csv) to tournament director","text":"<p>After completion of the tournament, the tournament director automatically receives an email with a CSV file containing the results in the format required for upload to ClubCloud. This file is also saved on the local server ({carambus}/tmp/result-{ba_id}.csv)</p>"},{"location":"en/tournament/#upload-of-game-results-csv-to-clubcloud","title":"Upload of game results (csv) to ClubCloud","text":"<p>The tournament director can upload the CSV file directly to ClubCloud (he knows how to do that ;-)</p>"},{"location":"en/tournament/#synchronization-with-clubcloud-for-final-check","title":"Synchronization with ClubCloud for final check","text":"<p>As a final step, another synchronization with ClubCloud can be performed. The data downloaded with this is the basis for later calculated rankings. </p>"},{"location":"en/verwaltung-von-ligaspieltagen/","title":"Verwaltung von ligaspieltagen","text":""},{"location":"en/admin_roles/","title":"Admin Roles","text":""},{"location":"en/admin_roles/#rollenmatrix","title":"Rollenmatrix","text":"Recht Player Club Admin System Admin Turniere erstellen Nein Ja Ja Benutzer verwalten Nein Nein Ja Systemeinstellungen Nein Nein Ja"},{"location":"en/data_management/","title":"Data Management","text":""},{"location":"en/data_management/#id-bereiche","title":"ID-Bereiche","text":"Bereich Beschreibung Bearbeitungsrechte &lt; 5.000.000 Importierte ClubCloud-Daten Nur lesend 5.000.000 - ... Lokal erstellte Eintr\u00e4ge Vollzugriff <p>Wichtige Felder: - <code>source_url</code>: Original-URL in der ClubCloud - <code>data</code>: Lokale Erweiterungen/Anpassungen </p>"},{"location":"en/database_syncing/","title":"Database Syncing","text":""},{"location":"en/database_syncing/#-","title":"---","text":"<p>title: Datenbank-Partitionierung und Synchronisierung summary: 'Das System implementiert eine regionsbasierte Datenbank-Partitionierungsstrategie   zur Optimierung der Datensynchronisierung zwischen lokalen Servern und dem zentralen   API-Server. Dieser Ansatz stellt sicher, dass jeder lokale Server nur die f\u00fcr seine   Region relevanten Daten verwaltet und gleichzeitig Zugriff auf notwendige globale   Ereignisse hat. Zus\u00e4tzlich werden regionsunabh\u00e4ngige Daten an alle lokalen Server   synchronisiert.</p> <p>' version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-04-29 21:19:03.426133000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-04-29 23:19:03.426133000 Z tags: [] metadata: {} position: 0 id: 10</p>"},{"location":"en/database_syncing/#ubersicht","title":"\u00dcbersicht","text":"<p>Das System implementiert eine regionsbasierte Datenbank-Partitionierungsstrategie zur Optimierung der Datensynchronisierung zwischen lokalen Servern und dem zentralen API-Server. Dieser Ansatz stellt sicher, dass jeder lokale Server nur die f\u00fcr seine Region relevanten Daten verwaltet und gleichzeitig Zugriff auf notwendige globale Ereignisse hat. Zus\u00e4tzlich werden regionsunabh\u00e4ngige Daten an alle lokalen Server synchronisiert.</p>"},{"location":"en/database_syncing/#hauptkomponenten","title":"Hauptkomponenten","text":""},{"location":"en/database_syncing/#1-regions-tagging-regiontaggable","title":"1. Regions-Tagging (RegionTaggable)","text":"<ul> <li>Datens\u00e4tze werden mit einem <code>region_id</code> markiert, um ihre regionale Zuordnung zu verfolgen</li> <li>Ein <code>global_context</code> Boolean-Flag kennzeichnet Datens\u00e4tze, die an globalen Ereignissen teilnehmen</li> <li>Datens\u00e4tze ohne regionale Abh\u00e4ngigkeiten (region_id ist NULL) werden an alle Server synchronisiert</li> <li>Implementiert als Concern in <code>app/models/concerns/region_taggable.rb</code></li> </ul>"},{"location":"en/database_syncing/#2-versionsverwaltung","title":"2. Versionsverwaltung","text":"<ul> <li>Nutzt PaperTrail f\u00fcr die Versionsverfolgung</li> <li>Versionen werden mit <code>region_id</code> markiert, um die regionale Relevanz zu verfolgen</li> <li>Versionen mit NULL region_id werden als global betrachtet und an alle Server gesendet</li> </ul>"},{"location":"en/database_syncing/#3-synchronisierungslogik","title":"3. Synchronisierungslogik","text":"<ul> <li>Lokale Server erhalten nur Daten mit <code>region_id</code> ihrer Region oder <code>global_context = true</code></li> <li>Globale Ereignisse (DBU-Turniere, etc.) werden an alle Server synchronisiert</li> <li>Regionsunabh\u00e4ngige Daten (Konfigurationen, etc.) werden an alle Server gesendet</li> </ul>"},{"location":"en/database_syncing/#implementierung","title":"Implementierung","text":""},{"location":"en/database_syncing/#regiontaggable-concern","title":"RegionTaggable Concern","text":"<pre><code>module RegionTaggable\n  extend ActiveSupport::Concern\n\n  included do\n    after_save :update_region_tagging\n    after_destroy :update_region_tagging\n  end\n\n  def find_associated_region_id\n    # Berechnet die region_id basierend auf dem Modelltyp\n  end\n\n  def global_context?\n    # Bestimmt, ob der Datensatz globalen Kontext hat\n  end\nend\n</code></pre>"},{"location":"en/database_syncing/#versions-scope","title":"Versions-Scope","text":"<pre><code>scope :for_region, -&gt;(region_id) {\n  where(\"region_id IS NULL OR region_id = ?\", region_id)\n}\n</code></pre>"},{"location":"en/database_syncing/#verwendung","title":"Verwendung","text":""},{"location":"en/database_syncing/#rake-tasks","title":"Rake Tasks","text":"<pre><code># Region-IDs f\u00fcr alle Modelle aktualisieren\nrails region_taggings:update_all_region_ids\n\n# Region-Tagging f\u00fcr alle Modelle aktualisieren\nrails region_taggings:update_all\n\n# Global Context f\u00fcr Datens\u00e4tze setzen\nrails region_taggings:set_global_context\n\n# Region-Tagging verifizieren\nrails region_taggings:verify\n</code></pre>"},{"location":"en/database_syncing/#modelle-mit-regiontaggable","title":"Modelle mit RegionTaggable","text":"<ul> <li>Region, Club, Tournament, League, Party</li> <li>Location, LeagueTeam, Game, PartyGame, GameParticipation</li> <li>Player, SeasonParticipation, Seeding</li> </ul>"},{"location":"en/database_syncing/#migration-von-altem-system","title":"Migration von altem System","text":"<p>Das System wurde von einem komplexen polymorphic <code>region_taggings</code> System zu einem einfachen <code>region_id</code> + <code>global_context</code> System migriert:</p> <ol> <li>Altes System: <code>region_ids</code> Array mit polymorphic <code>region_taggings</code> Tabelle</li> <li>Neues System: Einzelne <code>region_id</code> mit <code>global_context</code> Boolean</li> </ol>"},{"location":"en/database_syncing/#vorteile-des-neuen-systems","title":"Vorteile des neuen Systems","text":"<ul> <li>Einfacher zu verstehen und zu warten</li> <li>Bessere Performance durch direkte Indizes</li> <li>Klarere Trennung zwischen regionalen und globalen Daten</li> <li>Weniger Komplexit\u00e4t in der Synchronisierungslogik</li> </ul>"},{"location":"en/er_diagram/","title":"ER Diagram","text":"<pre><code>erDiagram\n    Region ||--o{ Club : \"has many\"\n    Region ||--o{ Tournament : \"organizes\"\n    Region ||--o{ League : \"organizes\"\n\n    Club ||--o{ Location : \"has many through club_locations\"\n    Club ||--o{ LeagueTeam : \"has many\"\n    Club ||--o{ Tournament : \"organizes\"\n    Club ||--o{ SeasonParticipation : \"has many\"\n\n    Tournament ||--o{ Game : \"has many\"\n    Tournament ||--o{ Seeding : \"has many\"\n    Tournament ||--o{ Team : \"has many\"\n    Tournament ||--o{ Location : \"uses\"\n    Tournament ||--o{ League : \"belongs to\"\n\n    League ||--o{ LeagueTeam : \"has many\"\n    League ||--o{ Party : \"has many\"\n    League ||--o{ Tournament : \"has many\"\n\n    Party ||--o{ Game : \"has many\"\n    Party ||--o{ PartyGame : \"has many\"\n    Party ||--o{ Seeding : \"has many\"\n    Party ||--o{ Location : \"uses\"\n    Party ||--o{ LeagueTeam : \"has teams\"\n\n    Location ||--o{ Party : \"hosts\"\n    Location ||--o{ Tournament : \"hosts\"\n    Location ||--o{ Club : \"belongs to many\"\n\n    LeagueTeam ||--o{ Party : \"participates in\"\n    LeagueTeam ||--o{ Seeding : \"has many\"\n\n    Game ||--o{ GameParticipation : \"has many\"\n    Game ||--o{ PartyGame : \"has many\"\n\n    Player ||--o{ GameParticipation : \"has many\"\n    Player ||--o{ SeasonParticipation : \"has many\"\n    Player ||--o{ Seeding : \"has many\"\n    Player ||--o{ PartyGame : \"plays in\"\n\n    SeasonParticipation ||--o{ Player : \"belongs to\"\n    SeasonParticipation ||--o{ Club : \"belongs to\"\n    SeasonParticipation ||--o{ Season : \"belongs to\"\n\n    Seeding ||--o{ Player : \"belongs to\"\n    Seeding ||--o{ Tournament : \"belongs to\"\n    Seeding ||--o{ LeagueTeam : \"belongs to\"\n    Seeding ||--o{ Discipline : \"has\"\n\n    PartyGame ||--o{ Party : \"belongs to\"\n    PartyGame ||--o{ Player : \"has players\"\n    PartyGame ||--o{ Discipline : \"has\"\n    PartyGame ||--o{ Game : \"belongs to\"\n\n    GameParticipation ||--o{ Game : \"belongs to\"\n    GameParticipation ||--o{ Player : \"belongs to\"\n\n    %% Entity definitions with their key attributes\n    Region {\n        int id PK\n        string name\n        string shortname\n    }\n\n    Club {\n        int id PK\n        string name\n        string shortname\n        int region_id FK\n    }\n\n    Tournament {\n        int id PK\n        string title\n        int organizer_id FK\n        string organizer_type\n        int location_id FK\n        int league_id FK\n    }\n\n    League {\n        int id PK\n        string name\n        int organizer_id FK\n        string organizer_type\n    }\n\n    Party {\n        int id PK\n        int league_id FK\n        int location_id FK\n        int league_team_a_id FK\n        int league_team_b_id FK\n    }\n\n    Location {\n        int id PK\n        string name\n        string address\n        int organizer_id FK\n        string organizer_type\n    }\n\n    LeagueTeam {\n        int id PK\n        string name\n        int club_id FK\n        int league_id FK\n    }\n\n    Game {\n        int id PK\n        int tournament_id FK\n        string tournament_type\n        string gname\n    }\n\n    Player {\n        int id PK\n        string firstname\n        string lastname\n        string fl_name\n    }\n\n    SeasonParticipation {\n        int id PK\n        int player_id FK\n        int club_id FK\n        int season_id FK\n    }\n\n    Seeding {\n        int id PK\n        int player_id FK\n        int tournament_id FK\n        string tournament_type\n        int league_team_id FK\n        int position\n    }\n\n    PartyGame {\n        int id PK\n        int party_id FK\n        int player_a_id FK\n        int player_b_id FK\n        int discipline_id FK\n        int seqno\n    }\n\n    GameParticipation {\n        int id PK\n        int game_id FK\n        int player_id FK\n        string role\n        int points\n        int result\n    }\n</code></pre>"},{"location":"en/filter_popup_usage/","title":"Filter Popup Usage Guide","text":"<p>This guide explains how to use the filter popup component in your application.</p>"},{"location":"en/filter_popup_usage/#overview","title":"Overview","text":"<p>The filter popup provides a user-friendly interface for filtering data in tables. It automatically generates filter fields based on the <code>COLUMN_NAMES</code> hash defined in your models.</p>"},{"location":"en/filter_popup_usage/#requirements","title":"Requirements","text":"<ol> <li>Your model must have a <code>self.search_hash</code> method that returns a hash with a <code>:column_names</code> key.</li> <li>The <code>:column_names</code> key should contain a hash mapping display names to column definitions.</li> </ol>"},{"location":"en/filter_popup_usage/#adding-the-filter-popup-to-a-view","title":"Adding the Filter Popup to a View","text":"<p>To add the filter popup to a view, use the shared partial:</p> <pre><code>&lt;%= render partial: 'shared/search_with_filter', locals: { \n  model_class: YourModel, \n} %&gt;\n</code></pre>"},{"location":"en/filter_popup_usage/#model-configuration","title":"Model Configuration","text":"<p>Your model should have a <code>COLUMN_NAMES</code> hash and a <code>self.search_hash</code> method:</p> <pre><code>class YourModel &lt; ApplicationRecord\n  COLUMN_NAMES = {\n    \"ID\" =&gt; \"your_models.id\",\n    \"Name\" =&gt; \"your_models.name\",\n    \"Date\" =&gt; \"your_models.created_at::date\",\n    \"Related Model\" =&gt; \"related_models.name\"\n  }.freeze\n\n  def self.search_hash(params)\n    {\n      model: YourModel,\n      sort: params[:sort],\n      direction: sort_direction(params[:direction]),\n      search: [params[:sSearch], params[:search]].compact.join(\"&amp;\").to_s,\n      column_names: YourModel::COLUMN_NAMES,\n      raw_sql: \"(your_models.name ilike :search)\",\n      joins: [:related_model]\n    }\n  end\nend\n</code></pre>"},{"location":"en/filter_popup_usage/#field-types","title":"Field Types","text":"<p>The filter popup automatically determines field types based on the column definition:</p> <ul> <li>Date fields: Columns ending with <code>::date</code></li> <li>Number fields: Columns ending with <code>_id</code> or <code>.id</code></li> <li>Text fields: All other columns</li> </ul>"},{"location":"en/filter_popup_usage/#comparison-operators","title":"Comparison Operators","text":"<p>For date and number fields, the filter popup provides comparison operators: - Contains (default) - Equal to (=) - Greater than (&gt;) - Greater than or equal to (&gt;=) - Less than (&lt;) - Less than or equal to (&lt;=)</p>"},{"location":"en/filter_popup_usage/#search-syntax","title":"Search Syntax","text":"<p>The filter popup generates search queries in the format:</p> <pre><code>field:value field2:&gt;value2 field3:&lt;=value3\n</code></pre> <p>This syntax is processed by the <code>apply_filters</code> method in the <code>FiltersHelper</code> module.</p>"},{"location":"en/filter_popup_usage/#customization","title":"Customization","text":"<p>To customize the appearance of the filter popup, modify the CSS in <code>app/assets/stylesheets/filter_popup.css</code>.</p> <p>To customize the behavior, modify the Stimulus controller in <code>app/javascript/controllers/filter_popup_controller.js</code>. </p>"},{"location":"en/game_plan_reconstruction/","title":"GamePlan Reconstruction","text":"<p>This document explains how to reconstruct GamePlans from existing data without re-scraping.</p>"},{"location":"en/game_plan_reconstruction/#overview","title":"Overview","text":"<p>After scraping leagues with <code>opts[:cleanup] == true</code>, the GamePlans may become inconsistent with the new data. This functionality allows you to reconstruct GamePlans from the existing parties and party_games data without performing a full re-scraping.</p>"},{"location":"en/game_plan_reconstruction/#key-features","title":"Key Features","text":"<ul> <li>Efficient Structure Analysis: Analyzes only one party per league to extract the game plan structure (since structure doesn't change within a season)</li> <li>Shared GamePlans: Leagues with the same region, discipline, and name but different seasons share the same GamePlan</li> <li>Comprehensive Statistics: Analyzes all parties to build accurate statistics for game points, sets, balls, innings, etc.</li> </ul>"},{"location":"en/game_plan_reconstruction/#methods","title":"Methods","text":""},{"location":"en/game_plan_reconstruction/#instance-method","title":"Instance Method","text":"<pre><code>league.reconstruct_game_plan_from_existing_data\n</code></pre> <p>Reconstructs the GamePlan for a single league from its existing parties and party_games data.</p>"},{"location":"en/game_plan_reconstruction/#class-methods","title":"Class Methods","text":"<pre><code># Reconstruct GamePlans for all leagues in a season\nLeague.reconstruct_game_plans_for_season(season, opts = {})\n\n# Delete existing GamePlans for a season\nLeague.delete_game_plans_for_season(season, opts = {})\n\n# Find leagues that should share the same GamePlan\nLeague.find_leagues_with_same_gameplan(league)\n\n# Find existing shared GamePlan\nLeague.find_or_create_shared_gameplan(league)\n</code></pre>"},{"location":"en/game_plan_reconstruction/#filtering-options","title":"Filtering Options","text":"<p>The class methods support filtering via the <code>opts</code> parameter:</p> <pre><code># Filter by region shortname\nopts = { region_shortname: 'BBV' }\n\n# Filter by discipline\nopts = { discipline: 'Pool' }\n\n# Filter by both\nopts = { region_shortname: 'BBV', discipline: 'Pool' }\n\n# Example usage\nresults = League.reconstruct_game_plans_for_season(season, opts)\n</code></pre>"},{"location":"en/game_plan_reconstruction/#rake-tasks","title":"Rake Tasks","text":""},{"location":"en/game_plan_reconstruction/#reconstruct-gameplans-for-a-season","title":"Reconstruct GamePlans for a Season","text":"<pre><code># Reconstruct all GamePlans for a season\nrake carambus:reconstruct_game_plans[2021/2022]\n\n# Reconstruct GamePlans for a specific region\nrake carambus:reconstruct_game_plans[2021/2022,BBV]\n\n# Reconstruct GamePlans for a specific discipline\nrake carambus:reconstruct_game_plans[2021/2022,,Pool]\n\n# Reconstruct GamePlans for a specific region and discipline\nrake carambus:reconstruct_game_plans[2021/2022,BBV,Pool]\n</code></pre>"},{"location":"en/game_plan_reconstruction/#reconstruct-gameplan-for-a-specific-league","title":"Reconstruct GamePlan for a Specific League","text":"<pre><code>rake carambus:reconstruct_league_game_plan[123]\n</code></pre>"},{"location":"en/game_plan_reconstruction/#delete-gameplans-for-a-season","title":"Delete GamePlans for a Season","text":"<pre><code># Delete all GamePlans for a season\nrake carambus:delete_game_plans[2021/2022]\n\n# Delete GamePlans for a specific region\nrake carambus:delete_game_plans[2021/2022,BBV]\n\n# Delete GamePlans for a specific discipline\nrake carambus:delete_game_plans[2021/2022,,Pool]\n\n# Delete GamePlans for a specific region and discipline\nrake carambus:delete_game_plans[2021/2022,BBV,Pool]\n</code></pre>"},{"location":"en/game_plan_reconstruction/#clean-and-reconstruct-gameplans-for-a-season","title":"Clean and Reconstruct GamePlans for a Season","text":"<p>This deletes existing GamePlans and then reconstructs them:</p> <pre><code># Clean and reconstruct all GamePlans for a season\nrake carambus:clean_reconstruct_game_plans[2021/2022]\n\n# Clean and reconstruct GamePlans for a specific region\nrake carambus:clean_reconstruct_game_plans[2021/2022,BBV]\n\n# Clean and reconstruct GamePlans for a specific discipline\nrake carambus:clean_reconstruct_game_plans[2021/2022,,Pool]\n\n# Clean and reconstruct GamePlans for a specific region and discipline\nrake carambus:clean_reconstruct_game_plans[2021/2022,BBV,Pool]\n</code></pre>"},{"location":"en/game_plan_reconstruction/#filtering-options_1","title":"Filtering Options","text":"<p>The rake tasks support filtering by:</p> <ul> <li>Region Shortname: Filter by specific regions (e.g., BBV, BVBW, DBU)</li> <li>Discipline: Filter by discipline type (Pool, Karambol, Snooker, Kegel)</li> </ul> <p>Examples: <pre><code># Only Pool leagues in BBV region\nrake carambus:reconstruct_game_plans[2021/2022,BBV,Pool]\n\n# Only Karambol leagues (all regions)\nrake carambus:reconstruct_game_plans[2021/2022,,Karambol]\n\n# Only Snooker leagues in BVBW region\nrake carambus:reconstruct_game_plans[2021/2022,BVBW,Snooker]\n</code></pre></p>"},{"location":"en/game_plan_reconstruction/#how-it-works","title":"How It Works","text":"<p>The reconstruction process:</p> <ol> <li> <p>Structure Analysis: Analyzes one party per league to extract the game plan structure (disciplines, rounds, etc.)</p> </li> <li> <p>Statistics Collection: Iterates through all parties and their party_games to collect:</p> </li> <li>Game points (win, draw, lost)</li> <li>Sets information</li> <li>Balls/score for relevant disciplines</li> <li>Innings for relevant disciplines</li> <li>Partie points (Punkte)</li> <li> <p>Shootout vs non-shootout games</p> </li> <li> <p>Shared GamePlans: </p> </li> <li>GamePlans are identified by name: <code>\"#{league.name} - #{branch.name} - #{organizer.shortname}\"</code></li> <li>Leagues with the same name, discipline, and organizer share the same GamePlan across seasons</li> <li> <p>Only one league per group needs to reconstruct the GamePlan</p> </li> <li> <p>Data Processing:</p> </li> <li>Removes statistics that appear less than 3 times (innings, sets)</li> <li>Tracks shootout logic</li> <li> <p>Calculates match points from party results</p> </li> <li> <p>GamePlan Creation/Update: Saves the reconstructed GamePlan and links it to all relevant leagues</p> </li> </ol>"},{"location":"en/game_plan_reconstruction/#efficiency-improvements","title":"Efficiency Improvements","text":""},{"location":"en/game_plan_reconstruction/#structure-analysis","title":"Structure Analysis","text":"<ul> <li>Only analyzes one party per league to determine the game plan structure</li> <li>Structure is assumed to be consistent within a season</li> <li>Much faster than analyzing every party for structure</li> </ul>"},{"location":"en/game_plan_reconstruction/#shared-gameplans","title":"Shared GamePlans","text":"<ul> <li>Groups leagues by their GamePlan name before processing</li> <li>Only reconstructs one GamePlan per group</li> <li>Links all leagues in the group to the same GamePlan</li> <li>Reduces processing time and ensures consistency across seasons</li> </ul>"},{"location":"en/game_plan_reconstruction/#example-usage","title":"Example Usage","text":"<pre><code># Find a season\nseason = Season.find_by_name(\"2021/2022\")\n\n# Reconstruct all GamePlans for the season\nresults = League.reconstruct_game_plans_for_season(season)\nputs \"Success: #{results[:success]}, Failed: #{results[:failed]}\"\n\n# Reconstruct for a specific league\nleague = League.find(123)\ngame_plan = league.reconstruct_game_plan_from_existing_data\nputs \"Reconstructed GamePlan: #{game_plan.name}\"\n\n# Find leagues that share the same GamePlan\nshared_leagues = League.find_leagues_with_same_gameplan(league)\nputs \"Found #{shared_leagues.count} leagues sharing the same GamePlan\"\n\n# Find existing shared GamePlan\nexisting_gameplan = League.find_or_create_shared_gameplan(league)\nif existing_gameplan\n  puts \"Found existing GamePlan: #{existing_gameplan.name}\"\nend\n</code></pre>"},{"location":"en/game_plan_reconstruction/#error-handling","title":"Error Handling","text":"<p>The methods include comprehensive error handling:</p> <ul> <li>Logs all operations to Rails.logger</li> <li>Returns detailed error information</li> <li>Continues processing even if individual leagues fail</li> <li>Provides summary statistics</li> <li>Groups errors by GamePlan name for shared GamePlans</li> </ul>"},{"location":"en/game_plan_reconstruction/#notes","title":"Notes","text":"<ul> <li>Structure Consistency: The method assumes that game plan structure doesn't change within a season</li> <li>Shared GamePlans: GamePlans are shared across seasons for leagues with the same name, discipline, and organizer</li> <li>Efficiency: Much faster than re-scraping since it doesn't make HTTP requests and uses efficient grouping</li> <li>Consistency: Uses the same logic as the original scraping but works with existing data</li> <li>Flexibility: Can process individual leagues or entire seasons with shared GamePlan handling </li> </ul>"},{"location":"en/island25/","title":"Island25","text":""},{"location":"en/island25/#-","title":"---","text":"<p>title: island25 summary: version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-24 10:41:21.544377000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-24 11:41:21.544377000 Z tags: [] metadata: {} position: 0 id: 9</p>"},{"location":"en/island25/#linksammlung-island","title":"Linksammlung Island","text":"<p>Eyvindarholt Hill House and Cabins</p> <p>Unser Quartier in Eyvindarholt Standort in Google Maps Standort in Apple Maps</p> <p>Grobplanung</p> <p>Top 10 things to do - South Iceland</p> <p>Buchungsdetails.pdf</p> <p>Kids0.html </p> <p>Reise\u00fcbersicht - Airbnb.pdf </p> <p>Success _ Go Car Rental.pdf</p> <p>Beinfreiheit_Toyota_Rav4.pdf</p> <p>plan0.prompt.txt  </p> <p>Packliste.pdf </p>"},{"location":"en/mkdocs_documentation/","title":"MkDocs Documentation for Carambus","text":""},{"location":"en/mkdocs_documentation/#overview","title":"Overview","text":"<p>The Carambus project uses MkDocs with the Material Theme and mkdocs-static-i18n plugin for multilingual, professional documentation. The documentation is automatically built via GitHub Actions and provided as an artifact.</p>"},{"location":"en/mkdocs_documentation/#architecture","title":"Architecture","text":""},{"location":"en/mkdocs_documentation/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>carambus_api/\n\u251c\u2500\u2500 mkdocs.yml                 # Main configuration\n\u251c\u2500\u2500 requirements.txt           # Python dependencies\n\u251c\u2500\u2500 pages/                     # Documentation files\n\u2502   \u251c\u2500\u2500 index.md              # Homepage\n\u2502   \u251c\u2500\u2500 assets/               # Images and media\n\u2502   \u251c\u2500\u2500 de/                   # German documentation\n\u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u251c\u2500\u2500 DEVELOPER_GUIDE.md\n\u2502   \u2502   \u251c\u2500\u2500 tournament.md\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 en/                   # English documentation\n\u2502       \u251c\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 DEVELOPER_GUIDE.md\n\u2502       \u251c\u2500\u2500 tournament.md\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 .github/workflows/\n\u2502   \u2514\u2500\u2500 build-docs.yml        # CI/CD workflow\n\u2514\u2500\u2500 site/                     # Built documentation (generated)\n</code></pre>"},{"location":"en/mkdocs_documentation/#multilingual-support","title":"\ud83c\udf10 Multilingual Support","text":"<p>The project uses the mkdocs-static-i18n plugin for complete bilingual support:</p> <ul> <li>German (de): Default language, displayed first</li> <li>English (en): Second language, fully translated</li> <li>Language switching: Automatically available in navigation</li> <li>Separate navigation: Each language has its own menu structure</li> </ul>"},{"location":"en/mkdocs_documentation/#configuration","title":"Configuration","text":""},{"location":"en/mkdocs_documentation/#theme-and-design","title":"\ud83c\udfa8 Theme and Design","text":"<pre><code>theme:\n  name: material\n  features:\n    - navigation.tabs      # Tab navigation\n    - search.suggest       # Search suggestions\n    - header.autohide      # Auto-hide header\n  palette:\n    - scheme: default\n      primary: indigo      # Primary color\n    - scheme: slate        # Dark mode\n      primary: indigo\n</code></pre>"},{"location":"en/mkdocs_documentation/#navigation","title":"\ud83d\udccb Navigation","text":"<p>The navigation is configured for both languages:</p> <pre><code>nav:\n  - Home: index.md\n  - Introduction:\n      - About: about.md\n      - README: README.md\n  - User Guide:\n      - Tournament Management: tournament.md\n      - Table Reservation: table_reservation_heating_control.md\n      - Scoreboard Setup: scoreboard_autostart_setup.md\n      - Mode Switcher: mode_switcher.md\n  - Developer Guide:\n      - Developer Guide: DEVELOPER_GUIDE.md\n      - Database Design: database_design.md\n      - Database Syncing: database_syncing.md\n      - Paper Trail Optimization: paper_trail_optimization.md\n  - Admin Guide:\n      - Admin Roles: admin_roles.md\n      - Data Management: data_management.md\n      - Filter Popup Usage: filter_popup_usage.md\n  - Reference:\n      - ER Diagram: er_diagram.md\n      - API: API.md\n      - Terms: terms.md\n      - Privacy: privacy.md\n</code></pre>"},{"location":"en/mkdocs_documentation/#plugins","title":"\ud83d\udd0c Plugins","text":"<pre><code>plugins:\n  - search                    # Full-text search\n  - i18n:                     # Multilingual support\n      languages:\n        - locale: de\n          name: Deutsch\n          default: true\n          build: true\n        - locale: en\n          name: English\n          build: true\n      reconfigure_material: true\n      docs_structure: folder\n</code></pre>"},{"location":"en/mkdocs_documentation/#markdown-extensions","title":"\ud83d\udcdd Markdown Extensions","text":"<pre><code>markdown_extensions:\n  - pymdownx.highlight        # Syntax highlighting\n  - pymdownx.superfences      # Code blocks and ER diagrams\n  - toc:                      # Table of contents\n      permalink: true\n  - admonition                # Warnings and notes\n  - attr_list                 # Attributes for images\n  - md_in_html                # HTML in Markdown\n</code></pre>"},{"location":"en/mkdocs_documentation/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"en/mkdocs_documentation/#github-actions-workflow","title":"\ud83d\ude80 GitHub Actions Workflow","text":"<pre><code>name: Build Documentation\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build documentation\n        run: mkdocs build\n\n      - name: Upload documentation artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: documentation-build\n          path: ./site\n          retention-days: 30\n</code></pre>"},{"location":"en/mkdocs_documentation/#dependencies","title":"\ud83d\udce6 Dependencies","text":"<pre><code>mkdocs-material&gt;=9.5.0        # Material Theme\nmkdocs-static-i18n&gt;=1.0.0     # Multilingual support\npymdown-extensions&gt;=10.0.0    # Markdown extensions\n</code></pre>"},{"location":"en/mkdocs_documentation/#local-development","title":"Local Development","text":""},{"location":"en/mkdocs_documentation/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<pre><code># Activate Python environment\ncd carambus_api\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"en/mkdocs_documentation/#local-server","title":"\ud83c\udf10 Local Server","text":"<ul> <li>URL: <code>http://127.0.0.1:8000/carambus-docs/</code></li> <li>Live-reload: Automatic updates on changes</li> <li>Language switching: Available in navigation</li> </ul>"},{"location":"en/mkdocs_documentation/#adding-new-documentation","title":"\ud83d\udcc1 Adding New Documentation","text":"<ol> <li>Create file: <code>pages/en/new_page.md</code></li> <li>Extend navigation: Add to <code>mkdocs.yml</code></li> <li>German translation: Create <code>pages/de/new_page.md</code></li> <li>Test: Run <code>mkdocs serve</code></li> </ol>"},{"location":"en/mkdocs_documentation/#features","title":"Features","text":""},{"location":"en/mkdocs_documentation/#search","title":"\ud83d\udd0d Search","text":"<ul> <li>Full-text search in both languages</li> <li>Search suggestions while typing</li> <li>Language-specific search results</li> </ul>"},{"location":"en/mkdocs_documentation/#responsive-design","title":"\ud83d\udcf1 Responsive Design","text":"<ul> <li>Mobile-optimized through Material Theme</li> <li>Touch-friendly for tablets and smartphones</li> <li>Dark mode support</li> </ul>"},{"location":"en/mkdocs_documentation/#customization","title":"\ud83c\udfa8 Customization","text":"<ul> <li>Indigo as primary color</li> <li>Carambus branding integrated</li> <li>Professional design</li> </ul>"},{"location":"en/mkdocs_documentation/#er-diagrams","title":"\ud83d\udcca ER Diagrams","text":"<ul> <li>Mermaid integration for ER diagrams</li> <li>Interactive diagrams</li> <li>Responsive display</li> </ul>"},{"location":"en/mkdocs_documentation/#deployment","title":"Deployment","text":""},{"location":"en/mkdocs_documentation/#github-actions","title":"\ud83d\ude80 GitHub Actions","text":"<ul> <li>Automatic build on every push</li> <li>Artifact upload for download</li> <li>30 days retention for artifacts</li> </ul>"},{"location":"en/mkdocs_documentation/#artifact-download","title":"\ud83d\udce5 Artifact Download","text":"<ol> <li>Open GitHub Actions: <code>https://github.com/GernotUllrich/carambus/actions</code></li> <li>Select \"Build Documentation\" workflow</li> <li>Download \"documentation-build\" artifact</li> <li>Extract and deploy to web server</li> </ol>"},{"location":"en/mkdocs_documentation/#github-pages-optional","title":"\ud83c\udf10 GitHub Pages (Optional)","text":"<p>For automatic online deployment:</p> <ol> <li>Enable GitHub Pages in repository settings</li> <li>Source: <code>gh-pages</code> branch or <code>/docs</code> folder</li> <li>Extend workflow for GitHub Pages deployment</li> </ol>"},{"location":"en/mkdocs_documentation/#best-practices","title":"Best Practices","text":""},{"location":"en/mkdocs_documentation/#writing-documentation","title":"\ud83d\udcdd Writing Documentation","text":"<ul> <li>Clear structure with headings</li> <li>Code examples with syntax highlighting</li> <li>Images stored in <code>pages/assets/</code></li> <li>Links between related pages</li> </ul>"},{"location":"en/mkdocs_documentation/#links-and-navigation","title":"\ud83d\udd17 Links and Navigation","text":"<ul> <li>Use relative links: <code>[Text](file.md)</code></li> <li>Anchor links for sections: <code>[Text](file.md#section)</code></li> <li>External links with full URL</li> </ul>"},{"location":"en/mkdocs_documentation/#images-and-media","title":"\ud83d\uddbc\ufe0f Images and Media","text":"<pre><code>![Alt text](assets/image.png){width=\"100%\"}\n![Alt text](assets/image.png){: .center width=\"50%\"}\n</code></pre>"},{"location":"en/mkdocs_documentation/#warnings-and-notes","title":"\u26a0\ufe0f Warnings and Notes","text":"<pre><code>!!! warning \"Important Note\"\n    Here is the important text.\n\n!!! info \"Information\"\n    Here is an information.\n\n!!! tip \"Tip\"\n    Here is a useful tip.\n</code></pre>"},{"location":"en/mkdocs_documentation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/mkdocs_documentation/#common-issues","title":"\ud83d\udd27 Common Issues","text":""},{"location":"en/mkdocs_documentation/#port-already-in-use","title":"Port already in use","text":"<pre><code># Use different port\nmkdocs serve --dev-addr=127.0.0.1:8001\n</code></pre>"},{"location":"en/mkdocs_documentation/#missing-dependencies","title":"Missing dependencies","text":"<pre><code># Reinstall dependencies\npip install -r requirements.txt --upgrade\n</code></pre>"},{"location":"en/mkdocs_documentation/#build-errors","title":"Build errors","text":"<pre><code># Validate configuration\nmkdocs build --strict\n</code></pre>"},{"location":"en/mkdocs_documentation/#debugging","title":"\ud83d\udccb Debugging","text":"<ul> <li>Check logs: Detailed output for build errors</li> <li>Validate configuration: <code>mkdocs build --strict</code></li> <li>Check dependencies: <code>pip list | grep mkdocs</code></li> </ul>"},{"location":"en/mkdocs_documentation/#conclusion","title":"Conclusion","text":"<p>The MkDocs integration provides professional, multilingual documentation with:</p> <ul> <li>\u2705 Automatic CI/CD via GitHub Actions</li> <li>\u2705 Complete bilingual support (DE/EN)</li> <li>\u2705 Responsive design for all devices</li> <li>\u2705 Professional Material Theme</li> <li>\u2705 Easy maintenance and extension</li> </ul> <p>The documentation is an important component of the Carambus project and is continuously maintained and expanded. </p>"},{"location":"en/paper_trail_optimization/","title":"PaperTrail Optimization for Scraping Operations","text":""},{"location":"en/paper_trail_optimization/#problem","title":"Problem","text":"<p>During tournament scraping operations, PaperTrail was creating unnecessary version records where only the <code>updated_at</code> timestamp or <code>sync_date</code> field changed, but no meaningful data was modified. Additionally, <code>data_will_change!</code> was being called even when the <code>data</code> field hadn't actually changed, creating version records for non-existent changes.</p> <p>Example of the issue: <pre><code># Version record showing only timestamp changes\n{\n  \"data\" =&gt; [nil, nil], \n  \"updated_at\" =&gt; [2025-03-17 14:54:40.746295 UTC, 2025-06-27 12:00:32.087019 UTC]\n}\n</code></pre></p>"},{"location":"en/paper_trail_optimization/#solution","title":"Solution","text":""},{"location":"en/paper_trail_optimization/#1-configure-papertrail-to-ignore-specific-fields-api-servers-only","title":"1. Configure PaperTrail to Ignore Specific Fields (API Servers Only)","text":"<p>Added <code>has_paper_trail ignore: [:updated_at, :sync_date] unless Carambus.config.carambus_api_url.present?</code> to models that are frequently updated during scraping operations. PaperTrail is only enabled on API servers (when <code>carambus_api_url</code> is present), not on local servers.</p> <p>Models with PaperTrail configuration: - <code>Tournament</code> - Ignores <code>updated_at</code> and <code>sync_date</code> - <code>Game</code> - Ignores <code>updated_at</code> - <code>Party</code> - Ignores <code>updated_at</code> and <code>sync_date</code> - <code>League</code> - Ignores <code>updated_at</code> and <code>sync_date</code> - <code>Club</code> - Ignores <code>updated_at</code> and <code>sync_date</code> - <code>Location</code> - Ignores <code>updated_at</code> and <code>sync_date</code> - <code>Region</code> - Ignores <code>updated_at</code> and <code>sync_date</code> - <code>SeasonParticipation</code> - Ignores <code>updated_at</code> and <code>sync_date</code></p>"},{"location":"en/paper_trail_optimization/#2-fix-unnecessary-data_will_change-calls","title":"2. Fix Unnecessary <code>data_will_change!</code> Calls","text":"<p>Fixed methods that were calling <code>data_will_change!</code> even when the <code>data</code> field hadn't actually changed:</p> <p>Tournament Model: - <code>before_save</code> callback: Only process data if it's present - <code>deep_merge_data!</code> method: Only call <code>data_will_change!</code> if data actually changed - <code>reset_tournament</code> method: Only call <code>data_will_change!</code> if data is not already empty</p> <p>Game Model: - <code>deep_merge_data!</code> method: Only call <code>data_will_change!</code> if data actually changed - <code>deep_delete!</code> method: Only call <code>data_will_change!</code> if data actually changed</p>"},{"location":"en/paper_trail_optimization/#3-cleanup-task","title":"3. Cleanup Task","text":"<p>Created a rake task to clean up existing unnecessary version records:</p> <pre><code>rails cleanup:cleanup_paper_trail_versions\n</code></pre> <p>This task: - Identifies version records that only contain <code>updated_at</code> or <code>sync_date</code> changes - Removes them from the database - Provides a summary of deleted records</p>"},{"location":"en/paper_trail_optimization/#4-testing","title":"4. Testing","text":"<p>Added tests to verify that PaperTrail correctly ignores the specified fields:</p> <pre><code>test \"PaperTrail ignores updated_at and sync_date changes\" do\n  # Test implementation in test/models/tournament_test.rb\nend\n</code></pre>"},{"location":"en/paper_trail_optimization/#benefits","title":"Benefits","text":"<ol> <li>Reduced Database Storage: Eliminates unnecessary version records</li> <li>Cleaner Version History: Only meaningful changes are tracked</li> <li>Better Performance: Fewer records to process during version queries</li> <li>Maintained Audit Trail: Important changes are still tracked</li> <li>Local Server Optimization: No PaperTrail overhead on local servers</li> <li>Accurate Change Detection: Only creates versions when data actually changes</li> </ol>"},{"location":"en/paper_trail_optimization/#usage","title":"Usage","text":""},{"location":"en/paper_trail_optimization/#for-new-models","title":"For New Models","text":"<p>When adding PaperTrail to a new model that might be updated during scraping:</p> <pre><code>class NewModel &lt; ApplicationRecord\n  include LocalProtector\n  include SourceHandler\n\n  # Configure PaperTrail to ignore automatic timestamp updates (API servers only)\n  has_paper_trail ignore: [:updated_at, :sync_date] unless Carambus.config.carambus_api_url.present?\nend\n</code></pre>"},{"location":"en/paper_trail_optimization/#for-existing-models","title":"For Existing Models","text":"<p>If you need to add ignore configuration to an existing model:</p> <ol> <li>Add the <code>has_paper_trail ignore: [...] unless Carambus.config.carambus_api_url.present?</code> line to the model</li> <li>Review and fix any <code>data_will_change!</code> calls to only trigger when data actually changes</li> <li>Run the cleanup task to remove existing unnecessary versions</li> <li>Test to ensure important changes are still tracked</li> </ol>"},{"location":"en/paper_trail_optimization/#best-practices-for-data_will_change","title":"Best Practices for <code>data_will_change!</code>","text":"<p>When working with serialized data fields:</p> <pre><code># \u274c Bad - calls data_will_change! even if no change\ndef update_data(new_data)\n  data_will_change!\n  self.data = new_data\nend\n\n# \u2705 Good - only calls data_will_change! if data actually changes\ndef update_data(new_data)\n  if new_data != data\n    data_will_change!\n    self.data = new_data\n  end\nend\n</code></pre>"},{"location":"en/paper_trail_optimization/#server-configuration","title":"Server Configuration","text":"<ul> <li>API Servers (<code>carambus_api_url</code> is present): PaperTrail is enabled with optimized ignore settings</li> <li>Local Servers (<code>carambus_api_url</code> is blank): PaperTrail is completely disabled</li> </ul>"},{"location":"en/paper_trail_optimization/#monitoring","title":"Monitoring","text":"<p>To monitor the effectiveness of this optimization:</p> <pre><code># Check if PaperTrail is enabled for a model\nTournament.paper_trail_enabled_for_model?\n\n# Check version counts for a specific model (API servers only)\nTournament.first.versions.count if Tournament.paper_trail_enabled_for_model?\n\n# Check recent versions for a model\nTournament.first.versions.last(10).each do |version|\n  changes = YAML.load(version.object_changes)\n  puts \"Changes: #{changes.keys}\"\nend if Tournament.paper_trail_enabled_for_model?\n</code></pre>"},{"location":"en/paper_trail_optimization/#related-files","title":"Related Files","text":"<ul> <li><code>app/models/tournament.rb</code> - Tournament model with PaperTrail configuration and data_will_change! fixes</li> <li><code>app/models/game.rb</code> - Game model with PaperTrail configuration and data_will_change! fixes</li> <li><code>lib/tasks/cleanup.rake</code> - Cleanup task for unnecessary versions</li> <li><code>test/models/tournament_test.rb</code> - Tests for PaperTrail behavior</li> <li><code>app/models/concerns/source_handler.rb</code> - Concern that updates sync_date </li> </ul>"},{"location":"en/privacy/","title":"Privacy","text":""},{"location":"en/privacy/#-","title":"---","text":"<p>title: Privacy summary: Vereinfachte Datenschutzrichtlinien version: published_at: !ruby/object:ActiveSupport::TimeWithZone   utc: 2025-03-05 15:00:42.639697000 Z   zone: !ruby/object:ActiveSupport::TimeZone     name: Europe/Berlin   time: 2025-03-05 16:00:42.639697000 Z tags: [] metadata: {} position: 0 id: 5</p> <p>Diese Website sammelt \u00fcber Personen nur Wettkampfdaten und -statistiken.  Diese Daten werden am Ende eines Turniers an den Veranstalter zur weiteren Dokumentation \u00fcbermittelt.</p>"},{"location":"en/region_tagging_cleanup_summary/","title":"Region Tagging System Cleanup Summary","text":""},{"location":"en/region_tagging_cleanup_summary/#overview","title":"Overview","text":"<p>This document summarizes the cleanup of the old polymorphic <code>region_taggings</code> system and migration to the new simplified <code>region_id</code> + <code>global_context</code> system.</p>"},{"location":"en/region_tagging_cleanup_summary/#changes-completed","title":"Changes Completed","text":""},{"location":"en/region_tagging_cleanup_summary/#1-core-system-files-updated","title":"1. Core System Files Updated","text":""},{"location":"en/region_tagging_cleanup_summary/#appmodelsconcernsregion_taggablerb","title":"<code>app/models/concerns/region_taggable.rb</code>","text":"<ul> <li>\u2705 Removed all references to old polymorphic <code>region_taggings</code> system</li> <li>\u2705 Simplified <code>find_associated_region_ids</code> to <code>find_associated_region_id</code> (returns single ID)</li> <li>\u2705 Added <code>global_context?</code> method to determine if records participate in global events</li> <li>\u2705 Updated version tracking to use <code>region_id</code> and <code>global_context</code> instead of <code>region_ids</code> array</li> <li>\u2705 Removed commented-out old code</li> <li>\u2705 Added <code>update_existing_versions</code> class method for bulk version updates</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#appmodelsversionrb","title":"<code>app/models/version.rb</code>","text":"<ul> <li>\u2705 Updated schema comments to reflect <code>region_id</code> instead of <code>region_ids</code> array</li> <li>\u2705 Simplified <code>for_region</code> scope to use direct <code>region_id</code> comparison</li> <li>\u2705 Removed <code>ignored_columns</code> for old <code>region_ids</code></li> <li>\u2705 Updated <code>relevant_for_region?</code> method</li> <li>\u2705 Updated <code>update_from_carambus_api</code> method to handle new <code>region_id</code> and <code>global_context</code> fields</li> <li>\u2705 Added automatic region tagging when records are created/updated via API</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#appcontrollersversions_controllerrb","title":"<code>app/controllers/versions_controller.rb</code>","text":"<ul> <li>\u2705 Updated <code>get_updates</code> method to filter versions using new <code>region_id</code> system</li> <li>\u2705 Added <code>region_id</code> and <code>global_context</code> to version response attributes</li> <li>\u2705 Updated version filtering logic to work with new system</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#configinitializerspaper_trailrb","title":"<code>config/initializers/paper_trail.rb</code>","text":"<ul> <li>\u2705 Created PaperTrail initializer to automatically set <code>region_id</code> and <code>global_context</code> on version creation</li> <li>\u2705 Configured <code>before_create</code> and <code>before_update</code> callbacks for automatic region tagging</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#libtasksregion_taggingsrake","title":"<code>lib/tasks/region_taggings.rake</code>","text":"<ul> <li>\u2705 Updated all tasks to work with new <code>region_id</code> system</li> <li>\u2705 Replaced <code>region_ids</code> array operations with single <code>region_id</code> assignments</li> <li>\u2705 Added new task <code>set_global_context</code> for marking global records</li> <li>\u2705 Updated verification task to check <code>region_id</code> instead of <code>region_taggings</code> associations</li> <li>\u2705 Removed all commented-out old code</li> <li>\u2705 Added <code>update_existing_versions</code> task for bulk version updates</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#2-database-migrations-created","title":"2. Database Migrations Created","text":""},{"location":"en/region_tagging_cleanup_summary/#dbmigrate20250624000000_add_region_id_and_global_context_to_region_taggablesrb","title":"<code>db/migrate/20250624000000_add_region_id_and_global_context_to_region_taggables.rb</code>","text":"<ul> <li>\u2705 Adds <code>region_id</code> and <code>global_context</code> columns to all RegionTaggable models</li> <li>\u2705 Includes proper indexes and foreign key constraints</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#dbmigrate20250624000001_remove_region_ids_columnsrb","title":"<code>db/migrate/20250624000001_remove_region_ids_columns.rb</code>","text":"<ul> <li>\u2705 Removes old <code>region_ids</code> array columns from all tables</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#3-documentation-updated","title":"3. Documentation Updated","text":""},{"location":"en/region_tagging_cleanup_summary/#docsdatabase_syncingmd","title":"<code>docs/database_syncing.md</code>","text":"<ul> <li>\u2705 Updated to reflect new <code>region_id</code> + <code>global_context</code> system</li> <li>\u2705 Added migration section explaining the change from old to new system</li> <li>\u2705 Updated code examples and explanations</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#appviewsstaticdatabase_syncingenhtmlerb","title":"<code>app/views/static/database_syncing.en.html.erb</code>","text":"<ul> <li>\u2705 Updated English documentation view</li> <li>\u2705 Modernized layout and content structure</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#appviewsstaticdatabase_syncingdehtmlerb","title":"<code>app/views/static/database_syncing.de.html.erb</code>","text":"<ul> <li>\u2705 Updated German documentation view</li> <li>\u2705 Consistent with English version</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#docsdatenbank-partitionierung-und-synchronisierungmd","title":"<code>docs/datenbank-partitionierung-und-synchronisierung.md</code>","text":"<ul> <li>\u2705 Updated German documentation file</li> <li>\u2705 Consistent with other documentation updates</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#4-version-generation-and-synchronization-updated","title":"4. Version Generation and Synchronization Updated","text":""},{"location":"en/region_tagging_cleanup_summary/#papertrail-integration","title":"PaperTrail Integration","text":"<ul> <li>\u2705 Automatic <code>region_id</code> and <code>global_context</code> setting when versions are created</li> <li>\u2705 Automatic updates when records are modified</li> <li>\u2705 Proper filtering of versions by region for synchronization</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#api-synchronization","title":"API Synchronization","text":"<ul> <li>\u2705 Updated <code>update_from_carambus_api</code> to handle new fields</li> <li>\u2705 Updated <code>get_updates</code> endpoint to include new fields in response</li> <li>\u2705 Proper region filtering for local server synchronization</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#still-needs-to-be-done","title":"Still Needs to be Done","text":""},{"location":"en/region_tagging_cleanup_summary/#1-model-code-cleanup","title":"1. Model Code Cleanup","text":"<p>The following models still contain references to the old <code>region_ids |= [region.id]</code> pattern that need to be updated:</p>"},{"location":"en/region_tagging_cleanup_summary/#high-priority-models","title":"High Priority Models:","text":"<ul> <li><code>app/models/league.rb</code> - Multiple instances of <code>region_ids |= [region.id]</code></li> <li><code>app/models/region.rb</code> - Multiple instances of <code>region_ids |= [region.id]</code></li> <li><code>app/models/tournament.rb</code> - Multiple instances of <code>region_ids |= [region.id]</code></li> <li><code>app/models/club.rb</code> - Multiple instances of <code>region_ids |= [region.id]</code></li> <li><code>app/models/player.rb</code> - One instance of <code>region_ids |= [region.id]</code></li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#required-changes","title":"Required Changes:","text":"<p>Replace all instances of: <pre><code>record.region_ids |= [region.id]\n</code></pre></p> <p>With: <pre><code>record.region_id = region.id\nrecord.global_context = record.global_context? if record.respond_to?(:global_context?)\n</code></pre></p>"},{"location":"en/region_tagging_cleanup_summary/#2-database-migration-execution","title":"2. Database Migration Execution","text":"<ul> <li>Run the new migrations to add <code>region_id</code> and <code>global_context</code> columns</li> <li>Update existing data to populate new fields</li> <li>Run <code>rails region_taggings:update_existing_versions</code> to update all existing versions</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#3-testing","title":"3. Testing","text":"<ul> <li>Test the new RegionTaggable concern with all included models</li> <li>Verify that <code>find_associated_region_id</code> returns correct values</li> <li>Test <code>global_context?</code> method for all model types</li> <li>Verify that version tracking works correctly with new <code>region_id</code> field</li> <li>Test all rake tasks with new system</li> <li>Test API synchronization with new version format</li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#4-api-updates-if-applicable","title":"4. API Updates (if applicable)","text":"<ul> <li>Update any API endpoints that filter by region to use new system</li> <li>Update any synchronization logic to work with <code>region_id</code> and <code>global_context</code></li> </ul>"},{"location":"en/region_tagging_cleanup_summary/#benefits-of-the-new-system","title":"Benefits of the New System","text":"<ol> <li>Simplified Architecture: Single <code>region_id</code> instead of complex polymorphic associations</li> <li>Better Performance: Direct indexes on <code>region_id</code> instead of array operations</li> <li>Clearer Logic: Explicit <code>global_context</code> flag instead of implicit array membership</li> <li>Easier Maintenance: Less complex code and fewer moving parts</li> <li>Better Scalability: Simpler queries and better database performance</li> <li>Automatic Version Tagging: PaperTrail automatically sets region information</li> <li>Improved Synchronization: Cleaner API responses with explicit region data</li> </ol>"},{"location":"en/region_tagging_cleanup_summary/#migration-steps","title":"Migration Steps","text":"<ol> <li>Backup Database: Always backup before running migrations</li> <li>Run New Migrations: Add new columns without removing old ones</li> <li>Migrate Data: Populate new fields from existing data</li> <li>Update Code: Replace all <code>region_ids</code> references with new system</li> <li>Update Versions: Run <code>rails region_taggings:update_existing_versions</code></li> <li>Test Thoroughly: Verify all functionality works correctly</li> <li>Remove Old Columns: Run migration to remove old <code>region_ids</code> columns</li> <li>Clean Up: Remove any remaining references to old system</li> </ol>"},{"location":"en/region_tagging_cleanup_summary/#rollback-plan","title":"Rollback Plan","text":"<p>If issues arise during migration: 1. The old <code>region_ids</code> columns are preserved until the final cleanup migration 2. Code can be reverted to use old system temporarily 3. Data migration can be reversed by repopulating <code>region_ids</code> from <code>region_id</code> 4. New columns can be dropped if needed 5. PaperTrail initializer can be disabled if needed</p>"},{"location":"en/region_tagging_cleanup_summary/#conclusion","title":"Conclusion","text":"<p>The cleanup has successfully modernized the region tagging system from a complex polymorphic approach to a simple, efficient single-field system. The version generation and synchronization have been updated to work seamlessly with the new system, ensuring that all new versions automatically get the correct region information. The main remaining work is updating the model code to use the new system and executing the database migrations. </p>"},{"location":"en/scoreboard_autostart_setup/","title":"Scoreboard Autostart Setup Guide","text":""},{"location":"en/scoreboard_autostart_setup/#quick-start-guide-begin-here","title":"Quick Start Guide (Begin Here)","text":""},{"location":"en/scoreboard_autostart_setup/#step-1-install-required-tools","title":"Step 1: Install required tools","text":"<pre><code>sudo apt update\nsudo apt install wmctrl\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-2-configure-the-scoreboard-url","title":"Step 2: Configure the scoreboard URL","text":"<p>Edit the config file to set your scoreboard URL: <pre><code>nano config/scoreboard_url\n</code></pre></p> <p>The default URL is: <pre><code>http://localhost:3000/locations/1/scoreboard_reservations\n</code></pre></p> <p>Change it to your actual scoreboard URL if needed.</p>"},{"location":"en/scoreboard_autostart_setup/#step-3-make-scripts-executable","title":"Step 3: Make scripts executable","text":"<pre><code>chmod +x bin/start-scoreboard.sh\nchmod +x bin/exit-scoreboard.sh\nchmod +x bin/restart-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-4-test-the-startup-script-manually","title":"Step 4: Test the startup script manually","text":"<pre><code>./bin/start-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-5-if-it-works-add-to-autostart","title":"Step 5: If it works, add to autostart","text":"<pre><code>nano ~/.config/lxsession/LXDE-pi/autostart\n</code></pre> <p>Add this line at the end (adjust path to your Rails app location): <pre><code>@/path/to/your/rails/app/bin/autostart-scoreboard.sh\n</code></pre></p> <p>For example, if your Rails app is in <code>/var/www/carambus/current</code>: <pre><code>@/var/www/carambus/current/bin/autostart-scoreboard.sh\n</code></pre></p> <p>Note: Use the <code>autostart-scoreboard.sh</code> wrapper script instead of <code>start-scoreboard.sh</code> directly for better autostart compatibility.</p>"},{"location":"en/scoreboard_autostart_setup/#step-6-reboot-to-test","title":"Step 6: Reboot to test","text":"<pre><code>sudo reboot\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#complete-setup-advanced","title":"Complete Setup (Advanced)","text":""},{"location":"en/scoreboard_autostart_setup/#configure-keyboard-shortcuts-optional","title":"Configure Keyboard Shortcuts (Optional)","text":"<pre><code>nano ~/.config/labwc/rc.xml\n</code></pre> <p>Add inside <code>&lt;keyboard&gt;</code> section (adjust paths to your Rails app location): <pre><code>&lt;keybind key=\"F12\"&gt;\n  &lt;action name=\"Execute\"&gt;\n    &lt;command&gt;/path/to/your/rails/app/bin/exit-scoreboard.sh&lt;/command&gt;\n  &lt;/action&gt;\n&lt;/keybind&gt;\n\n&lt;keybind key=\"F11\"&gt;\n  &lt;action name=\"Execute\"&gt;\n    &lt;command&gt;/path/to/your/rails/app/bin/restart-scoreboard.sh&lt;/command&gt;\n  &lt;/action&gt;\n&lt;/keybind&gt;\n</code></pre></p> <p>For example, if your Rails app is in <code>/home/pi/carambus_gernot</code>: <pre><code>&lt;keybind key=\"F12\"&gt;\n  &lt;action name=\"Execute\"&gt;\n    &lt;command&gt;/home/pi/carambus_gernot/bin/exit-scoreboard.sh&lt;/command&gt;\n  &lt;/action&gt;\n&lt;/keybind&gt;\n\n&lt;keybind key=\"F11\"&gt;\n  &lt;action name=\"Execute\"&gt;\n    &lt;command&gt;/home/pi/carambus_gernot/bin/restart-scoreboard.sh&lt;/command&gt;\n  &lt;/action&gt;\n&lt;/keybind&gt;\n</code></pre></p>"},{"location":"en/scoreboard_autostart_setup/#alternative-systemd-user-service-recommended","title":"Alternative: Systemd User Service (Recommended)","text":"<p>If window manager autostart doesn't work, use systemd user service instead:</p>"},{"location":"en/scoreboard_autostart_setup/#step-1-create-systemd-user-service-for-www-data-user","title":"Step 1: Create systemd user service for www-data user","text":"<pre><code># Switch to www-data user\nsudo -u www-data bash\n\n# Create systemd user directory in www-data's home\nmkdir -p /var/www/.config/systemd/user\nnano /var/www/.config/systemd/user/scoreboard.service\n</code></pre> <p>Add this content: <pre><code>[Unit]\nDescription=Scoreboard Autostart\nAfter=graphical-session.target\n\n[Service]\nType=oneshot\nEnvironment=DISPLAY=:0\nExecStart=/var/www/carambus/current/bin/autostart-scoreboard.sh\nRemainAfterExit=yes\n\n[Install]\nWantedBy=graphical-session.target\n</code></pre></p>"},{"location":"en/scoreboard_autostart_setup/#step-2-enable-and-start-the-service-as-www-data","title":"Step 2: Enable and start the service as www-data","text":"<pre><code># Still as www-data user\nsystemctl --user enable scoreboard.service\nsystemctl --user start scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-3-check-service-status","title":"Step 3: Check service status","text":"<pre><code>systemctl --user status scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-4-test-autostart","title":"Step 4: Test autostart","text":"<pre><code>sudo reboot\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-5-check-if-it-worked","title":"Step 5: Check if it worked","text":"<pre><code># As www-data user\ncat /tmp/scoreboard-autostart.log\nsystemctl --user status scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#remote-management-as-www-data-user","title":"Remote management as www-data user","text":"<pre><code># SSH as www-data user\nssh www-data@raspberrypi\n\n# Then use systemctl commands\nsystemctl --user restart scoreboard.service\nsystemctl --user status scoreboard.service\nsystemctl --user stop scoreboard.service\nsystemctl --user start scoreboard.service\n\n# View logs\ncat /tmp/scoreboard-autostart.log\njournalctl --user -u scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#troubleshooting-systemd-service","title":"Troubleshooting systemd service","text":"<pre><code># Check service logs (as www-data user)\njournalctl --user -u scoreboard.service\n\n# Restart service\nsystemctl --user restart scoreboard.service\n\n# Disable service\nsystemctl --user disable scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#alternative-system-wide-service-recommended-for-www-data","title":"Alternative: System-wide Service (Recommended for www-data)","text":"<p>Since www-data user doesn't have display access, use a system-wide service instead:</p>"},{"location":"en/scoreboard_autostart_setup/#step-1-create-system-wide-service","title":"Step 1: Create system-wide service","text":"<pre><code>sudo nano /etc/systemd/system/scoreboard.service\n</code></pre> <p>Add this content: <pre><code>[Unit]\nDescription=Scoreboard Autostart\nAfter=graphical-session.target\n\n[Service]\nType=oneshot\nUser=pj\nEnvironment=DISPLAY=:0\nEnvironment=XAUTHORITY=/home/pj/.Xauthority\nEnvironment=HOME=/home/pj\nExecStartPre=/bin/bash -c \"sleep 15\"\nExecStart=/var/www/carambus/current/bin/autostart-scoreboard.sh\nRemainAfterExit=yes\n\n[Install]\nWantedBy=graphical-session.target\n</code></pre></p>"},{"location":"en/scoreboard_autostart_setup/#step-2-enable-and-start-the-service","title":"Step 2: Enable and start the service","text":"<pre><code>sudo systemctl enable scoreboard.service\nsudo systemctl start scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-3-check-service-status_1","title":"Step 3: Check service status","text":"<pre><code>sudo systemctl status scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-4-remote-management-as-www-data","title":"Step 4: Remote management as www-data","text":"<pre><code># SSH as www-data user\nssh www-data@raspberrypi\n\n# Then use systemctl commands (with sudo)\nsudo systemctl restart scoreboard.service\nsudo systemctl status scoreboard.service\nsudo systemctl stop scoreboard.service\nsudo systemctl start scoreboard.service\n\n# View logs\ncat /tmp/scoreboard-autostart.log\nsudo journalctl -u scoreboard.service\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#step-5-test-autostart","title":"Step 5: Test autostart","text":"<pre><code>sudo reboot\n</code></pre> <p>This approach runs the service as the <code>pi</code> user (who has display access) but can be controlled by the <code>www-data</code> user via sudo.</p>"},{"location":"en/scoreboard_autostart_setup/#troubleshooting-system-wide-service","title":"Troubleshooting system-wide service","text":"<pre><code># Check service status (as pi user or with sudo)\nsudo systemctl status scoreboard.service\n\n# Check detailed logs (as pi user or with sudo)\nsudo journalctl -u scoreboard.service -f\n\n# Check if the script works manually (as pi user)\nsudo -u pi /var/www/carambus/current/bin/autostart-scoreboard.sh\n\n# Check if www-data can run sudo commands\nsudo -l\n\n# Add www-data to sudoers if needed\nsudo visudo\n# Add this line: www-data ALL=(ALL) NOPASSWD: /usr/bin/systemctl\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#remote-management","title":"Remote Management","text":"<p>The systemd user service enables powerful remote management capabilities:</p>"},{"location":"en/scoreboard_autostart_setup/#remote-commands","title":"Remote commands","text":"<pre><code># Restart scoreboard remotely\nssh pi@raspberrypi 'systemctl --user restart scoreboard.service'\n\n# Check status remotely\nssh pi@raspberrypi 'systemctl --user status scoreboard.service'\n\n# View logs remotely\nssh pi@raspberrypi 'cat /tmp/scoreboard-autostart.log'\n\n# Stop scoreboard for maintenance\nssh pi@raspberrypi 'systemctl --user stop scoreboard.service'\n\n# Start scoreboard\nssh pi@raspberrypi 'systemctl --user start scoreboard.service'\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#exit-methods","title":"Exit Methods","text":"<p>The scoreboard runs in fullscreen mode, and there are several ways to exit:</p>"},{"location":"en/scoreboard_autostart_setup/#primary-exit-methods","title":"Primary Exit Methods","text":"<ol> <li>Physical Keyboard: ALT+F4 or ESC (most reliable)</li> <li>Remote SSH: <code>systemctl --user restart scoreboard.service</code></li> </ol>"},{"location":"en/scoreboard_autostart_setup/#fallback-exit-method","title":"Fallback Exit Method","text":"<ol> <li>\"Try Resize Window\" Button: </li> <li>Click the refresh/resize button in the top menu</li> <li>This refreshes the Chromium window state</li> <li>Restores the circled X button in the top-right corner</li> <li>Click the X to exit to desktop</li> </ol>"},{"location":"en/scoreboard_autostart_setup/#why-this-works","title":"Why This Works","text":"<ul> <li>The \"Try Resize Window\" function refreshes the Chromium window state</li> <li>This restores window controls that get hidden during scoreboard interactions</li> <li>Provides a reliable mouse/touch-based exit method</li> <li>Works when other exit methods fail</li> </ul>"},{"location":"en/scoreboard_autostart_setup/#button-location","title":"Button Location","text":"<ul> <li>Table Monitors: Top-right refresh button</li> <li>Scoreboard Pages: Top-right refresh button</li> <li>All scoreboard interfaces: Consistent exit method</li> </ul> <p>This gives users a reliable way to exit the scoreboard even without a keyboard!</p>"},{"location":"en/scoreboard_autostart_setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/scoreboard_autostart_setup/#check-if-wmctrl-is-installed","title":"Check if wmctrl is installed","text":"<pre><code>which wmctrl\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#check-if-scripts-are-executable","title":"Check if scripts are executable","text":"<pre><code>ls -la bin/start-scoreboard.sh\nls -la bin/exit-scoreboard.sh\nls -la bin/restart-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#check-the-scoreboard-url-configuration","title":"Check the scoreboard URL configuration","text":"<pre><code>cat config/scoreboard_url\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#check-autostart-file","title":"Check autostart file","text":"<pre><code>cat ~/.config/lxsession/LXDE-pi/autostart\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#check-system-logs","title":"Check system logs","text":"<pre><code>journalctl -u lxsession\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#test-panel-hiding-manually","title":"Test panel hiding manually","text":"<pre><code>wmctrl -l\nwmctrl -r \"panel\" -b add,hidden\nwmctrl -r \"panel\" -b remove,hidden\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#check-if-browser-starts-correctly","title":"Check if browser starts correctly","text":"<pre><code>ps aux | grep chromium\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#test-scripts-manually","title":"Test scripts manually","text":"<pre><code># Test startup\n./bin/start-scoreboard.sh\n\n# Test exit (in another terminal)\n./bin/exit-scoreboard.sh\n\n# Test restart\n./bin/restart-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#check-log-files","title":"Check log files","text":"<pre><code># Debug test log (from test-startup.sh)\ncat /tmp/scoreboard-debug.log\n\n# Autostart wrapper log (from autostart-scoreboard.sh)\ncat /tmp/scoreboard-autostart.log\n\n# Chromium output (if you ran with nohup)\ncat nohup.out\n\n# LXDE autostart logs\ntail -f ~/.cache/lxsession/LXDE-pi/run.log\n\n# System logs\njournalctl -u lxsession\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#troubleshooting-for-varwwwcarambuscurrent-setup","title":"Troubleshooting for /var/www/carambus/current setup","text":"<p>If your Rails app is in <code>/var/www/carambus/current</code> and runs as <code>www-data</code>:</p>"},{"location":"en/scoreboard_autostart_setup/#1-check-script-permissions","title":"1. Check script permissions","text":"<pre><code>sudo ls -la /var/www/carambus/current/bin/start-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#2-make-scripts-executable-for-all-users","title":"2. Make scripts executable for all users","text":"<pre><code>sudo chmod +x /var/www/carambus/current/bin/start-scoreboard.sh\nsudo chmod +x /var/www/carambus/current/bin/exit-scoreboard.sh\nsudo chmod +x /var/www/carambus/current/bin/restart-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#3-check-if-the-autostart-user-can-read-the-config-file","title":"3. Check if the autostart user can read the config file","text":"<pre><code>sudo ls -la /var/www/carambus/current/config/scoreboard_url\nsudo chmod 644 /var/www/carambus/current/config/scoreboard_url\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#4-test-the-script-manually-as-the-autostart-user","title":"4. Test the script manually as the autostart user","text":"<pre><code>/var/www/carambus/current/bin/start-scoreboard.sh\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#5-check-lxde-autostart-logs","title":"5. Check LXDE autostart logs","text":"<pre><code>tail -f ~/.cache/lxsession/LXDE-pi/run.log\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#6-alternative-use-absolute-paths-in-autostart","title":"6. Alternative: Use absolute paths in autostart","text":"<p>Edit the autostart file: <pre><code>nano ~/.config/lxsession/LXDE-pi/autostart\n</code></pre></p> <p>Make sure it contains: <pre><code>@/var/www/carambus/current/bin/start-scoreboard.sh\n</code></pre></p>"},{"location":"en/scoreboard_autostart_setup/#7-check-if-wmctrl-is-available-for-the-autostart-user","title":"7. Check if wmctrl is available for the autostart user","text":"<pre><code>which wmctrl\nsudo apt install wmctrl  # if not found\n</code></pre>"},{"location":"en/scoreboard_autostart_setup/#8-test-with-debug-output","title":"8. Test with debug output","text":"<p>Create a test script to see what's happening: <pre><code>sudo nano /var/www/carambus/current/bin/test-startup.sh\n</code></pre></p> <p>Content: <pre><code>#!/bin/bash\necho \"Starting test at $(date)\" &gt;&gt; /tmp/scoreboard-debug.log\necho \"Current user: $(whoami)\" &gt;&gt; /tmp/scoreboard-debug.log\necho \"Current directory: $(pwd)\" &gt;&gt; /tmp/scoreboard-debug.log\necho \"wmctrl available: $(which wmctrl)\" &gt;&gt; /tmp/scoreboard-debug.log\necho \"Config file content: $(cat /var/www/carambus/current/config/scoreboard_url)\" &gt;&gt; /tmp/scoreboard-debug.log\n/var/www/carambus/current/bin/start-scoreboard.sh\necho \"Test completed at $(date)\" &gt;&gt; /tmp/scoreboard-debug.log\n</code></pre></p> <p>Make executable: <pre><code>sudo chmod +x /var/www/carambus/current/bin/test-startup.sh\n</code></pre></p> <p>Test it: <pre><code>/var/www/carambus/current/bin/test-startup.sh\n</code></pre></p> <p>Check the debug log: <pre><code>cat /tmp/scoreboard-debug.log\n</code></pre></p>"},{"location":"en/scoreboard_autostart_setup/#workflow","title":"Workflow","text":"<ol> <li>Boot \u2192 Panel hidden, scoreboard starts in fullscreen</li> <li>F12 \u2192 Exit to desktop (panel visible)</li> <li>F11 \u2192 Restart scoreboard (panel hidden again)</li> </ol>"},{"location":"en/scoreboard_autostart_setup/#notes","title":"Notes","text":"<ul> <li>The scripts are now in your Rails app's <code>bin/</code> directory and tracked by git</li> <li>The scoreboard URL is configurable via <code>config/scoreboard_url</code></li> <li>If the panel doesn't hide, try different panel names: <code>panel</code>, <code>lxpanel</code>, <code>lxpanel-pi</code></li> <li>The <code>2&gt;/dev/null || true</code> prevents errors if the window doesn't exist</li> <li>Make sure your Rails server is running before testing</li> <li>Update the paths in autostart and keyboard shortcuts to match your actual Rails app location </li> </ul>"},{"location":"en/tischreservierung_heizungssteuerung/","title":"Tischreservierung und Heizungssteuerung","text":"<p>BC Wedel, Gernot, 7. Mai 2024</p> <p>Diese Dokumentation beschreibt die Prozesse f\u00fcr Tischreservierungen und die automatische Heizungssteuerung im BC Wedel.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#tischreservierungen","title":"Tischreservierungen","text":""},{"location":"en/tischreservierung_heizungssteuerung/#reservierungsprozess","title":"Reservierungsprozess","text":"<p>Tischreservierungen k\u00f6nnen von autorisierten Mitgliedern im zentralen Google Kalender \"BC Wedel\" vorgenommen werden.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#zugang-zum-kalender","title":"Zugang zum Kalender","text":"<p>Zugangslinks k\u00f6nnen durch eine informelle E-Mail an folgende Adressen angefordert werden: - <code>gernot.ullrich@gmx.de</code> - <code>wcauel@gmail.com</code></p>"},{"location":"en/tischreservierung_heizungssteuerung/#reservierungstitel-format","title":"Reservierungstitel-Format","text":"<p>Der Titel der Reservierung muss einem spezifischen Format folgen, um von Carambus korrekt ausgewertet werden zu k\u00f6nnen.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#beispiele-fur-reservierungstitel","title":"Beispiele f\u00fcr Reservierungstitel:","text":"<ul> <li>Einzeltisch: <code>T6 Gernot + Lothar</code></li> <li>Mehrere Tische: <code>T1, T4-T8 Clubabend</code></li> <li>Turnier mit Disziplin: <code>T5, T7 NDM Cadre 35/2 Klasse 5-6</code></li> </ul> <p>Hinweis: Der Begriff \"Cadre\" ist ein spezieller Terminus, der in der Reservierung verwendet werden muss.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#heizungssteuerung-tischheizungen","title":"Heizungssteuerung (Tischheizungen)","text":"<p>Die Tischheizungen werden automatisch basierend auf Kalendereintr\u00e4gen und Aktivit\u00e4ten auf dem Scoreboard gesteuert.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#aktivierung-an","title":"Aktivierung (AN)","text":"<p>Die Heizungen werden automatisch aktiviert:</p> <ol> <li>2 Stunden vor einer Reservierung</li> <li>Sp\u00e4testens innerhalb von 5 Minuten, wenn ein Spiel auf dem Scoreboard erkannt wird</li> </ol>"},{"location":"en/tischreservierung_heizungssteuerung/#deaktivierung-aus","title":"Deaktivierung (AUS)","text":"<p>Die Heizungen werden automatisch deaktiviert:</p> <ol> <li>Nach Reservierungsbeginn: Wenn f\u00fcr eine Stunde keine Aktivit\u00e4t auf dem Scoreboard erkannt wird</li> <li>Ohne laufende Reservierung: Wenn keine Reservierung l\u00e4uft und f\u00fcr eine Stunde keine Aktivit\u00e4t auf dem Scoreboard erkannt wird</li> </ol>"},{"location":"en/tischreservierung_heizungssteuerung/#technische-integration","title":"Technische Integration","text":""},{"location":"en/tischreservierung_heizungssteuerung/#carambus-system","title":"Carambus-System","text":"<p>Das Carambus-System wertet die Kalendereintr\u00e4ge aus und koordiniert die Heizungssteuerung.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#scoreboard-integration","title":"Scoreboard-Integration","text":"<p>Das Scoreboard erkennt Spielaktivit\u00e4ten und kommuniziert diese an das Heizungssteuerungssystem.</p>"},{"location":"en/tischreservierung_heizungssteuerung/#wartung-und-support","title":"Wartung und Support","text":""},{"location":"en/tischreservierung_heizungssteuerung/#kalenderzugang","title":"Kalenderzugang","text":"<p>Bei Problemen mit dem Kalenderzugang kontaktieren Sie: - <code>gernot.ullrich@gmx.de</code> - <code>wcauel@gmail.com</code></p>"},{"location":"en/tischreservierung_heizungssteuerung/#heizungsprobleme","title":"Heizungsprobleme","text":"<p>Bei Problemen mit der Heizungssteuerung: 1. \u00dcberpr\u00fcfen Sie die Kalendereintr\u00e4ge auf korrekte Formatierung 2. Kontrollieren Sie die Scoreboard-Aktivit\u00e4t 3. Kontaktieren Sie den Systemadministrator</p>"},{"location":"en/tischreservierung_heizungssteuerung/#anderungshistorie","title":"\u00c4nderungshistorie","text":"<ul> <li>7. Mai 2024: Erste Version der Dokumentation</li> <li>Erstellt von: Gernot Ullrich</li> <li>Standort: BC Wedel</li> </ul> <p>Diese Dokumentation ist Teil der Carambus-Operational-Dokumentation f\u00fcr BC Wedel. </p>"},{"location":"en/tournament_duplicate_handling/","title":"Tournament Duplicate Handling System","text":""},{"location":"en/tournament_duplicate_handling/#overview","title":"Overview","text":"<p>This system addresses the issue of duplicate tournaments with different <code>cc_id</code> values during scraping. When the source contains multiple tournaments with the same name, date, and discipline but different <code>cc_id</code> values, this system automatically detects and handles them to prevent flip-flopping between different versions.</p>"},{"location":"en/tournament_duplicate_handling/#how-it-works","title":"How It Works","text":""},{"location":"en/tournament_duplicate_handling/#1-duplicate-detection","title":"1. Duplicate Detection","text":"<ul> <li>During scraping, tournaments are grouped by name</li> <li>If multiple tournaments have the same name, they are identified as duplicates</li> <li>The system analyzes each duplicate to determine which one to keep</li> </ul>"},{"location":"en/tournament_duplicate_handling/#2-selection-logic","title":"2. Selection Logic","text":"<p>The system prioritizes tournaments in this order: 1. Has games - This is the definitive version, tournament is active and being used 2. Has seedings - Tournament managers have started working on this version (pre-tournament setup) 3. No seedings and no games - Clean slate tournaments (lowest priority) 4. Highest cc_id - If all have the same data status, the highest cc_id is usually the correct one</p>"},{"location":"en/tournament_duplicate_handling/#3-abandonment-tracking","title":"3. Abandonment Tracking","text":"<ul> <li>Abandoned <code>cc_id</code> values are stored in the <code>abandoned_tournament_ccs</code> table</li> <li>Future scraping runs will skip these abandoned <code>cc_id</code> values</li> <li>This prevents the flip-flopping behavior you were experiencing</li> </ul>"},{"location":"en/tournament_duplicate_handling/#database-schema","title":"Database Schema","text":""},{"location":"en/tournament_duplicate_handling/#abandonedtournamentcc-model","title":"AbandonedTournamentCc Model","text":"<pre><code># Fields:\n- cc_id: The abandoned tournament cc_id\n- context: The region context (e.g., 'dbu', 'nbv')\n- region_shortname: The region shortname\n- season_name: The season name\n- tournament_name: The tournament name\n- abandoned_at: When it was marked as abandoned\n- reason: Why it was abandoned\n- replaced_by_cc_id: Which cc_id replaced it\n- replaced_by_tournament_id: Which tournament replaced it\n</code></pre>"},{"location":"en/tournament_duplicate_handling/#usage","title":"Usage","text":""},{"location":"en/tournament_duplicate_handling/#automatic-handling","title":"Automatic Handling","text":"<p>The system works automatically when you run: <pre><code>rake scrape:tournaments_optimized\n</code></pre></p>"},{"location":"en/tournament_duplicate_handling/#manual-management","title":"Manual Management","text":""},{"location":"en/tournament_duplicate_handling/#analyze-duplicates","title":"Analyze Duplicates","text":"<pre><code>rake scrape:analyze_duplicates REGION=NBV SEASON=2023/2024\n</code></pre>"},{"location":"en/tournament_duplicate_handling/#list-abandoned-tournaments","title":"List Abandoned Tournaments","text":"<pre><code>rake scrape:list_abandoned_tournaments REGION=NBV SEASON=2023/2024\n</code></pre>"},{"location":"en/tournament_duplicate_handling/#manually-mark-as-abandoned","title":"Manually Mark as Abandoned","text":"<pre><code>rake scrape:mark_tournament_abandoned \\\n  CC_ID=123 \\\n  CONTEXT=nbv \\\n  REGION=NBV \\\n  SEASON=2023/2024 \\\n  TOURNAMENT=\"Tournament Name\" \\\n  REASON=\"Manual cleanup\" \\\n  REPLACED_BY_CC_ID=456\n</code></pre>"},{"location":"en/tournament_duplicate_handling/#cleanup-old-records","title":"Cleanup Old Records","text":"<pre><code># Clean up records older than 365 days (default)\nrake scrape:cleanup_abandoned_tournaments\n\n# Clean up records older than 180 days\nrake scrape:cleanup_abandoned_tournaments DAYS=180\n</code></pre>"},{"location":"en/tournament_duplicate_handling/#implementation-details","title":"Implementation Details","text":""},{"location":"en/tournament_duplicate_handling/#modified-methods","title":"Modified Methods","text":""},{"location":"en/tournament_duplicate_handling/#regionscrape_tournaments_optimized","title":"Region#scrape_tournaments_optimized","text":"<ul> <li>Now groups tournaments by name before processing</li> <li>Detects duplicates and applies selection logic</li> <li>Marks abandoned cc_ids for future runs</li> </ul>"},{"location":"en/tournament_duplicate_handling/#new-private-methods","title":"New Private Methods","text":"<ul> <li><code>process_single_tournament</code>: Handles individual tournaments</li> <li><code>process_duplicate_tournaments</code>: Handles duplicate groups</li> </ul>"},{"location":"en/tournament_duplicate_handling/#abandonedtournamentcc-model_1","title":"AbandonedTournamentCc Model","text":"<ul> <li><code>is_abandoned?</code>: Check if a cc_id is abandoned</li> <li><code>mark_abandoned!</code>: Mark a cc_id as abandoned</li> <li><code>analyze_duplicates</code>: Analyze duplicates for a region/season</li> <li><code>cleanup_old_records</code>: Remove old abandoned records</li> </ul>"},{"location":"en/tournament_duplicate_handling/#migration","title":"Migration","text":"<p>Run the migration to create the new table: <pre><code>rails db:migrate\n</code></pre></p>"},{"location":"en/tournament_duplicate_handling/#benefits","title":"Benefits","text":"<ol> <li>Eliminates Flip-flopping: Once a cc_id is abandoned, it won't be processed again</li> <li>Automatic Detection: No manual intervention required for most cases</li> <li>Audit Trail: Full history of abandoned tournaments with reasons</li> <li>Manual Override: Ability to manually mark tournaments as abandoned</li> <li>Cleanup: Automatic cleanup of old abandoned records</li> </ol>"},{"location":"en/tournament_duplicate_handling/#example-output","title":"Example Output","text":"<p>When duplicates are found: <pre><code>===== scrape ===== Found 3 duplicates for tournament 'NDM 9-Ball'\n===== scrape ===== Marked cc_id 123 as abandoned for tournament 'NDM 9-Ball' (keeping 456)\n===== scrape ===== Marked cc_id 789 as abandoned for tournament 'NDM 9-Ball' (keeping 456)\n===== scrape ===== Region NBV: Processed 15 tournaments, skipped 5 tournaments, abandoned 2 duplicates\n</code></pre></p>"},{"location":"en/tournament_duplicate_handling/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tournament_duplicate_handling/#if-a-tournament-is-incorrectly-abandoned","title":"If a tournament is incorrectly abandoned:","text":"<ol> <li>Use <code>rake scrape:list_abandoned_tournaments</code> to find it</li> <li>Delete the record from the database or mark it as replaced by the correct cc_id</li> <li>Re-run the scraping</li> </ol>"},{"location":"en/tournament_duplicate_handling/#if-duplicates-are-not-being-detected","title":"If duplicates are not being detected:","text":"<ol> <li>Use <code>rake scrape:analyze_duplicates</code> to check for duplicates</li> <li>Verify the tournament names match exactly (including whitespace)</li> <li>Check that the region and season are correct </li> </ol>"}]}