# Puma Configuration for carambus_location_5101 (production)
# Generated by Carambus Mode System

# Puma can serve each request in a thread from an internal thread pool.
threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
threads threads_count, threads_count

# Specifies the `environment` that Puma will run in.
environment ENV.fetch("RAILS_ENV") { "production" }

# Specifies the number of `workers` to boot in clustered mode.
workers ENV.fetch("WEB_CONCURRENCY") { 2 }

# Use the `preload_app!` method when specifying a `workers` number.
preload_app!

# If you are preloading your application and using Active Record, it's
# recommended that you close any connections to the database before workers
# are forked to prevent connection leakage.
before_fork do
  ActiveRecord::Base.connection_pool.disconnect! if defined?(ActiveRecord)
end

# The code in the `on_worker_boot` will be called if you are using
# clustered mode by specifying a number of `workers`.
on_worker_boot do
  ActiveRecord::Base.establish_connection if defined?(ActiveRecord)
end

# Allow puma to be restarted by `rails restart` command.
plugin :tmp_restart


# Production: Unix Socket Configuration
app_dir = File.expand_path("../..", __FILE__)
shared_dir = "#{app_dir}/shared"

# Ensure the shared directory exists
Dir.mkdir(shared_dir) unless Dir.exist?(shared_dir)

# Create socket directory
socket_dir = "#{shared_dir}/sockets"
Dir.mkdir(socket_dir) unless Dir.exist?(socket_dir)

# Create log directory
log_dir = "#{shared_dir}/log"
Dir.mkdir(log_dir) unless Dir.exist?(log_dir)

# Create pids directory
pids_dir = "#{shared_dir}/pids"
Dir.mkdir(pids_dir) unless Dir.exist?(pids_dir)

# Bind to Unix socket
bind "unix://#{socket_dir}/puma-production.sock"

# Set socket permissions
pidfile "#{pids_dir}/puma-production.pid"
state_path "#{pids_dir}/puma-production.state"

# Logging
stdout_redirect "#{log_dir}/puma.stdout.log", "#{log_dir}/puma.stderr.log", true

